{
  "submission_id": "s156006497",
  "cycles": [
    {
      "test_case": "Test Case Input:\n3\n2\n1\n2\n3",
      "test_mutations": [
        "Test Case Input:\n5\n3\n-2\n4\n0\n-1\n2",
        "Test Case Input:\n3\n2\n1\n2\n3",
        "Test Case Input:\n5\n3\n2 -1 0 3 -2",
        "Test Case Input:\n5\n3\n-2\n0\n1\n-3\n2",
        "Test Case Input:\n5\n3\n-2\n4\n0\n-1\n3",
        "Test Case Input:\n4\n2\n-1\n2\n0\n-3",
        "Test Case Input:\n4\n2\n1\n2\n3\n4",
        "Test Case Input:\n5\n3\n-2\n0\n1\n-3\n2",
        "Test Case Input:\n5\n3\n1\n2\n3\n-4\n-5",
        "Test Case Input:\n3\n2\n1\n2\n3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\" will be covered.\n\n2. Main class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. solve method declaration: always executed. Statement \"void solve() throws IOException {\" is covered.\n\n5. User Input and Program Output: always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered.\n\n6. Initialization of ArrayLists : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n\n7. For loop Execution : Since n is 3, the for loop condition (i < n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" will be covered.\n\n8. For loop contents : user input statements are always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\" will be executed.\n\n9. If - Else condition : Since a is not zero, the if condition 'a == 0' is not satisfied. Statement 'if(a==0) zeros += 1;' is not covered. The else condition is satisfied so statements 'else {' and \"negative.add(a); minus_nega.add(-a);}\" are covered.\n\n10. ArrayList Sorting : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n11. Calculation of lo and hi : always executed. Statements \"long lo = -maxi, hi = maxi+1;\" will be covered.\n\n12. While loop Execution : Since hi-lo>1, the loop block will be executed. Statement \"while(hi-lo>1){\" will be covered.\n\n13. While loop contents: if condition : always executed. Statement \"if(legal(mid)) lo = mid;\" is covered.\n\n14. While loop contents: else condition : always executed. Statement \"else hi = mid;\" is covered.\n\n15. Program Output : always executed. Statement \"System.out.println(lo);\" is covered.\n\n16. Helper methods: always executed. Statements \"boolean legal(long guess){\" and \"long helperPosList(ArrayList<Long> pos, long lower){\" are covered.\n\n17. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\n0\n1\n2\n3",
      "test_mutations": [
        "Test Case Input:\n-1\n0\n-3\n2\n1\n\n(Note: The input values are intentionally set to violate the constraints of the program and raise the specified exceptions.)",
        "Test Case Input:\n-3\n0\n-1\n2\n3",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n-5\n2\n-3\n-4\n1\n-2",
        "Test Case Input:\n\"3\" (Note: The input value is in string format instead of integer format) \n\nExpected Output:\nInputMismatchException",
        "Test Case Input:\n-3\n0\n-2\n-1\n0\n2\n3",
        "Test Case Input:\n-3\n2\n1\n-2\n3",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n1\n0\n-1",
        "Test Case Input:\n3\n0\n1\n2\n3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Method call solve(): solve() method is called from the main method. The solve() method will be executed. Statement \"main.solve();\" is covered.\n\n5. solve() method Declaration: always executed. Statement \"void solve() throws IOException {\" is covered.\n\n6. n and k variable initialization: n and k values are taken as input from the user. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered.\n\n7. Calculation of k: Calculation of k value is done using the formula k = n*(n-1)/2+1-k. Statement \"k = n*(n-1)/2+1-k;\" is covered.\n\n8. ArrayList Initialization: ArrayLists positive, negative, and minus_nega are initialized. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n\n9. maxi variable initialization: maxi value is calculated using the formula maxi = Long.MIN_VALUE. Statement \"long maxi = Long.MIN_VALUE;\" is covered.\n\n10. For loop Execution: Since the value of n is 3, the for loop condition (i<n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" is covered.\n\n11. Input and ArrayList population: Inputs are taken from the user and ArrayList positive, negative, and minus_nega are populated based on the input values. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\" are covered.\n\n12. ArrayList Sorting: ArrayLists positive, negative, and minus_nega are sorted. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n13. Calculation of lo and hi: lo and hi values are calculated using the formula lo = -maxi and hi = maxi+1. Statements \"long lo = -maxi, hi = maxi+1;\" are covered.\n\n14. while loop Execution: Since the condition (hi-lo>1) is true, the while loop block will be executed. Statement \"while(hi-lo>1){\" is covered.\n\n15. legal() method call: legal() method is called within the while loop. Statement \"if(legal(mid)) lo = mid;\" is covered.\n\n16. legal() method Declaration: always executed. Statement \"boolean legal(long guess){\" is covered.\n\n17. Calculation of ans: ans value is calculated based on the conditions inside the if statements. Statements \"long ans = 0;\", \"if(guess>0){\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\", \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\", \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\", \"}\", \"return ans >= k;\" are covered.\n\n18. Print statement: Print statement is executed. Statement \"System.out.println(lo);\" is covered.\n\n19. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is: \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> \n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n> \n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n> \n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k;\n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n> \n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n> \n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2;\n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n4\n-3\n2\n0\n-1\n-2",
      "test_mutations": [
        "Test Case Input:\n-3\n2\n1\n2\n3",
        "Test Case Input:\n\"abc\"\n3\n2\n1\n2\n3",
        "Test Case Input:\n\"3\" \"2\" \"1\" \"2\" \"3\"",
        "Test Case Input:\n-3\n0\n1\n2\n3",
        "Test Case Input:\n\"3\n0\n1\n2\n3\"",
        "Test Case Input:\n3\n2\n1\n2\n3",
        "Test Case Input:\n\"3.5\"\n\"2\"\n\"1\"\n\"2\"\n\"3\"",
        "Test Case Input:\n-3\n2\n-1\n2\n-3",
        "Test Case Input:\n\"3\"\n\"2\"\n\"1\"\n\"2\"\n\"3\"",
        "Test Case Input:\n4\n-3\n2\n0\n-1\n-2"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered. \n2. NumberDivision Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. create instances of Main class : always executed. Statement \"Main main = new Main();\" is covered.\n5. solve method call : always executed. Statement \"main.solve();\" is covered.\n6. solve method definition : always executed. Statement \"void solve() throws IOException {\" is covered.\n7. User Input and Program Output : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered. \n8. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n9. Variable Initialization : always executed. Statements \"long maxi = Long.MIN_VALUE;\", \"long zeros = 0;\" are covered.\n10. For loop Execution : Since n is 4, the for loop condition (i < n) is true, and the loop block will be executed 4 times. Statement \"for(int i=0;i<n;i++) {\" will be covered. \n11. For loop contents : user input statements are always executed. Statement \"long a = sc.nextLong();\" will be executed 4 times. \n12. Math.max function call : always executed. Statement \"maxi = Math.max(maxi,a*a);\" will be covered.\n13. If - Else condition : Since a is less than or equal to 0, the else condition is satisfied and statements inside the else block will be executed. Statements \"else {\", \"negative.add(a);\", \"minus_nega.add(-a);\" will be covered. Statements inside the if block will not be executed. Statement \"if(a>0) positive.add(a);\" will not be covered.\n14. Collections.sort function call : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" will be covered.\n15. Variable Initialization : always executed. Statements \"long lo = -maxi,\", \"hi = maxi+1;\" are covered.\n16. While loop Execution : the condition (hi-lo>1) is true, and the loop block will be executed. Statement \"while(hi-lo>1) {\" will be covered.\n17. Variable Initialization : always executed. Statement \"long mid = (hi+lo)/2;\" is covered.\n18. If - Else condition : Since guess is greater than 0, the if condition 'guess>0' is true and statements inside the if block will be executed. Statements inside the else if and else blocks will not be executed. Statements \"if(legal(mid)) lo = mid;\", \"else hi = mid;\" will be covered. Statements \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\" will be covered. \n19. If - Else condition : Since guess is less than or equal to 0, the else if condition 'guess<=0' is true and statements inside the else if block will be executed. Statements inside the if and else blocks will not be executed. Statements \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\" will be covered. \n20. If condition : Since guess is less than 0, the if condition 'guess < 0' is true and statements inside the if block will be executed. Statements inside the else block will not be executed. Statements \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0) {\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++) {\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\" will be covered. \n21. return statement : always executed. Statement \"return ans >= k;\" will be covered.\n22. System.out.println statement : always executed. Statement \"System.out.println(lo);\" will be covered.\n23. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0\n0\n0\n0",
      "test_mutations": [
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n2\n-1\n2\n3\n4",
        "Test Case Input:\n-2\n5\n3\n-1\n4\n0",
        "Test Case Input:\n-3\n2\n0\n-1\n-2",
        "Test Case Input:\n0\n0\n1\n2\n3",
        "Test Case Input:\n0\n-1",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-3\n2\n0\n-1\n-2",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n0\n0\n0\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. All import statements will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Variable Declarations : always executed. All variable declarations will be covered.\n4. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n5. solve method declaration : always executed. Statement \"void solve() throws IOException {\" is covered.\n6. User Input and Program Output : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" and \"System.out.println(lo);\" are covered.\n7. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\" and \"minus_nega = new ArrayList<>();\" are covered.\n8. For loop Execution : For loop will be executed n times. Statement \"for(int i=0;i<n;i++) {\" will be covered.\n9. Inside For loop : Statements inside the for loop will be executed n times.\n    a. Input and Processing : Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\" and \"if(a>0) positive.add(a);\" will be covered.\n    b. If-Else condition : Since a is not zero, the else condition is not satisfied. Statements \"else if(a==0) zeros += 1;\" and \"else { negative.add(a);minus_nega.add(-a); }\" are not covered.\n10. ArrayList Sorting : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\" and \"Collections.sort(minus_nega);\" are covered.\n11. While loop Execution : The while loop will be executed until the condition hi-lo>1 is true. Statement \"while(hi-lo>1) {\" will be covered.\n12. Inside While loop : Statements inside the while loop will be executed until the condition is true.\n    a. Variable assignment : always executed. Statement \"long mid = (hi+lo)/2;\" is covered.\n    b. If condition : Since legal(mid) is true, the if condition is satisfied. Statement \"if(legal(mid)) lo = mid;\" is covered.\n    c. Else condition : Since legal(mid) is true, the else condition is not satisfied. Statement \"else hi = mid;\" is not covered.\n13. Function call within solve method : Statements \"System.out.println(lo);\" and \"boolean legal(long guess) {\" will be covered.\n14. legal method Declaration and Execution : method declaration is always executed. \"boolean legal(long guess) {\" is covered. But, since the conditions in the method are dependent on the input values, the specific statements covered cannot be determined without the input values.\n15. helperPosList method Declaration and Execution : method declaration is always executed. \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered. But, since the conditions in the method are dependent on the input values, the specific statements covered cannot be determined without the input values.\n16. Closing Brackets : always covered.\n17. Final output statement in Main method : always executed. Statement \"System.out.println(lo);\" is covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-5\n2\n0\n-3\n4\n1",
      "test_mutations": [
        "Test Case Input:\n5\n-2\n-3\n4\n-1\n2",
        "Test Case Input:\n-3\n-2\n-1\n0\n1\n2",
        "Test Case Input:\n-2\n4\n3\n2\n1\n0",
        "Test Case Input:\n-3\n0\n1\n2\n3",
        "Test Case Input:\n-1\n1\n2\n3\n4",
        "Test Case Input:\n-3\n2\n0\n-1\n-2",
        "Test Case Input:\n-4\n2\n-1\n3\n0\n1",
        "Test Case Input:\n\"abc\"\n2\n1\n2\n3",
        "Test Case Input:\n-3\n3\n-2\n1\n0",
        "Test Case Input:\n-5\n2\n0\n-3\n4\n1"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statements \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. Create object of Main class and call solve method : always executed. Statements \"Main main = new Main();\", \"main.solve();\" are covered.\n5. Solve method declaration and execution : always executed. Statements \"void solve() throws IOException {\", \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\", \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\", \"for(int i=0;i<n;i++){\", \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\", \"}\", \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\", \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1){\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\", \"System.out.println(lo);\", \"}\" are covered.\n6. Legal method declaration and execution : always executed. Statements \"boolean legal(long guess){\", \"long ans = 0;\", \"if(guess>0){\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\", \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\", \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\", \"}\", \"return ans >= k;\", \"}\" are covered.\n7. helperPosList method declaration and execution : always executed. Statements \"long helperPosList(ArrayList<Long> pos, long lower){\", \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\", \"}\" are covered.\n8. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-1\n0\n1\n-2\n3",
      "test_mutations": [
        "Test Case Input:\n-3\n2\n0\n-1\n-2",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n2\n0\n1\n2",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\nabc\n2\n1\n2\n3",
        "Test Case Input:\n-5\n2\n0\n-3\n4\n1",
        "Test Case Input:\na\n2\n1\n2\n3",
        "Test Case Input:\n0\n1\n2\n3\n4",
        "Test Case Input:\n-1\n0\n1\n-2\n3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main class declaration: The main class declaration is always executed. Statement \"public class Main {\" is covered.\n\n3. Static variable declaration: Static variables are always executed. Statements \"static PrintWriter out = new PrintWriter(System.out);\", \"static Scanner sc = new Scanner(System.in);\", \"static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\" are covered.\n\n4. ArrayList and variable initialization: Statement \"ArrayList<Long> positive, negative, minus_nega;\" is covered.\n\n5. Input reading: Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered.\n\n6. Calculation of k: Statement \"k = n*(n-1)/2+1-k;\" is covered.\n\n7. ArrayList initialization: Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n\n8. Loop for input reading: The loop will iterate n times. Inside the loop, statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\" are covered. The if-else conditions are not covered.\n\n9. Sorting ArrayLists: Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n10. Calculation of lo and hi: Statements \"long lo = -maxi, hi = maxi+1;\" are covered.\n\n11. Binary search loop: The loop will iterate until the condition (hi-lo>1) is false. Inside the loop, statements \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\" are covered.\n\n12. Printing the result: Statement \"System.out.println(lo);\" is covered.\n\n13. Helper method: The helper method \"legal()\" is called. The coverage of the helper method will be determined separately.\n\n14. Closing brackets: Closing brackets are always executed. The closing brackets of the main class and the helper method are covered.\n\nCoverage of the helper method \"legal()\" will be determined separately.",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0\n0\n0\n0",
      "test_mutations": [
        "Test Case Input:\n5\n0\n1\n-2\n3\n4",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\na\n2\n1\n2\n3",
        "Test Case Input:\n-3\n0\n1\n-2\n3",
        "Test Case Input:\n0\n1",
        "Test Case Input:\n-1\n2\n-2\n3",
        "Test Case Input:\n-3\n2\n0\n-1\n-2",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n0\n0\n0\n0\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case-\n\n1. Import statements: Import statements are always executed. All import statements will be covered.\n\n2. Main Class Declaration: The Main class declaration is always executed. The statement \"public class Main {\" will be covered.\n\n3. Main method Declaration: The main method declaration is always executed. The statement \"public static void main(String[] args) throws IOException {\" will be covered.\n\n4. solve method Declaration: The solve method declaration is always executed. The statement \"void solve() throws IOException {\" will be covered.\n\n5. User Input and Program Output: The program will read inputs from the user and display outputs. The statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", and \"long a = sc.nextLong();\" will be covered.\n\n6. ArrayList Declarations: The ArrayList declarations are always executed. The statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", and \"minus_nega = new ArrayList<>();\" will be covered.\n\n7. Loop Execution: The loop will iterate n times. The loop block will be executed for each iteration. The statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else { negative.add(a);\", and \"minus_nega.add(-a);\" will be covered n times.\n\n8. ArrayList Sorting: The ArrayLists positive, negative, and minus_nega will be sorted. The statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", and \"Collections.sort(minus_nega);\" will be covered.\n\n9. Calculation of lo and hi: The statements \"long lo = -maxi;\", \"long hi = maxi+1;\", and \"while(hi-lo>1) {\" will be covered.\n\n10. Binary Search: The binary search will be performed until hi-lo>1. The statements \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", and \"else hi = mid;\" will be covered.\n\n11. Output: The result will be printed. The statement \"System.out.println(lo);\" will be covered.\n\n12. legal method Declaration and Execution: The legal method declaration is always executed. The statement \"boolean legal(long guess) {\" will be covered. The execution of the legal method depends on the value of guess. The statements inside the legal method will be covered based on the conditions.\n\n13. helperPosList method Declaration and Execution: The helperPosList method declaration is always executed. The statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" will be covered. The execution of the helperPosList method depends on the values of pos and lower. The statements inside the helperPosList method will be covered based on the conditions.\n\n14. Closing Brackets: All closing brackets will be covered.\n\nFinal code coverage of the Java program based on its test case and the given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>();\n>         negative = new ArrayList<>();\n>         minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi;\n>         long hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n0\n1\n2\n3\n4",
      "test_mutations": [
        "Test Case Input:\n\"abc\"\n2\n1\n2\n3",
        "Test Case Input:\n-1\n2\n-3\n-2\n-1\n-2",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n-1\n2\n1\n-2\n3",
        "Test Case Input:\n5\n0\n1\n2\n3\n4",
        "Test Case Input:\n3\n2\n1\n2\n3",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\na\n3\n1\n2\n3",
        "Test Case Input:\n5\n0\n1\n2\n3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "The plan for step by step execution of the given Java program and test case is as follows:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\",\"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main class declaration: Always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: Always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Main method call: Always executed. Statement \"Main main = new Main(); main.solve();\" is covered.\n\n5. solve method declaration: Always executed. Statement \"void solve() throws IOException {\" is covered.\n\n6. User Input: Always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered.\n\n7. Variable initialization: Always executed. Statements \"k = n*(n-1)/2+1-k;\", \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\", \"long zeros = 0;\" are covered.\n\n8. Loop execution: Since the value of n is 5, the loop will execute 5 times. Statement \"for(int i=0;i<n;i++) {\" will be covered.\n\n9. User input inside the loop: Always executed. Statement \"long a = sc.nextLong();\" is covered.\n\n10. Variable manipulation inside the loop: Always executed. Statements \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else { negative.add(a); minus_nega.add(-a); }\" are covered.\n\n11. Sorting of ArrayLists: Always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n12. Variable initialization within the loop: Always executed. Statements \"long lo = -maxi, hi = maxi+1;\" are covered.\n\n13. While loop execution: Always executed. Statement \"while(hi-lo>1) {\" is covered.\n\n14. Conditional statement inside the while loop: The condition \"hi-lo>1\" is true, so the block within the while loop will execute. Statement \"long mid = (hi+lo)/2;\" is covered.\n\n15. Method call inside the while loop: Always executed. Statement \"if(legal(mid)) lo = mid; else hi = mid;\" is covered.\n\n16. legal method declaration: Always executed. Statement \"boolean legal(long guess) {\" is covered.\n\n17. legal method logic: The logic inside the legal method will be executed based on the value of guess.\n\n18. System.out.println statement: Always executed. Statement \"System.out.println(lo);\" is covered.\n\n19. Closing brackets: Always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> \n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n> \n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n> \n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n * (n - 1) / 2 + 1 - k;\n>         positive = new ArrayList<>();\n>         negative = new ArrayList<>();\n>         minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for (int i = 0; i < n; i++) {\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi, a * a);\n>             if (a > 0)\n>                 positive.add(a);\n>             else if (a == 0)\n>                 zeros += 1;\n>             else {\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi + 1;\n>         while (hi - lo > 1) {\n>             long mid = (hi + lo) / 2;\n>             if (legal(mid))\n>                 lo = mid;\n>             else\n>                 hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n> \n>     boolean legal(long guess) {\n>         long ans = 0;\n>         if (guess > 0) {\n>             ans += helperPosList(positive, guess);\n>             ans += helperPosList(minus_nega, guess);\n>             if (ans >= k)\n>                 return true;\n>         }\n>         if (guess <= 0) {\n>             ans += zeros * (n - zeros);\n>             ans += positive.size() * (positive.size() - 1) / 2;\n>             ans += negative.size() * (negative.size() - 1) / 2;\n>             if (ans >= k)\n>                 return true;\n>         }\n>         if (guess < 0) {\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if (lenNeg * lenPos > 0) {\n>                 int right = 0;\n>                 for (int i = 0; i < lenPos; i++) {\n>                     long cur = positive.get(i);\n>                     while (right < lenNeg && cur * negative.get(right) < guess)\n>                         right++;\n>                     ans += lenNeg - right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n> \n>     long helperPosList(ArrayList<Long> pos, long lower) {\n>         int len = pos.size(), left = 0;\n>         long ans = 0;\n>         if (len == 0 || pos.get(len - 1) * pos.get(len - 1) < lower)\n>             return 0;\n>         for (int right = len - 1; right >= 0; right--) {\n>             long cur = pos.get(right);\n>             while (left < len && pos.get(left) * cur < lower)\n>                 left++;\n>             if (left != len) {\n>                 if (left <= right)\n>                     ans += len - left - 1;\n>                 else\n>                     ans += len - left;\n>             }\n>         }\n>         ans /= 2;\n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-2\n0\n1\n-2\n3\n-4",
      "test_mutations": [
        "Test Case Input:\na\n1\n2\n3\n4",
        "Test Case Input:\n-3\n0\n-2\n0\n0\n0",
        "Test Case Input:\n-2\n0\n0\n0\n0\n0",
        "Test Case Input:\n-3\n2\n0\n-1\n-2",
        "Test Case Input:\n-2\n2\n0\n-3\n1",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n-5\n0\n1\n-3\n4\n1",
        "Test Case Input:\n-3\n0\n1\n2\n3",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n-2\n0\n1\n-2\n3\n-4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. All import statements will be covered.\n\n2. Main class declaration: Since the Main class is the entry point of the program, the class declaration will always be executed. Statement \"public class Main {\" will be covered.\n\n3. main method declaration: The main method is the starting point of the program. The method declaration will always be executed. Statement \"public static void main(String[] args) throws IOException {\" will be covered.\n\n4. Create an instance of Main class and call solve method: The solve method is called on the instance of the Main class. Statement \"Main main = new Main();\" and \"main.solve();\" will be covered.\n\n5. Input values for n and k: The values of n and k are read from the input. Statements \"n = sc.nextInt();\" and \"k = sc.nextInt();\" will be covered.\n\n6. Calculate the value of k: The value of k is calculated based on the values of n and k. Statement \"k = n*(n-1)/2+1-k;\" will be covered.\n\n7. Initialize array lists and variables: The array lists and variables are initialized. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\", \"long zeros = 0;\", \"long k = 0;\", \"long n = 0;\" will be covered.\n\n8. Loop to read input values and process them: A loop is used to read input values and perform operations on them. The loop will execute n times. Statements \"for(int i=0;i<n;i++) {\" and \"}\" will be covered.\n\n9. Read input value and update maxi: The input value is read and the maximum value is updated if necessary. Statement \"long a = sc.nextLong();\" and \"maxi = Math.max(maxi,a*a);\" will be covered.\n\n10. Perform operations based on input value: Based on the input value, different operations are performed. Statements \"if(a>0) {\", \"else if(a==0) {\", \"else {\", \"}\" will be covered.\n\n11. Sort the array lists: The array lists are sorted. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" will be covered.\n\n12. Calculate the range for binary search: The range for the binary search is calculated. Statements \"long lo = -maxi;\", \"long hi = maxi+1;\" will be covered.\n\n13. Perform binary search: The binary search is performed to find the desired value. The loop will execute until the condition hi-lo>1 is true. Statements \"while(hi-lo>1) {\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) {\", \"else {\", \"}\" will be covered.\n\n14. Print the result: The result is printed. Statement \"System.out.println(lo);\" will be covered.\n\n15. legal method: The legal method is called to check if the guess value is legal. Statement \"boolean legal(long guess) {\" will be covered.\n\n16. Calculate the answer: The answer is calculated based on the guess value. Statements \"long ans = 0;\", \"if(guess>0) {\", \"else if(guess<=0) {\", \"if(guess<0) {\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0) {\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++) {\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) {\", \"ans += lenNeg-right;\", \"}\" will be covered.\n\n17. Return the result of the legal method: The result of the legal method is returned. Statement \"return ans >= k;\" will be covered.\n\n18. helperPosList method: The helperPosList method is called to calculate the answer. Statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" will be covered.\n\n19. Calculate the answer: The answer is calculated based on the lower value. Statements \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--) {\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) {\", \"if(left!=len) {\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\" will be covered.\n\n20. Return the answer: The answer is returned. Statement \"ans /= 2; return ans;\" will be covered.\n\n21. Closing brackets: All closing brackets will be covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-4\n0\n1\n-2\n3",
      "test_mutations": [
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n-3\n0\n-2\n-1\n-4\n-3",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n-5\n2\n0\n-3\n4\n1",
        "Test Case Input:\n-3\n2\n1\n0\n-2\n\nTest Case Input:\n5\n0\n1\n2\n3\n4\n\nTest Case Input:\n0\n0\n0\n0\n0\n\nTest Case Input:\n2\n0\n1\n2\n\nTest Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n-4\n0\n1\n-2\n3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statements \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n2. NumberDivision Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Variable declarations : always executed. Statements \"static PrintWriter out = new PrintWriter(System.out);\", \"static Scanner sc = new Scanner(System.in);\", \"static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\", \"ArrayList<Long> positive, negative, minus_nega;\", \"long zeros = 0, k = 0, n = 0;\" are covered.\n4. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n5. solve method declaration : always executed. Statement \"void solve() throws IOException {\" is covered.\n6. User Input : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered.\n7. Calculation of k : always executed. Statement \"k = n*(n-1)/2+1-k;\" is covered.\n8. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n9. Loop Execution : Since n is 5, the loop will iterate 5 times. Statement \"for(int i=0;i<n;i++){\" is covered.\n10. User Input and ArrayList population : always executed. Statement \"long a = sc.nextLong();\" is covered. Statements \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a);}\" are covered.\n11. ArrayList Sorting : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n12. Calculation of lo and hi : always executed. Statements \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1){\" are covered.\n13. Binary search : always executed. Statements \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\" are covered.\n14. Output : always executed. Statement \"System.out.println(lo);\" is covered.\n15. legal method declaration and execution : always executed. Statement \"boolean legal(long guess) {\" is covered. But the statements inside the method are conditionally executed based on the value of guess.\n16. helperPosList method declaration and execution : always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered. But the statements inside the method are conditionally executed based on the size of the ArrayList pos.\n17. Closing Brackets : always covered.\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-1\n0\n1\n-2\n3",
      "test_mutations": [
        "Test Case Input:\n-3\n-2\n-1\n0\n1\n2",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\na\n2\n1\n2\n3",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n1\n0\n0\n0\n0",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n-1\n0\n1\n-2\n3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case -\n\n1. Import statements : Import statements are always executed. Import statements in this code snippet are already covered in the given program. \n2. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n3. Object creation and method call : always executed. Statement \"Main main = new Main();\" and \"main.solve();\" are covered.\n4. solve method declaration and execution : always executed. Statement \"void solve() throws IOException {\" is covered.\n5. User Input : always executed. Statements \"n = sc.nextInt();\" and \"k = sc.nextInt();\" are covered. \n6. Calculation of k : always executed. Statement \"k = n*(n-1)/2+1-k;\" is covered. \n7. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\" and \"minus_nega = new ArrayList<>();\" are covered. \n8. Loop Execution : Since n is 5, the for loop condition (i<n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" is covered. \n9. Within the loop : user input statements are always executed. Statement \"long a = sc.nextLong();\" is covered. \n10. Calculation of maxi : always executed. Statement \"maxi = Math.max(maxi,a*a);\" is covered. \n11. If-Else condition : always executed. Statements \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\" are covered. \n12. Sorting ArrayLists : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\" and \"Collections.sort(minus_nega);\" are covered. \n13. Calculation of lo and high : always executed. Statements \"long lo = -maxi;\", \"hi = maxi+1;\" are covered. \n14. While loop execution : always executed. Statement \"while(hi-lo>1){\" is covered. \n15. legal method execution : always executed. Statement \"if(legal(mid)) lo = mid;\" is covered. \n16. else condition of legal method : always executed. Statements \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\" are covered. \n17. Second else condition of legal method : always executed. Statements \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\" are covered. \n18. Calculation in the loop : always executed. Statements \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\" are covered. \n19. return statement in legal method : always executed. Statement \"return ans >= k;\" is covered. \n20. Statement after while loop in solve method : always executed. Statement \"System.out.println(lo);\" is covered. \n21. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-1\n0\n1\n-2\n3",
      "test_mutations": [
        "Test Case Input:\n-2\n0\n1\n-2\n3\n-4",
        "Test Case Input:\n-5\n0\n1\n2\n3\n4",
        "Test Case Input:\n-2\n0\n1\n-2\n3\n-4",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n\"abc\"\n2\n1\n2\n3",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n2\n0\n-3\n4\n1",
        "Test Case Input:\n-1\n0\n1\n-2\n3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and tets case:\n1. Import statements : Import statements are always executed. \n2. Main Class Declaration : always executed. \n3. Main method decalarion : always executed. \n4. Create Main object and call solve method : always executed. \n5. Read input values for n and k : always executed. \n6. Calculate the value of k : always executed.\n7. Initialize ArrayLists and variables : always executed. \n8. For loop Execution : Since n is -1, the for loop condition (i<n) is false and the loop block will not be executed. \n9. Statement after the for loop in solve method : \"System.out.println(lo);\" will not be executed since the for loop failed to execute. \n10. legal method Declaration and Execution : method declaration is always executed. \n11. legal method logic : The logic within the legal method is executed based on the value of guess. Since guess is not specified in the test case, we cannot determine the code coverage for this part. \n12. helperPosList method Declaration and Execution : method declaration is always executed. \n13. helperPosList method logic : The logic within the helperPosList method is executed based on the value of lower. Since lower is not specified in the test case, we cannot determine the code coverage for this part. \n14. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0\n0\n0\n0",
      "test_mutations": [
        "Test Case Input:\n-5\n2\n0\n-3\n4\n1",
        "Test Case Input:\n-3\n0\n1\n-2\n3\n-4",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n1\n0",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n1\n0",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n0\n0\n0\n0\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main class declaration: Main class declaration is always executed. Statement \"public class Main {\" will be covered.\n\n3. Main method declaration: Main method declaration is always executed. Statement \"public static void main(String[] args) throws IOException {\" will be covered.\n\n4. Create an instance of Main class and call solve method: The solve method will be executed. Statement \"Main main = new Main();\", \"main.solve();\" will be covered.\n\n5. Solve method execution:\n   - Read values for n and k: The values for n and k will be read. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" will be covered.\n   - Calculate the value of k: The value of k will be calculated. Statement \"k = n*(n-1)/2+1-k;\" will be covered.\n   - Initialize ArrayLists and variables: The ArrayLists positive, negative, minus_nega will be initialized and variables zeros, k, n will be assigned values. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long zeros = 0, k = 0, n = 0;\" will be covered.\n   - Initialize maxi variable: The value of maxi will be initialized. Statement \"long maxi = Long.MIN_VALUE;\" will be covered.\n   - Loop to read values and classify them: The loop will be executed n times. Statements \"for(int i=0;i<n;i++){\", \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\" will be covered.\n   - Sort the ArrayLists: The ArrayLists positive, negative, minus_nega will be sorted. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" will be covered.\n   - Initialize lo and hi variables: The values of lo and hi will be initialized. Statements \"long lo = -maxi, hi = maxi+1;\" will be covered.\n   - Loop to find the value of lo: The loop will continue until hi-lo>1. Statements \"while(hi-lo>1){\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\" will be covered.\n   - Print the value of lo: The value of lo will be printed. Statement \"System.out.println(lo);\" will be covered.\n   \n6. legal method execution:\n   - Initialize ans variable: The value of ans will be initialized. Statement \"long ans = 0;\" will be covered.\n   - Check if guess is greater than 0: If guess is greater than 0, perform the following steps:\n     - Call helperPosList method for positive and minus_nega ArrayLists: Statements \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\" will be covered.\n     - Check if ans is greater than or equal to k: If ans is greater than or equal to k, return true. Statement \"if(ans>=k) return true;\" will be covered.\n     \n   - Check if guess is less than or equal to 0: If guess is less than or equal to 0, perform the following steps:\n     - Update ans with calculations for zeros, positive, and negative ArrayLists: Statements \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\" will be covered.\n     - Check if ans is greater than or equal to k: If ans is greater than or equal to k, return true. Statement \"if(ans>=k) return true;\" will be covered.\n     \n   - Check if guess is less than 0: If guess is less than 0, perform the following steps:\n     - Calculate lenPos and lenNeg: Statements \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\" will be covered.\n     - Loop to calculate ans for lenPos and lenNeg: The loop will iterate lenPos times. Statements \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\" will be covered.\n     \n   - Return true if ans is greater than or equal to k, otherwise return false: Statement \"return ans >= k;\" will be covered.\n   \n7. helperPosList method execution:\n   - Initialize len, left, and ans variables: The values of len, left, and ans will be initialized. Statements \"int len = pos.size(), left=0;\", \"long ans = 0;\" will be covered.\n   - Check if len is 0 or the square of the last element in pos is less than lower: If len is 0 or the square of the last element in pos is less than lower, return 0. Statement \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\" will be covered.\n   - Loop to calculate ans: The loop will iterate len times. Statements \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\" will be covered.\n   - Calculate ans: Statement \"ans /= 2;\" will be covered.\n   - Return ans: Statement \"return ans;\" will be covered.\n   \n8. Closing bracket: The closing bracket of the Main class will be covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> \n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n> \n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n> \n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n> \n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n> \n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-1\n0\n1\n-2\n3",
      "test_mutations": [
        "Test Case Input:\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n-2\n0\n1\n2\n3",
        "Test Case Input:\n5\n0\n1\n2\n3\n4",
        "Test Case Input:\n-3\n0\n1\n2\n3",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n0\n0\n0\n0",
        "Test Case Input:\n-1\n0\n1\n-2\n3",
        "Test Case Input:\n-5\n0\n1\n-2\n3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-1\n0\n1\n-2\n3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main class declaration: The main class declaration is always executed. Statement \"public class Main {\" is covered.\n\n3. main method declaration: The main method declaration is always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. solve method declaration: The solve method declaration is always executed. Statement \"void solve() throws IOException {\" is covered.\n\n5. User input and variable initialization: The user input statements and variable initialization are always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered.\n\n6. ArrayList initialization: The ArrayLists positive, negative, and minus_nega are always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n\n7. Loop execution: The for loop executes n times. The loop block will be executed. The loop condition \"for(int i=0;i<n;i++)\" is covered.\n\n8. Loop contents: The user input statements and conditional statements inside the loop block are always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a); }\" are covered.\n\n9. ArrayList sorting: The ArrayLists positive, negative, and minus_nega are sorted. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n10. While loop execution: The while loop executes until the condition \"hi-lo>1\" is false. The loop block will be executed. Statement \"while(hi-lo>1) {\" is covered.\n\n11. legal method execution: The legal method is executed inside the while loop. Statement \"if(legal(mid)) lo = mid;\" is covered.\n\n12. legal method declaration and execution: The legal method declaration is always executed. Statement \"boolean legal(long guess) {\" is covered. The contents of the legal method will be executed based on the conditions.\n\n13. Print statement: The print statement is always executed. Statement \"System.out.println(lo);\" is covered.\n\n14. Closing Brackets: The closing brackets of the main method, solve method, and Main class are always executed.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> \n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n> \n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n> \n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n> \n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n> \n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}