{
  "submission_id": "s181652696",
  "cycles": [
    {
      "test_case": "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n2 0 3\n1 2 2",
        "Test Case Input:\n3\n0 1 2\n1 2 3\n0 2 4",
        "Test Case Input:\n1\n1 2 3",
        "Test Case Input:\n3\n0 1 2\n1 2 3\n2 0 4\n2\n1 2 1\n2 0 3",
        "Test Case Input:\n3\n0 1 2\n1 2 3\n2 0 4\n2\n0 1 5\n1 2 6",
        "Test Case Input:\n1\n1 2 5",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 8",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. io method declaration and execution : always executed. Statements \"void io() {\" and \"new Main().io();\" are covered.\n5. Scanner object creation and while loop execution : always executed. Statements \"java.util.Scanner sc = new Scanner(System.in);\" and \"while(true) {\" are covered.\n6. max and g array initialization : always executed. Statements \"int max = 0;\" and \"g = new int[10][10];\" are covered.\n7. nested for loop for g array initialization : always executed. Statements \"for(int i=0; i<10; ++i) {\" and \"for(int j=0; j<10; ++j) {\" are covered.\n8. if conditions for g array initialization : The if conditions will be executed based on the user input. Statements \"g[i][j] = i==j ? 0 : INF;\" will be covered based on the inputs provided.\n9. max calculation : always executed. Statements \"if(max < a+1) {\" and \"if(max < b+1) {\" are covered.\n10. min and num initialization : always executed. Statements \"int min = INF;\" and \"int num = -1;\" are covered.\n11. for loop for calculating min and num : always executed. Statement \"for(int i=0; i<max; ++i) {\" is covered.\n12. die method call within for loop : always executed. Statement \"int res = die(i, max);\" is covered.\n13. die method Declaration and Execution : method declaration is always executed. \"int die(int s, int n) {\" is covered. The while loop within the method will be executed based on the values of s and n. \n14. while loop within die method : The while loop will be executed based on the values of s and n. Statements \"int u = -1;\" and \"while(true) {\" are covered.\n15. for loop within while loop : always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered.\n16. if condition within for loop : always executed. Statements \"if(!used[v] && (u==-1 || d[v] < d[u])) {\" is covered.\n17. Statements within if condition : always executed. Statement \"u = v;\" is covered.\n18. if condition within while loop : always executed. Statement \"if(u==-1) { break; }\" is covered.\n19. if condition within for loop : always executed. Statement \"if(d[v] > d[u] + g[u][v]) {\" is covered.\n20. Statements within if condition : always executed. Statement \"d[v] = d[u] + g[u][v];\" is covered.\n21. Statements after for loop within while loop : always executed. Statements \"used[u] = true;\" and \"}\" are covered.\n22. Statements after while loop within die method : always executed. Statement \"int val = 0;\" and \"return val;\" are covered.\n23. Statements after die method call within for loop : always executed. Statements \"if(res < min) {\" and \"num = i;\" are covered.\n24. Statements after for loop : always executed. Statement \"System.out.println(num + \" \" + min);\" is covered.\n25. Statements after while loop : always executed. No statements present after the while loop.\n26. Closing Brackets : always covered.\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.Scanner;\n> public class Main {\n>     int d[];\n>     boolean used[];\n>     int g[][];\n>     final int INF = 1 << 28;\n>     int die(int s, int n){\n>         used = new boolean[n];\n>         d = new int[n];\n>         for(int j=0; j<n; ++j){ d[j] = INF; }\n>         d[s] = 0;\n>         while(true){\n>             int u = -1;\n>             for(int v=0; v<n; ++v){\n>                 if(!used[v] && (u==-1 || d[v] < d[u])){\n>                     u = v;\n>                 }\n>             }\n>             if(u==-1){ break; }\n>             used[u] = true;\n>             for(int v=0; v<n; ++v){\n>                 if(d[v] > d[u] + g[u][v]){\n>                     d[v] = d[u] + g[u][v];\n>                 }\n>             }\n>         }\n>         int val = 0;\n>         for(int i=0; i<n; ++i){\n>             val += d[i];\n>         }\n>         return val;\n>     }\n>     void io(){\n>         java.util.Scanner sc = new Scanner(System.in);\n>         while(true){\n>             int max = 0;\n>             g = new int[10][10];\n>             for(int i=0; i<10; ++i){\n>                 for(int j=0; j<10; ++j){\n>                     g[i][j] = i==j ? 0 : INF;\n>                 }\n>             }\n>             final int n = sc.nextInt();\n>             for(int i=0; i<n; ++i){\n>                 final int a = sc.nextInt();\n>                 final int b = sc.nextInt();\n>                 final int c = sc.nextInt();\n>                 g[a][b] = c;\n>                 g[b][a] = c;\n>                 if(max < a+1){\n>                     max = a+1;\n>                 }\n>                 if(max < b+1){\n>                     max = b+1;\n>                 }\n>             }\n>             int min = INF;\n>             int num = -1;\n>             for(int i=0; i<max; ++i){\n>                 int res = die(i, max);\n>                 if(res < min){\n>                     min = res;\n>                     num = i;\n>                 }\n>             }\n>             System.out.println(num + \" \" + min);\n>         }\n>     }\n>     public static void main(String[] args) {\n>         new Main().io();\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 \"2\"",
        "Test Case Input:\n5\n0 1 5\n1 2 3\n2 0 2\n3 2 4\n4 1 2",
        "Test Case Input:\n2\n0 1 5\n1 2 3",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n2\n0 1 3\n1 2 4",
        "Test Case Input:\n1\n0 1 5",
        "Test Case Input:\n1\n0 1 5",
        "Test Case Input:\n2\n0 1 5\n1 2 3",
        "Test Case Input:\n2\n0 1 3\n1 2 2",
        "Test Case Input:\n0\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "The plan for step by step execution of the given Java program and test case is as follows:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered. \n2. Main Class Declaration: Always executed. Statement \"public class Main {\" is covered. \n3. Main method declaration: Always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. io method declaration and execution: Method declaration is always executed. Statement \"void io() {\" is covered. Since the program is running in a loop, the statements within the while loop will be executed multiple times.\n5. Scanner object creation: Always executed. Statement \"java.util.Scanner sc = new Scanner(System.in);\" is covered.\n6. While loop condition: Always executed. The while loop will continue indefinitely until a break statement is encountered. Statement \"while(true) {\" is covered.\n7. max initialization: Always executed. Statement \"int max = 0;\" is covered.\n8. g array initialization: Always executed. Statement \"g = new int[10][10];\" is covered.\n9. Nested for loop for g array initialization: Always executed. Both the outer and inner for loops will iterate 10 times each. Statements \"for(int i=0; i<10; ++i) {\" and \"for(int j=0; j<10; ++j) {\" are covered.\n10. g array initialization based on input values: Statements within the nested for loop will be executed based on the user input values. Statements \"g[i][j] = i==j ? 0 : INF;\" and \"g[b][a] = c;\" are covered.\n11. max calculation: Statements within the if conditions will be executed based on the input values. Statements \"if(max < a+1) {\" and \"if(max < b+1) {\" are covered.\n12. min and num initialization: Always executed. Statements \"int min = INF;\" and \"int num = -1;\" are covered.\n13. for loop for die method call: The for loop will iterate max times. Statement \"for(int i=0; i<max; ++i) {\" is covered.\n14. die method call: The die method will be called max times. Statement \"int res = die(i, max);\" is covered.\n15. die method execution: The die method will be executed max times. Statements within the die method will be covered.\n16. System.out.println statement: The System.out.println statement will be executed max times. Statement \"System.out.println(num + \" \" + min);\" is covered.\n17. Closing Brackets: Always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.util.Scanner;\n> public class Main {\n>     int d[];\n>     boolean used[];\n>     int g[][];\n>     final int INF = 1 << 28;\n>     \n>     int die(int s, int n){\n>         used = new boolean[n];\n>         d = new int[n];\n>         for(int j=0; j<n; ++j){ d[j] = INF; }\n>         d[s] = 0;\n>         while(true){\n>             int u = -1;\n>             for(int v=0; v<n; ++v){\n>                 if(!used[v] && (u==-1 || d[v] < d[u])){\n>                     u = v;\n>                 }\n>             }\n>             if(u==-1){ break; }\n>             used[u] = true;\n>             for(int v=0; v<n; ++v){\n>                 if(d[v] > d[u] + g[u][v]){\n>                     d[v] = d[u] + g[u][v];\n>                 }\n>             }\n>         }\n>         int val = 0;\n>         for(int i=0; i<n; ++i){\n>             val += d[i];\n>         }\n>         return val;\n>     }\n>     \n>     void io(){\n>         java.util.Scanner sc = new Scanner(System.in);\n>         while(true){\n>             int max = 0;    \n>             g = new int[10][10];\n>             for(int i=0; i<10; ++i){\n>                 for(int j=0; j<10; ++j){\n>                     g[i][j] = i==j ? 0 : INF;\n>                 }\n>             }\n>             final int n = sc.nextInt();\n>             for(int i=0; i<n; ++i){\n>                 final int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n>                 g[a][b] = c;\n>                 g[b][a] = c;\n>                 if(max < a+1){\n>                     max = a+1;\n>                 }\n>                 if(max < b+1){\n>                     max = b+1;\n>                 }\n>             }\n>             int min = INF;\n>             int num = -1;\n>             for(int i=0; i<max; ++i){\n>                 int res = die(i, max);\n>                 if(res < min){\n>                     min = res;\n>                     num = i;\n>                 }\n>             }\n>             System.out.println(num + \" \" + min);\n>         }\n>     }\n>     \n>     public static void main(String[] args) {\n>         new Main().io();\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n1\n0 1 5",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n2 0 2\n\nNote: This test case is the same as the first test case in the previously generated test cases.",
        "Test Case Input:\n-2\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n1\n0 1 5\n1 2 3\n2 0 2\n3",
        "Test Case Input:\n1\n0 1 5",
        "Test Case Input:\n2\n0 1 5\n1 2 3",
        "Test Case Input:\n4\n1 2 3\n2 3 4\n3 4 5\n4 5 6",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n\n2. Main class declaration : always executed. Statement \"public class Main {\" is covered.\n\n3. die method declaration : always executed. Statement \"int die(int s, int n) {\" is covered.\n\n4. Initializing variables : always executed. Statements \"used = new boolean[n];\" and \"d = new int[n];\" are covered.\n\n5. Initializing d array : always executed. For loop \"for(int j=0; j<n; ++j){ d[j] = INF; }\" is covered.\n\n6. Initializing u variable : always executed. Statement \"int u = -1;\" is covered.\n\n7. Outer while loop condition : always executed. Statement \"while(true) {\" is covered.\n\n8. Inner for loop condition : always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered.\n\n9. Checking condition for updating u : always executed. If condition \"if(!used[v] && (u==-1 || d[v] < d[u])) {\" is covered.\n\n10. Updating u : always executed. Statement \"u = v;\" is covered.\n\n11. Checking for breaking the loop : always executed. If condition \"if(u==-1) { break; }\" is covered.\n\n12. Marking u as used : always executed. Statement \"used[u] = true;\" is covered.\n\n13. Updating d array : always executed. Statement \"if(d[v] > d[u] + g[u][v]) { d[v] = d[u] + g[u][v]; }\" is covered.\n\n14. Calculating val : always executed. For loop \"for(int i=0; i<n; ++i) { val += d[i]; }\" is covered.\n\n15. Returning val : always executed. Statement \"return val;\" is covered.\n\n16. io method declaration : always executed. Statement \"void io() {\" is covered.\n\n17. Creating Scanner object : always executed. Statement \"java.util.Scanner sc = new Scanner(System.in);\" is covered.\n\n18. Outer while loop condition : always executed. Statement \"while(true) {\" is covered.\n\n19. Initializing max variable : always executed. Statement \"int max = 0;\" is covered.\n\n20. Initializing 2D array g : always executed. For loop \"for(int i=0; i<10; ++i) { for(int j=0; j<10; ++j) { g[i][j] = i==j ? 0 : INF; } }\" is covered.\n\n21. Getting input for n : always executed. Statement \"final int n = sc.nextInt();\" is covered.\n\n22. Inner for loop for getting input for a, b, c : executed 3 times. Statements \"for(int i=0; i<n; ++i) { final int a = sc.nextInt(); final int b = sc.nextInt(); final int c = sc.nextInt(); }\" are covered.\n\n23. Updating g array : executed 3 times. Statements \"g[a][b] = c;\", \"g[b][a] = c;\", \"if(max < a+1) { max = a+1; }\", \"if(max < b+1) { max = b+1; }\" are covered.\n\n24. Initializing min and num variables : always executed. Statements \"int min = INF;\", \"int num = -1;\" are covered.\n\n25. Outer for loop : executed max times. For loop \"for(int i=0; i<max; ++i) {\" is covered.\n\n26. Calling die method : executed max times. Statement \"int res = die(i, max);\" is covered.\n\n27. Updating min and num : executed max times. Statements \"if(res < min) { min = res; num = i; }\" are covered.\n\n28. Printing num and min : executed max times. Statement \"System.out.println(num + \" \" + min);\" is covered.\n\n29. Closing Brackets : always executed.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.util.Scanner;\n\n> public class Main {\n>     int d[];\n>     boolean used[];\n>     int g[][];\n>     final int INF = 1 << 28;\n>     int die(int s, int n){\n>         used = new boolean[n];\n>         d = new int[n];\n>         for(int j=0; j<n; ++j){ d[j] = INF; }\n>         d[s] = 0;\n>         while(true){\n>             int u = -1;\n>             for(int v=0; v<n; ++v){\n>                 if(!used[v] && (u==-1 || d[v] < d[u])){\n>                     u = v;\n>                 }\n>             }\n>             if(u==-1){ break; }\n>             used[u] = true;\n>             for(int v=0; v<n; ++v){\n>                 if(d[v] > d[u] + g[u][v]){\n>                     d[v] = d[u] + g[u][v];\n>                 }\n>             }\n>         }\n>         int val = 0;\n>         for(int i=0; i<n; ++i){\n>             val += d[i];\n>         }\n>         return val;\n>     }\n>     void io(){\n>         java.util.Scanner sc = new Scanner(System.in);\n>         while(true){\n>             int max = 0;\n>             g = new int[10][10];\n>             for(int i=0; i<10; ++i){\n>                 for(int j=0; j<10; ++j){\n>                     g[i][j] = i==j ? 0 : INF;\n>                 }\n>             }\n>             final int n = sc.nextInt();\n>             for(int i=0; i<n; ++i){\n>                 final int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n>                 g[a][b] = c;\n>                 g[b][a] = c;\n>                 if(max < a+1){\n>                     max = a+1;\n>                 }\n>                 if(max < b+1){\n>                     max = b+1;\n>                 }\n>             }\n>             int min = INF;\n>             int num = -1;\n>             for(int i=0; i<max; ++i){\n>                 int res = die(i, max);\n>                 if(res < min){\n>                     min = res;\n>                     num = i;\n>                 }\n>             }\n>             System.out.println(num + \" \" + min);\n>         }\n>     }\n>     public static void main(String[] args) {\n>         new Main().io();\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\nTest Case Input:\n0\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\n4\n0 1 2\n1 2 3\n2 3 4\n3 0 5\n\nTest Case Input:\n2\n0 1 5\n1 2 3",
      "test_mutations": [
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n2\n0 1 5\n1 2 3",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n2\n0 1 5\n1 2 3",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n2\n0 1 10\n1 2 5",
        "Test Case Input:\nTest Case Input:\n0\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\n4\n0 1 2\n1 2 3\n2 3 4\n3 0 5\n\nTest Case Input:\n2\n0 1 5\n1 2 3"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. io method declaration and execution: The io method will be executed indefinitely until a break condition is met. Statements \"void io() {\" and \"new Main().io();\" will be covered. \n5. Scanner object creation and while loop: The while loop will run indefinitely until a break statement is encountered. Statements \"java.util.Scanner sc = new Scanner(System.in);\" and \"while(true) {\" will be covered. \n6. Input and Initialization of Variables: Statements \"final int n = sc.nextInt();\" and \"int max = 0;\" will be covered. \n7. 2D Array Initialization: Statements \"g = new int[10][10];\" and \"for(int i=0; i<10; ++i) {\" will be covered. \n8. Nested 2D Array Initialization: Statements \"for(int j=0; j<10; ++j) {\" and \"g[i][j] = i==j ? 0 : INF;\" will be covered. \n9. Input and Update of 2D Array: Statements \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\", \"final int c = sc.nextInt();\", \"g[a][b] = c;\", and \"g[b][a] = c;\" will be covered. \n10. Max Value Calculation: Statements \"if(max < a+1) {\" and \"if(max < b+1) {\" will be covered. \n11. Minimum Value Calculation: Statements \"int min = INF;\" and \"if(res < min) {\" will be covered. \n12. Variable Update and Output: Statements \"min = res;\" and \"System.out.println(num + \" \" + min);\" will be covered. \n13. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.Scanner;\n> public class Main {\n>     int d[];\n>     boolean used[];\n>     int g[][];\n>     final int INF = 1 << 28;\n>     int die(int s, int n){\n>         used = new boolean[n];\n>         d = new int[n];\n>         for(int j=0; j<n; ++j){ d[j] = INF; }\n>         d[s] = 0;\n>         while(true){\n>             int u = -1;\n>             for(int v=0; v<n; ++v){\n>                 if(!used[v] && (u==-1 || d[v] < d[u])){\n>                     u = v;\n>                 }\n>             }\n>             if(u==-1){ break; }\n>             used[u] = true;\n>             for(int v=0; v<n; ++v){\n>                 if(d[v] > d[u] + g[u][v]){\n>                     d[v] = d[u] + g[u][v];\n>                 }\n>             }\n>         }\n>         int val = 0;\n>         for(int i=0; i<n; ++i){\n>             val += d[i];\n>         }\n>         return val;\n>     }\n>     void io(){\n>         java.util.Scanner sc = new Scanner(System.in);\n>         while(true){\n>             int max = 0;    \n>             g = new int[10][10];\n>             for(int i=0; i<10; ++i){\n>                 for(int j=0; j<10; ++j){\n>                     g[i][j] = i==j ? 0 : INF;\n>                 }\n>             }\n>             final int n = sc.nextInt();\n>             for(int i=0; i<n; ++i){\n>                 final int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n>                 g[a][b] = c;\n>                 g[b][a] = c;\n>                 if(max < a+1){\n>                     max = a+1;\n>                 }\n>                 if(max < b+1){\n>                     max = b+1;\n>                 }\n>             }\n>             int min = INF;\n>             int num = -1;\n>             for(int i=0; i<max; ++i){\n>                 int res = die(i, max);\n>                 if(res < min){\n>                     min = res;\n>                     num = i;\n>                 }\n>             }\n>             System.out.println(num + \" \" + min);\n>         }\n>     }\n>     public static void main(String[] args) {\n>         new Main().io();\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\n0\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\n2\n0 1 5\n1 2 3\n\nTest Case Input:\n4\n0 1 2\n1 2 3\n2 3 4\n3 0 5",
        "Test Case Input:\n0\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\n-2\n1 2 3\n3 4 5\n6 7 8\n\nTest Case Input:\n\"abc\"\n\nTest Case Input:\n5\n0 1 2 3 4\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\n4 5 6 7 8",
        "Test Case Input:\n2\n0 1 5\n1 2 3",
        "Test Case Input:\nTest Case Input:",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\nTest Case Input:\n0",
        "Test Case Input:\nTest Case Input:\nTest Case Input:\nTest Case Input:\n0\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\n4\n0 1 2\n1 2 3\n2 3 4\n3 0 5\n\nTest Case Input:\n2\n0 1 5\n1 2 3",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered. \n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n\n3. int[] d and boolean[] used initialization : always executed. Statements \"int d[];\", \"boolean used[];\" are covered. \n\n4. die method Declaration and Execution : method declaration is always executed. \"int die(int s, int n) {\" is covered. \n\n5. used and d array initialization : always executed. Statements \"used = new boolean[n];\", \"d = new int[n];\" are covered. \n\n6. for loop (while loop condition) : always executed. Statement \"while(true) {\" is covered. \n\n7. for loop contents : always executed. Statements \"int u = -1;\", \"for(int v=0; v<n; ++v) {\", \"if(!used[v] && (u==-1 || d[v] < d[u])) {\", \"u = v;\", \"if(u==-1) {\", \"break;\", \"used[u] = true;\", \"for(int v=0; v<n; ++v) {\", \"if(d[v] > d[u] + g[u][v]) {\", \"d[v] = d[u] + g[u][v];\", \"}\" are all covered. \n\n8. val calculation in die method : always executed. Statement \"int val = 0;\" is covered. \n\n9. for loop to calculate val : always executed. Statements \"for(int i=0; i<n; ++i) {\", \"val += d[i];\" are covered. \n\n10. Return val in die method : always executed. Statement \"return val;\" is covered. \n\n11. io method Declaration and Execution : method declaration is always executed. \"void io() {\" is covered. \n\n12. Scanner object creation : always executed. Statement \"java.util.Scanner sc = new Scanner(System.in);\" is covered. \n\n13. while(true) loop condition : always executed. Statement \"while(true) {\" is covered. \n\n14. g 2D array initialization : always executed. Statement \"g = new int[10][10];\" is covered. \n\n15. nested for loop for g array initialization : always executed. Statements \"for(int i=0; i<10; ++i) {\", \"for(int j=0; j<10; ++j) {\", \"g[i][j] = i==j ? 0 : INF;\", \"}\" are covered. \n\n16. n input : always executed. Statement \"final int n = sc.nextInt();\" is covered. \n\n17. for loop for a, b, c input and g array assignment : always executed. Statements \"for(int i=0; i<n; ++i) {\", \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\", \"final int c = sc.nextInt();\", \"g[a][b] = c;\", \"g[b][a] = c;\", \"if(max < a+1) {\", \"max = a+1;\", \"}\", \"if(max < b+1) {\", \"max = b+1;\", \"}\" are covered. \n\n18. min and num initialization : always executed. Statements \"int min = INF;\", \"int num = -1;\" are covered. \n\n19. for loop to calculate min and num : always executed. Statements \"for(int i=0; i<max; ++i) {\", \"int res = die(i, max);\", \"if(res < min) {\", \"min = res;\", \"num = i;\", \"}\" are covered. \n\n20. System.out.println statement : always executed. Statement \"System.out.println(num + \" \" + min);\" is covered. \n\n21. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n\n> import java.util.Scanner;\n> public class Main {\n>     int d[];\n>     boolean used[];\n>     int g[][];\n>     final int INF = 1 << 28;\n>     int die(int s, int n){\n>         used = new boolean[n];\n>         d = new int[n];\n>         for(int j=0; j<n; ++j){ d[j] = INF; }\n>         d[s] = 0;\n>         while(true){\n>             int u = -1;\n>             for(int v=0; v<n; ++v){\n>                 if(!used[v] && (u==-1 || d[v] < d[u])){\n>                     u = v;\n>                 }\n>             }\n>             if(u==-1){ break; }\n>             used[u] = true;\n>             for(int v=0; v<n; ++v){\n>                 if(d[v] > d[u] + g[u][v]){\n>                     d[v] = d[u] + g[u][v];\n>                 }\n>             }\n>         }\n>         int val = 0;\n>         for(int i=0; i<n; ++i){\n>             val += d[i];\n>         }\n>         return val;\n>     }\n>     void io(){\n>         java.util.Scanner sc = new Scanner(System.in);\n>         while(true){\n>             int max = 0;    \n>             g = new int[10][10];\n>             for(int i=0; i<10; ++i){\n>                 for(int j=0; j<10; ++j){\n>                     g[i][j] = i==j ? 0 : INF;\n>                 }\n>             }\n>             final int n = sc.nextInt();\n>             for(int i=0; i<n; ++i){\n>                 final int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n>                 g[a][b] = c;\n>                 g[b][a] = c;\n>                 if(max < a+1){\n>                     max = a+1;\n>                 }\n>                 if(max < b+1){\n>                     max = b+1;\n>                 }\n>             }\n>             int min = INF;\n>             int num = -1;\n>             for(int i=0; i<max; ++i){\n>                 int res = die(i, max);\n>                 if(res < min){\n>                     min = res;\n>                     num = i;\n>                 }\n>             }\n>             System.out.println(num + \" \" + min);\n>         }\n>     }\n>     public static void main(String[] args) {\n>         new Main().io();\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\n1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n2\n0 1 5\n1 2 3",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\nTest Case Input:\nTest Case Input:\nTest Case Input:\nTest Case Input:\nTest Case Input:\nTest Case Input:\nTest Case Input:\nTest Case Input:\nTest Case Input:",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\nTest Case Input: \n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN: \n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. io method declaration : always executed. Statement \"void io() {\" is covered.\n4. Scanner object creation : always executed. Statement \"java.util.Scanner sc = new Scanner(System.in);\" is covered.\n5. Infinite while loop : always executed. Statement \"while(true) {\" is covered.\n6. Initialization of max and g array : always executed. Statements \"int max = 0;\", \"g = new int[10][10];\", \"for(int i=0; i<10; ++i) {\", \"for(int j=0; j<10; ++j) {\" and \"g[i][j] = i==j ? 0 : INF;\" are covered.\n7. User Input : always executed. Statement \"final int n = sc.nextInt();\" is covered.\n8. Loop for input : executed only if the value of n is not 0. \n   > if n is 0, the loop will not be executed. Statement \"for(int i=0; i<n; ++i) {\" is not covered.\n   > if n is not 0, the loop will be executed. Statements \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\" and \"final int c = sc.nextInt();\" are covered.\n9. Updating max value : always executed. Statements \"if(max < a+1) {\" and \"if(max < b+1) {\" are covered.\n10. Function call : always executed. Statement \"int res = die(i, max);\" is covered.\n11. die method declaration and execution : always executed. Statements \"int die(int s, int n) {\" and \"int res = die(i, max);\" are covered.\n12. used and d arrays initialization : always executed. Statements \"used = new boolean[n];\" and \"d = new int[n];\" are covered.\n13. Loop for d array initialization : always executed. Statement \"for(int j=0; j<n; ++j) {\" is covered.\n14. Updating d array values : always executed. Statement \"d[j] = INF;\" is covered.\n15. Setting initial value of d[s] : always executed. Statement \"d[s] = 0;\" is covered.\n16. While loop : always executed. Statement \"while(true) {\" is covered.\n17. Loop for u value : always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered.\n18. If condition : executed only if the value of used[v] is false and the u value is -1 or d[v] < d[u].\n   > if the condition is not satisfied, the if block is not executed. Statement \"if(!used[v] && (u==-1 || d[v] < d[u])) {\" is not covered.\n   > if the condition is satisfied, the if block is executed. Statement \"u = v;\" is covered.\n19. If condition check : always executed. Statement \"if(u==-1) {\" is covered.\n20. If condition check : executed only if the value of u is -1.\n   > if the condition is not satisfied, the if block is not executed. Statement \"if(u==-1) {\" is not covered.\n   > if the condition is satisfied, the if block is executed. Statement \"break;\" is covered.\n21. used array update : always executed. Statement \"used[u] = true;\" is covered.\n22. Loop for v value : always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered.\n23. If condition : executed only if the value of d[v] > d[u] + g[u][v].\n   > if the condition is not satisfied, the if block is not executed. Statement \"if(d[v] > d[u] + g[u][v]) {\" is not covered.\n   > if the condition is satisfied, the if block is executed. Statement \"d[v] = d[u] + g[u][v];\" is covered.\n24. Loop for i value : always executed. Statement \"for(int i=0; i<n; ++i) {\" is covered.\n25. val calculation : always executed. Statement \"val += d[i];\" is covered.\n26. val returned : always executed. Statement \"return val;\" is covered.\n27. Loop for max value : always executed. Statement \"for(int i=0; i<max; ++i) {\" is covered.\n28. Function call : always executed. Statement \"int res = die(i, max);\" is covered.\n29. If condition : executed only if the value of res is less than min.\n   > if the condition is not satisfied, the if block is not executed. Statement \"if(res < min) {\" is not covered.\n   > if the condition is satisfied, the if block is executed. Statements \"min = res;\" and \"num = i;\" are covered.\n30. Program output : always executed. Statement \"System.out.println(num + \" \" + min);\" is covered.\n31. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.Scanner;\n> public class Main {\n>     int d[];\n>     boolean used[];\n>     int g[][];\n>     final int INF = 1 << 28;\n>     int die(int s, int n){\n>         used = new boolean[n];\n>         d = new int[n];\n>         for(int j=0; j<n; ++j){\n>             d[j] = INF;\n>         }\n>         d[s] = 0;\n>         while(true){\n>             int u = -1;\n>             for(int v=0; v<n; ++v){\n>                 if(!used[v] && (u==-1 || d[v] < d[u])){\n>                     u = v;\n>                 }\n>             }\n>             if(u==-1){\n>                 break;\n>             }\n>             used[u] = true;\n>             for(int v=0; v<n; ++v){\n>                 if(d[v] > d[u] + g[u][v]){\n>                     d[v] = d[u] + g[u][v];\n>                 }\n>             }\n>         }\n>         int val = 0;\n>         for(int i=0; i<n; ++i){\n>             val += d[i];\n>         }\n>         return val;\n>     }\n>     void io(){\n>         java.util.Scanner sc = new Scanner(System.in);\n>         while(true){\n>             int max = 0;    \n>             g = new int[10][10];\n>             for(int i=0; i<10; ++i){\n>                 for(int j=0; j<10; ++j){\n>                     g[i][j] = i==j ? 0 : INF;\n>                 }\n>             }\n>             final int n = sc.nextInt();\n>             for(int i=0; i<n; ++i){\n>                 final int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n>                 g[a][b] = c;\n>                 g[b][a] = c;\n>                 if(max < a+1){\n>                     max = a+1;\n>                 }\n>                 if(max < b+1){\n>                     max = b+1;\n>                 }\n>             }\n>             int min = INF;\n>             int num = -1;\n>             for(int i=0; i<max; ++i){\n>                 int res = die(i, max);\n>                 if(res < min){\n>                     min = res;\n>                     num = i;\n>                 }\n>             }\n>             System.out.println(num + \" \" + min);\n>         }\n>     }\n>     public static void main(String[] args) {\n>         new Main().io();\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n1\n0 1 5\n1 2 3\n2 0 2\n3",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n2\n0 1 5\n1 2 3",
        "Test Case Input:\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. io method declaration : always executed. Statement \"void io() {\" is covered. \n5. Scanner Object Creation : always executed. Statement \"java.util.Scanner sc = new Scanner(System.in);\" is covered. \n6. while loop : always executed. Statement \"while(true) {\" is covered. \n7. max initialization : always executed. Statement \"int max = 0;\" is covered. \n8. g array initialization : always executed. Statements \"g = new int[10][10];\", \"for(int i=0; i<10; ++i) {\", \"for(int j=0; j<10; ++j) {\", \"g[i][j] = i==j ? 0 : INF;\" are covered. \n9. n input : always executed. Statement \"final int n = sc.nextInt();\" is covered. \n10. for loop : since n = 3, the for loop will be executed 3 times. Statement \"for(int i=0; i<n; ++i) {\" is covered. \n11. a, b, c input : always executed. Statements \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\", \"final int c = sc.nextInt();\" are covered. \n12. g array assignment : always executed. Statements \"g[a][b] = c;\", \"g[b][a] = c;\" are covered. \n13. max calculation : always executed. Statements \"if(max < a+1) {\", \"max = a+1;\", \"if(max < b+1) {\", \"max = b+1;\" are covered. \n14. min and num initialization : always executed. Statements \"int min = INF;\", \"int num = -1;\" are covered. \n15. for loop : since max = 3, the for loop will be executed 3 times. Statement \"for(int i=0; i<max; ++i) {\" is covered. \n16. res calculation : always executed. Statement \"int res = die(i, max);\" is covered. \n17. min and num update : always executed. Statements \"if(res < min) {\", \"min = res;\", \"num = i;\" are covered. \n18. Output : always executed. Statement \"System.out.println(num + \" \" + min);\" is covered. \n19. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.Scanner;\n> public class Main {\n> \tint d[];\n> \tboolean used[];\n> \tint g[][];\n> \tfinal int INF = 1 << 28;\n> \tint die(int s, int n){\n> \t\tused = new boolean[n];\n> \t\td = new int[n];\n> \t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n> \t\td[s] = 0;\n> \t\twhile(true){\n> \t\t\tint u = -1;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n> \t\t\t\t\tu = v;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tif(u==-1){ break; }\n> \t\t\tused[u] = true;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(d[v] > d[u] + g[u][v]){\n> \t\t\t\t\td[v] = d[u] + g[u][v];\n> \t\t\t\t}\n> \t\t\t}\n> \t\t}\n> \t\tint val = 0;\n> \t\tfor(int i=0; i<n; ++i){\n> \t\t\tval += d[i];\n> \t\t}\n> \t\treturn val;\n> \t}\n> \tvoid io(){\n> \t\tjava.util.Scanner sc = new Scanner(System.in);\n> \t\twhile(true){\n> \t\t\tint max = 0;\t\n> \t\t\tg = new int[10][10];\n> \t\t\tfor(int i=0; i<10; ++i){\n> \t\t\t\tfor(int j=0; j<10; ++j){\n> \t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tfinal int n = sc.nextInt();\n> \t\t\tfor(int i=0; i<n; ++i){\n> \t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n> \t\t\t\tg[a][b] = c;\n> \t\t\t\tg[b][a] = c;\n> \t\t\t\tif(max < a+1){\n> \t\t\t\t\tmax = a+1;\n> \t\t\t\t}\n> \t\t\t\tif(max < b+1){\n> \t\t\t\t\tmax = b+1;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tint min = INF;\n> \t\t\tint num = -1;\n> \t\t\tfor(int i=0; i<max; ++i){\n> \t\t\t\tint res = die(i, max);\n> \t\t\t\tif(res < min){\n> \t\t\t\t\tmin = res;\n> \t\t\t\t\tnum = i;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tSystem.out.println(num + \" \" + min);\n> \t\t}\n> \t}\n> \tpublic static void main(String[] args) {\n> \t\tnew Main().io();\n> \t}\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\nTest Case Input:",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. io() method Declaration : always executed. Statement \"void io() {\" is covered.\n5. Scanner object creation and while loop : always executed. Statements \"java.util.Scanner sc = new Scanner(System.in);\", \"while(true) {\" are covered.\n6. max variable declaration and initialization : always executed. Statement \"int max = 0;\" is covered.\n7. 2D array initialization : always executed. Statements \"g = new int[10][10];\", \"for(int i=0; i<10; ++i) {\", \"for(int j=0; j<10; ++j) {\", \"g[i][j] = i==j ? 0 : INF;\", \"}\" are covered.\n8. User Input and Program Output : always executed. Statement \"final int n = sc.nextInt();\" is covered.\n9. 2D array population : always executed. Statements \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\", \"final int c = sc.nextInt();\", \"g[a][b] = c;\", \"g[b][a] = c;\", \"if(max < a+1) {\", \"max = a+1;\", \"}\", \"if(max < b+1) {\", \"max = b+1;\", \"}\" are covered.\n10. min and num variable declaration and initialization : always executed. Statements \"int min = INF;\", \"int num = -1;\" are covered.\n11. for loop execution : always executed. Statement \"for(int i=0; i<max; ++i) {\" is covered.\n12. function call within for loop : always executed. Statement \"int res = die(i, max);\" is covered.\n13. die() method Declaration and Execution : method declaration is always executed. \"int die(int s, int n) {\" is covered. The while loop within the die() method might not be executed if the condition \"u==-1\" is satisfied in the first iteration itself.\n14. used and d array initialization : always executed. Statements \"used = new boolean[n];\", \"d = new int[n];\" are covered.\n15. for loop execution : always executed. Statement \"for(int j=0; j<n; ++j) {\" is covered.\n16. d array population : always executed. Statement \"d[j] = INF;\" is covered.\n17. d[s] assignment : always executed. Statement \"d[s] = 0;\" is covered.\n18. while loop execution : The while loop will be executed until the condition \"u==-1\" is satisfied. The condition is based on the user input values.\n19. for loop execution : always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered.\n20. if condition : always executed. Statement \"if(!used[v] && (u==-1 || d[v] < d[u])) {\" is covered.\n21. if condition body : always executed. Statement \"u = v;\" is covered.\n22. if condition : always executed. Statement \"if(u==-1) {\" is covered.\n23. used[u] assignment : always executed. Statement \"used[u] = true;\" is covered.\n24. for loop execution : always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered.\n25. if condition : always executed. Statement \"if(d[v] > d[u] + g[u][v]) {\" is covered.\n26. if condition body : always executed. Statement \"d[v] = d[u] + g[u][v];\" is covered.\n27. die() method return statement : always executed. Statement \"return val;\" is covered.\n28. for loop body : always executed. Statement \"int res = die(i, max);\" is covered.\n29. if condition : always executed. Statement \"if(res < min) {\" is covered.\n30. if condition body : always executed. Statements \"min = res;\", \"num = i;\" are covered.\n31. Program Output : always executed. Statement \"System.out.println(num + \" \" + min);\" is covered.\n32. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.util.Scanner;\n> public class Main {\n> \tint d[];\n> \tboolean used[];\n> \tint g[][];\n> \tfinal int INF = 1 << 28;\n> \n> \tint die(int s, int n) {\n> \t\tused = new boolean[n];\n> \t\td = new int[n];\n> \t\tfor(int j=0; j<n; ++j) {\n> \t\t\td[j] = INF;\n> \t\t}\n> \t\td[s] = 0;\n> \t\twhile(true) {\n> \t\t\tint u = -1;\n> \t\t\tfor(int v=0; v<n; ++v) {\n> \t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])) {\n> \t\t\t\t\tu = v;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tif(u==-1) {\n> \t\t\t\tbreak;\n> \t\t\t}\n> \t\t\tused[u] = true;\n> \t\t\tfor(int v=0; v<n; ++v) {\n> \t\t\t\tif(d[v] > d[u] + g[u][v]) {\n> \t\t\t\t\td[v] = d[u] + g[u][v];\n> \t\t\t\t}\n> \t\t\t}\n> \t\t}\n> \t\tint val = 0;\n> \t\tfor(int i=0; i<n; ++i) {\n> \t\t\tval += d[i];\n> \t\t}\n> \t\treturn val;\n> \t}\n> \n> \tvoid io() {\n> \t\tjava.util.Scanner sc = new Scanner(System.in);\n> \t\twhile(true) {\n> \t\t\tint max = 0;\n> \t\t\tg = new int[10][10];\n> \t\t\tfor(int i=0; i<10; ++i) {\n> \t\t\t\tfor(int j=0; j<10; ++j) {\n> \t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tfinal int n = sc.nextInt();\n> \t\t\tfor(int i=0; i<n; ++i) {\n> \t\t\t\tfinal int a = sc.nextInt();\n> \t\t\t\tfinal int b = sc.nextInt();\n> \t\t\t\tfinal int c = sc.nextInt();\n> \t\t\t\tg[a][b] = c;\n> \t\t\t\tg[b][a] = c;\n> \t\t\t\tif(max < a+1) {\n> \t\t\t\t\tmax = a+1;\n> \t\t\t\t}\n> \t\t\t\tif(max < b+1) {\n> \t\t\t\t\tmax = b+1;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tint min = INF;\n> \t\t\tint num = -1;\n> \t\t\tfor(int i=0; i<max; ++i) {\n> \t\t\t\tint res = die(i, max);\n> \t\t\t\tif(res < min) {\n> \t\t\t\t\tmin = res;\n> \t\t\t\t\tnum = i;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tSystem.out.println(num + \" \" + min);\n> \t\t}\n> \t}\n> \n> \tpublic static void main(String[] args) {\n> \t\tnew Main().io();\n> \t}\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-2\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-\n0 1 5\n1 2 3\n2 0 2\n3 0 2\n\nTest Case Input:\nnull\n0 1 5\n1 2 3\n2 0 2\n3 0 2\n\nTest Case Input:\n7\n0 1 -5\n1 2 3\n2 0 2\n3 0 2\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n3 0 -2\n\nTest Case Input:\n2\n0 1 5\n1 2 3\n2 0 2\n3 0 2\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n3 0 2\n\nTest Case Input:\n4\n0 1 2\n1 2 3\n2 3 4\n3 0 5\n\nTest Case Input:\n2\n0 1 5\n1 2 3\n\nTest Case Input:\na\n0 1 5\n1 2 3\n2 0 2\n3 0 2\n\nTest Case Input:\nnull\n0 1 5\n1 2 3\n2 0 2\n3 0 2\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n3 0 2\n\nTest Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered. \n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n\n3. Main Class Variables Declaration : always executed. Statements \"int d[];\", \"boolean used[];\", \"int g[][];\", \"final int INF = 1 << 28;\", \"void io(){\", \"java.util.Scanner sc = new Scanner(System.in);\", \"int max = 0;\", \"int min = INF;\", \"int num = -1;\" are covered. \n\n4. die() method Declaration and Execution : method declaration is always executed. \"int die(int s, int n) {\" is covered. \n\n5. die() method Variable Declaration : always executed. Statements \"used = new boolean[n];\", \"d = new int[n];\" are covered. \n\n6. die() method For loop Execution : Since u = -1 initially, the for loop condition \"(u==-1 || d[v] < d[u])\" is true, and the loop block will be executed. Statement \"for(int v=0; v<n; ++v) {\" will be covered. \n\n7. die() method If condition : Since u = -1 initially, the if condition \"!used[v] && (u==-1 || d[v] < d[u])\" is true. Statement \"if(!used[v] && (u==-1 || d[v] < d[u])) {\" will be covered. \n\n8. die() method If condition block : always executed. Statements \"u = v;\", \"used[u] = true;\" are covered. \n\n9. die() method Inner For loop Execution : Since u = -1 initially, the inner for loop condition \"(d[v] > d[u] + g[u][v])\" is true, and the loop block will be executed. Statement \"for(int v=0; v<n; ++v) {\" will be covered. \n\n10. die() method Inner For loop Contents : always executed. Statements \"if(d[v] > d[u] + g[u][v]) {\", \"d[v] = d[u] + g[u][v];\" are covered. \n\n11. die() method Outer For loop Execution : Since u = -1 initially, the outer for loop condition \"(u==-1)\" is true, and the loop block will be executed. Statement \"for(int i=0; i<n; ++i) {\" will be covered. \n\n12. die() method Outer For loop Contents : always executed. Statements \"val += d[i];\" are covered. \n\n13. die() method return statement : always executed. Statement \"return val;\" is covered. \n\n14. io() method Declaration and Execution : method declaration is always executed. \"void io() {\" is covered. \n\n15. io() method Variable Declaration : always executed. Statements \"java.util.Scanner sc = new Scanner(System.in);\", \"int max = 0;\", \"int min = INF;\", \"int num = -1;\" are covered. \n\n16. io() method Infinite While loop Execution : always executed. Statement \"while(true) {\" is covered. \n\n17. io() method Nested For loop Execution : always executed. Statements \"for(int i=0; i<10; ++i) {\" and \"for(int j=0; j<10; ++j) {\" are covered. \n\n18. io() method Nested For loop Contents : always executed. Statements \"g[i][j] = i==j ? 0 : INF;\" are covered. \n\n19. io() method User Input and Program Output : always executed. Statements \"final int n = sc.nextInt();\", \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\", \"final int c = sc.nextInt();\" are covered. \n\n20. io() method If condition : always executed. Statements \"g[a][b] = c;\", \"g[b][a] = c;\" are covered. \n\n21. io() method If condition block : always executed. Statements \"if(max < a+1) {\", \"max = a+1;\", \"if(max < b+1) {\", \"max = b+1;\" are covered. \n\n22. io() method Inner For loop Execution : always executed. Statement \"for(int i=0; i<max; ++i) {\" is covered. \n\n23. io() method Inner For loop Contents : always executed. Statements \"int res = die(i, max);\", \"if(res < min) {\", \"min = res;\", \"num = i;\" are covered. \n\n24. io() method Program Output : always executed. Statement \"System.out.println(num + \" \" + min);\" is covered. \n\n25. Main method Declaration and Execution : always executed. Statement \"public static void main(String[] args) {\" is covered. \n\n26. Main method Object Creation and Method Call : always executed. Statement \"new Main().io();\" is covered. \n\n27. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.Scanner;\n> public class Main {\n> \tint d[];\n> \tboolean used[];\n> \tint g[][];\n> \tfinal int INF = 1 << 28;\n> \tint die(int s, int n){\n> \t\tused = new boolean[n];\n> \t\td = new int[n];\n> \t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n> \t\td[s] = 0;\n> \t\twhile(true){\n> \t\t\tint u = -1;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n> \t\t\t\t\tu = v;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tif(u==-1){ break; }\n> \t\t\tused[u] = true;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(d[v] > d[u] + g[u][v]){\n> \t\t\t\t\td[v] = d[u] + g[u][v];\n> \t\t\t\t}\n> \t\t\t}\n> \t\t}\n> \t\tint val = 0;\n> \t\tfor(int i=0; i<n; ++i){\n> \t\t\tval += d[i];\n> \t\t}\n> \t\treturn val;\n> \t}\n> \tvoid io(){\n> \t\tjava.util.Scanner sc = new Scanner(System.in);\n> \t\twhile(true){\n> \t\t\tint max = 0;\t\n> \t\t\tg = new int[10][10];\n> \t\t\tfor(int i=0; i<10; ++i){\n> \t\t\t\tfor(int j=0; j<10; ++j){\n> \t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tfinal int n = sc.nextInt();\n> \t\t\tfor(int i=0; i<n; ++i){\n> \t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n> \t\t\t\tg[a][b] = c;\n> \t\t\t\tg[b][a] = c;\n> \t\t\t\tif(max < a+1){\n> \t\t\t\t\tmax = a+1;\n> \t\t\t\t}\n> \t\t\t\tif(max < b+1){\n> \t\t\t\t\tmax = b+1;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tint min = INF;\n> \t\t\tint num = -1;\n> \t\t\tfor(int i=0; i<max; ++i){\n> \t\t\t\tint res = die(i, max);\n> \t\t\t\tif(res < min){\n> \t\t\t\t\tmin = res;\n> \t\t\t\t\tnum = i;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tSystem.out.println(num + \" \" + min);\n> \t\t}\n> \t}\n> \tpublic static void main(String[] args) {\n> \t\tnew Main().io();\n> \t}\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\n1\n1 2 3",
        "Test Case Input:\n1\na b c\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n0\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\n4\n0 1 2\n1 2 3\n2 3 4\n3 0 5\n\nTest Case Input:\n2\n0 1 5\n1 2 3\n\nTest Case Input:\na\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and tets case-\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. io method declaration within Main class : always executed. Statement \"void io() {\" is covered.\n5. Variable Declarations : always executed. Statements \"java.util.Scanner sc = new Scanner(System.in);\", \"int max = 0;\", \"g = new int[10][10];\", \"int min = INF;\", \"int num = -1;\" are covered. \n6. while loop Execution : The while loop condition is always true, so the loop block will be executed indefinitely. Statement \"while(true) {\" is covered. \n7. User Input and Program Output : always executed. Statements \"final int n = sc.nextInt();\", \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\", \"final int c = sc.nextInt();\" are covered. \n8. For loop Execution : The for loop iterates n times, so the loop block will be executed n times. Statement \"for(int i=0; i<n; ++i) {\" is covered. \n9. For loop contents : always executed. Statements \"g[a][b] = c;\", \"g[b][a] = c;\", \"if(max < a+1) {\", \"max = a+1;\", \"if(max < b+1) {\", \"max = b+1;\" are covered. \n10. Function call within io method : The function die will be called n times. \n11. die method Declaration and Execution : method declaration is always executed. \"int die(int s, int n) {\" is covered. The while loop block will be executed at least once. Statement \"while(true) {\" is covered. The if condition 'if(u==-1)' is satisfied when all nodes are used. Statement \"if(u==-1) { break; }\" is covered. The for loop iterates n times, so the loop block will be executed n times. Statement \"for(int v=0; v<n; ++v) {\" is covered. The if condition 'if(d[v] > d[u] + g[u][v])' is satisfied when the current node provides a shorter path to the destination node. Statement \"if(d[v] > d[u] + g[u][v]) {\" is covered. \n12. Statements after for loop in io method : The for loop iterates max times, so the loop block will be executed max times. Statement \"for(int i=0; i<max; ++i) {\" is covered. The if condition 'if(res < min)' is satisfied when the current node provides a shorter path. Statement \"if(res < min) {\" is covered. System.out.println statement is always executed. Statement \"System.out.println(num + \" \" + min);\" is covered. \n13. Statements after while loop in io method : no statements after the while loop will be executed since the while loop runs indefinitely. \n14. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.Scanner;\n> public class Main {\n> \tint d[];\n> \tboolean used[];\n> \tint g[][];\n> \tfinal int INF = 1 << 28;\n> \tint die(int s, int n){\n> \t\tused = new boolean[n];\n> \t\td = new int[n];\n> \t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n> \t\td[s] = 0;\n> \t\twhile(true){\n> \t\t\tint u = -1;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n> \t\t\t\t\tu = v;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tif(u==-1){ break; }\n> \t\t\tused[u] = true;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(d[v] > d[u] + g[u][v]){\n> \t\t\t\t\td[v] = d[u] + g[u][v];\n> \t\t\t\t}\n> \t\t\t}\n> \t\t}\n> \t\tint val = 0;\n> \t\tfor(int i=0; i<n; ++i){\n> \t\t\tval += d[i];\n> \t\t}\n> \t\treturn val;\n> \t}\n> \tvoid io(){\n> \t\tjava.util.Scanner sc = new Scanner(System.in);\n> \t\twhile(true){\n> \t\t\tint max = 0;\t\n> \t\t\tg = new int[10][10];\n> \t\t\tfor(int i=0; i<10; ++i){\n> \t\t\t\tfor(int j=0; j<10; ++j){\n> \t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tfinal int n = sc.nextInt();\n> \t\t\tfor(int i=0; i<n; ++i){\n> \t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n> \t\t\t\tg[a][b] = c;\n> \t\t\t\tg[b][a] = c;\n> \t\t\t\tif(max < a+1){\n> \t\t\t\t\tmax = a+1;\n> \t\t\t\t}\n> \t\t\t\tif(max < b+1){\n> \t\t\t\t\tmax = b+1;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tint min = INF;\n> \t\t\tint num = -1;\n> \t\t\tfor(int i=0; i<max; ++i){\n> \t\t\t\tint res = die(i, max);\n> \t\t\t\tif(res < min){\n> \t\t\t\t\tmin = res;\n> \t\t\t\t\tnum = i;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tSystem.out.println(num + \" \" + min);\n> \t\t}\n> \t}\n> \tpublic static void main(String[] args) {\n> \t\tnew Main().io();\n> \t}\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\nTest Case Input: \n3\n0 1 5\n1 2 3\n2 0 2\nTest Case Input:",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n0",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n0\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. io method Declaration and Execution: method declaration is always executed. \"void io() {\" is covered. The method is executed in the main method, so statement \"new Main().io();\" is covered.\n\n5. Scanner object creation and while loop condition: always executed. Statement \"java.util.Scanner sc = new Scanner(System.in);\" and \"while(true) {\" are covered.\n\n6. Variable declarations and initializations: always executed. Statements \"int max = 0;\", \"g = new int[10][10];\", and \"final int n = sc.nextInt();\" are covered.\n\n7. Nested for loop initialization and condition: always executed. Statements \"for(int i=0; i<10; ++i) {\" and \"for(int j=0; j<10; ++j) {\" are covered.\n\n8. Nested for loop contents: user input statements are always executed. Statements \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\", and \"final int c = sc.nextInt();\" are covered.\n\n9. If condition: always executed. Statements \"if(max < a+1) {\" and \"if(max < b+1) {\" are covered.\n\n10. Array assignment: always executed. Statements \"g[a][b] = c;\" and \"g[b][a] = c;\" are covered.\n\n11. Function call within the for loop: The function die will be called for each iteration of the for loop. Statement \"int res = die(i, max);\" is covered.\n\n12. die method Declaration and Execution: method declaration is always executed. \"int die(int s, int n) {\" is covered. The method is executed in the for loop, so the for loop will iterate n times and the method will be called n times.\n\n13. die method contents: the while loop condition is always executed. Statement \"while(true) {\" is covered.\n\n14. while loop contents: the for loop condition is always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered.\n\n15. for loop contents: the if condition is always executed. Statement \"if(!used[v] && (u==-1 || d[v] < d[u])) {\" is covered.\n\n16. if condition contents: the assignment statement is always executed. Statement \"u = v;\" is covered.\n\n17. for loop contents: the if condition is always executed. Statement \"if(d[v] > d[u] + g[u][v]) {\" is covered.\n\n18. if condition contents: the assignment statement is always executed. Statement \"d[v] = d[u] + g[u][v];\" is covered.\n\n19. while loop contents: the assignment statement is always executed. Statement \"used[u] = true;\" is covered.\n\n20. while loop contents: the for loop contents are always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered.\n\n21. for loop contents: the if condition is always executed. Statement \"if(d[v] > d[u] + g[u][v]) {\" is covered.\n\n22. for loop contents: the if condition contents are always executed. Statement \"d[v] = d[u] + g[u][v];\" is covered.\n\n23. while loop condition: the break statement is executed when the condition is false. Statement \"if(u==-1) { break; }\" is covered.\n\n24. die method contents: the for loop contents are always executed. Statement \"for(int i=0; i<n; ++i) {\" is covered.\n\n25. for loop contents: the assignment statement is always executed. Statement \"val += d[i];\" is covered.\n\n26. die method contents: the return statement is always executed. Statement \"return val;\" is covered.\n\n27. io method contents: the if condition is always executed. Statement \"if(res < min) {\" is covered.\n\n28. io method contents: the assignment statement is always executed. Statement \"min = res;\" is covered.\n\n29. io method contents: the assignment statement is always executed. Statement \"num = i;\" is covered.\n\n30. io method contents: the System.out.println statement is always executed. Statement \"System.out.println(num + \" \" + min);\" is covered.\n\n31. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.Scanner;\n> public class Main {\n> \tint d[];\n> \tboolean used[];\n> \tint g[][];\n> \tfinal int INF = 1 << 28;\n> \tint die(int s, int n){\n> \t\tused = new boolean[n];\n> \t\td = new int[n];\n> \t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n> \t\td[s] = 0;\n> \t\twhile(true){\n> \t\t\tint u = -1;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n> \t\t\t\t\tu = v;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tif(u==-1){ break; }\n> \t\t\tused[u] = true;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(d[v] > d[u] + g[u][v]){\n> \t\t\t\t\td[v] = d[u] + g[u][v];\n> \t\t\t\t}\n> \t\t\t}\n> \t\t}\n> \t\tint val = 0;\n> \t\tfor(int i=0; i<n; ++i){\n> \t\t\tval += d[i];\n> \t\t}\n> \t\treturn val;\n> \t}\n> \tvoid io(){\n> \t\tjava.util.Scanner sc = new Scanner(System.in);\n> \t\twhile(true){\n> \t\t\tint max = 0;\t\n> \t\t\tg = new int[10][10];\n> \t\t\tfor(int i=0; i<10; ++i){\n> \t\t\t\tfor(int j=0; j<10; ++j){\n> \t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tfinal int n = sc.nextInt();\n> \t\t\tfor(int i=0; i<n; ++i){\n> \t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n> \t\t\t\tg[a][b] = c;\n> \t\t\t\tg[b][a] = c;\n> \t\t\t\tif(max < a+1){\n> \t\t\t\t\tmax = a+1;\n> \t\t\t\t}\n> \t\t\t\tif(max < b+1){\n> \t\t\t\t\tmax = b+1;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tint min = INF;\n> \t\t\tint num = -1;\n> \t\t\tfor(int i=0; i<max; ++i){\n> \t\t\t\tint res = die(i, max);\n> \t\t\t\tif(res < min){\n> \t\t\t\t\tmin = res;\n> \t\t\t\t\tnum = i;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tSystem.out.println(num + \" \" + min);\n> \t\t}\n> \t}\n> \tpublic static void main(String[] args) {\n> \t\tnew Main().io();\n> \t}\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1\na 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n0\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n0\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n1\na 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. io method declaration and execution: io method is called inside the main method, so it will be executed. Statement \"new Main().io();\" is covered.\n\n5. Scanner object creation: Scanner object is created inside the io method, so it will be executed. Statement \"java.util.Scanner sc = new Scanner(System.in);\" is covered.\n\n6. While loop: The while loop will keep executing until the condition is false. Since the condition is true, the loop block will be executed. Statement \"while(true) {\" is covered.\n\n7. Integer variables initialization: Integer variables \"max\" and \"min\" are initialized. Statement \"int max = 0;\" and \"int min = INF;\" are covered.\n\n8. 2D array initialization: Two-dimensional array \"g\" is initialized. All elements of the array are set to 0 except for the diagonal elements which are set to INF. Statement \"g = new int[10][10];\" and the nested for loop are covered.\n\n9. Input reading: The value of \"n\" is read from the user. Statement \"final int n = sc.nextInt();\" is covered.\n\n10. For loop execution: The for loop will execute \"n\" number of times. Since the value of \"n\" is 1, the loop block will be executed once. Statement \"for(int i=0; i<n; ++i) {\" is covered.\n\n11. Integer variables initialization: Integer variables \"a\", \"b\", and \"c\" are initialized. Statement \"final int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\" is covered.\n\n12. Value assignment to 2D array: The value of \"c\" is assigned to the elements at indices \"a\" and \"b\" in the 2D array \"g\". Statement \"g[a][b] = c; g[b][a] = c;\" is covered.\n\n13. Max value update: The value of \"max\" is updated if \"a+1\" or \"b+1\" is greater than the current value of \"max\". Statement \"if(max < a+1) { max = a+1; } if(max < b+1) { max = b+1; }\" is covered.\n\n14. Function call: The die method is called. Statement \"int res = die(i, max);\" is covered.\n\n15. die method declaration and execution: The die method is called inside the for loop, so it will be executed. Statement \"int die(int s, int n) {\" is covered. The while loop inside the die method will also be executed.\n\n16. used array initialization: The used array is initialized with default boolean values. Statement \"used = new boolean[n];\" is covered.\n\n17. d array initialization: The d array is initialized with INF values. Statement \"d = new int[n]; for(int j=0; j<n; ++j) { d[j] = INF; }\" is covered.\n\n18. d array value update: The value of d[s] is updated to 0. Statement \"d[s] = 0;\" is covered.\n\n19. while loop execution: The while loop will keep executing until the condition is false. Since the condition is true, the loop block will be executed. Statement \"while(true) {\" is covered.\n\n20. u value update: The value of \"u\" is updated based on a condition inside the for loop. Statement \"if(!used[v] && (u==-1 || d[v] < d[u])) { u = v; }\" is covered.\n\n21. if condition check: The if condition is checked inside the for loop. Statement \"if(u==-1) { break; }\" is covered.\n\n22. used array value update: The value at index \"u\" in the used array is updated to true. Statement \"used[u] = true;\" is covered.\n\n23. d array value update: The value of d[v] is updated inside the for loop. Statement \"if(d[v] > d[u] + g[u][v]) { d[v] = d[u] + g[u][v]; }\" is covered.\n\n24. val variable update: The value of \"val\" is updated inside the for loop. Statement \"val += d[i];\" is covered.\n\n25. die method return statement: The value of \"val\" is returned from the die method. Statement \"return val;\" is covered.\n\n26. min value update: The value of \"min\" is updated if \"res\" is less than the current value of \"min\". Statement \"if(res < min) { min = res; num = i; }\" is covered.\n\n27. Output printing: The values of \"num\" and \"min\" are printed. Statement \"System.out.println(num + \" \" + min);\" is covered.\n\n28. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.util.Scanner;\n> public class Main {\n>     int d[];\n>     boolean used[];\n>     int g[][];\n>     final int INF = 1 << 28;\n>     int die(int s, int n){\n>         used = new boolean[n];\n>         d = new int[n];\n>         for(int j=0; j<n; ++j){ d[j] = INF; }\n>         d[s] = 0;\n>         while(true){\n>             int u = -1;\n>             for(int v=0; v<n; ++v){\n>                 if(!used[v] && (u==-1 || d[v] < d[u])){\n>                     u = v;\n>                 }\n>             }\n>             if(u==-1){ break; }\n>             used[u] = true;\n>             for(int v=0; v<n; ++v){\n>                 if(d[v] > d[u] + g[u][v]){\n>                     d[v] = d[u] + g[u][v];\n>                 }\n>             }\n>         }\n>         int val = 0;\n>         for(int i=0; i<n; ++i){\n>             val += d[i];\n>         }\n>         return val;\n>     }\n>     void io(){\n>         java.util.Scanner sc = new Scanner(System.in);\n>         while(true){\n>             int max = 0;\n>             g = new int[10][10];\n>             for(int i=0; i<10; ++i){\n>                 for(int j=0; j<10; ++j){\n>                     g[i][j] = i==j ? 0 : INF;\n>                 }\n>             }\n>             final int n = sc.nextInt();\n>             for(int i=0; i<n; ++i){\n>                 final int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n>                 g[a][b] = c;\n>                 g[b][a] = c;\n>                 if(max < a+1){\n>                     max = a+1;\n>                 }\n>                 if(max < b+1){\n>                     max = b+1;\n>                 }\n>             }\n>             int min = INF;\n>             int num = -1;\n>             for(int i=0; i<max; ++i){\n>                 int res = die(i, max);\n>                 if(res < min){\n>                     min = res;\n>                     num = i;\n>                 }\n>             }\n>             System.out.println(num + \" \" + min);\n>         }\n>     }\n>     public static void main(String[] args) {\n>         new Main().io();\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n2\n0 1\n1 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n0\n\nTest Case Input:\n2\n0 1 5\n1 2 3\n\nTest Case Input:\n3\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\na\n0 1 5\n1 2 3\n2 0 2\n\nTest Case Input:\n1\na 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "The plan for step by step execution of the given code snippet is as follows:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n\n2. Main class declaration: The main class declaration is always executed. Statement \"public class Main {\" is covered.\n\n3. die method declaration and execution: The die method is called in the io method. The die method declaration is always executed. Statement \"int die(int s, int n) {\" is covered. The execution of the die method depends on the value of u in the while loop.\n\n4. io method declaration and execution: The io method is called in the main method. The io method declaration is always executed. Statement \"void io() {\" is covered. The execution of the io method depends on the user input.\n\n5. while loop in the io method: The while loop in the io method is executed until the condition \"true\" is met. The while loop condition is always covered. Statement \"while(true) {\" is covered.\n\n6. Scanner object creation and input reading: The Scanner object is created and user input is read in the io method. Statement \"java.util.Scanner sc = new Scanner(System.in);\" is covered. The execution of the while loop depends on the user input.\n\n7. max variable initialization: The max variable in the io method is initialized to 0. Statement \"int max = 0;\" is covered.\n\n8. 2D array initialization: The 2D array \"g\" is initialized with values depending on the user input. The 2D array initialization is always executed. Statements \"g = new int[10][10];\", \"for(int i=0; i<10; ++i) {\" and \"for(int j=0; j<10; ++j) {\" are covered.\n\n9. for loop for user input reading: The for loop in the io method is executed \"n\" number of times depending on the user input. The for loop condition is always covered. Statement \"for(int i=0; i<n; ++i) {\" is covered. The execution of the for loop depends on the user input.\n\n10. User input reading: User input is read in the for loop in the io method. Statements \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\" and \"final int c = sc.nextInt();\" are covered.\n\n11. Value assignment in the 2D array: Values are assigned to the 2D array \"g\" depending on the user input. Statements \"g[a][b] = c;\" and \"g[b][a] = c;\" are covered.\n\n12. max variable update: The max variable in the io method is updated based on the user input. Statements \"if(max < a+1) {\" and \"if(max < b+1) {\" are covered.\n\n13. min and num variables initialization: The min and num variables in the io method are initialized to INF and -1 respectively. Statements \"int min = INF;\" and \"int num = -1;\" are covered.\n\n14. for loop for calling die method: The for loop in the io method is executed \"max\" number of times. The for loop condition is always covered. Statement \"for(int i=0; i<max; ++i) {\" is covered. The execution of the for loop depends on the value of \"max\".\n\n15. Call to die method: The die method is called in the for loop in the io method. Statement \"int res = die(i, max);\" is covered. The execution of the die method depends on the value of \"u\" in the while loop.\n\n16. Comparison and assignment in the for loop: Comparison and assignment operations are performed in the for loop in the io method. Statements \"if(res < min) {\" and \"num = i;\" are covered.\n\n17. Output printing: The output is printed in the io method. Statement \"System.out.println(num + \" \" + min);\" is covered.\n\n18. Closing Brackets: Closing brackets at the end of the code are always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.util.Scanner;\n> public class Main {\n>     int d[];\n>     boolean used[];\n>     int g[][];\n>     final int INF = 1 << 28;\n>     \n>     int die(int s, int n){\n>         used = new boolean[n];\n>         d = new int[n];\n>         for(int j=0; j<n; ++j){ d[j] = INF; }\n>         d[s] = 0;\n>         while(true){\n>             int u = -1;\n>             for(int v=0; v<n; ++v){\n>                 if(!used[v] && (u==-1 || d[v] < d[u])){\n>                     u = v;\n>                 }\n>             }\n>             if(u==-1){ break; }\n>             used[u] = true;\n>             for(int v=0; v<n; ++v){\n>                 if(d[v] > d[u] + g[u][v]){\n>                     d[v] = d[u] + g[u][v];\n>                 }\n>             }\n>         }\n>         int val = 0;\n>         for(int i=0; i<n; ++i){\n>             val += d[i];\n>         }\n>         return val;\n>     }\n>     \n>     void io(){\n>         java.util.Scanner sc = new Scanner(System.in);\n>         while(true){\n>             int max = 0;    \n>             g = new int[10][10];\n>             for(int i=0; i<10; ++i){\n>                 for(int j=0; j<10; ++j){\n>                     g[i][j] = i==j ? 0 : INF;\n>                 }\n>             }\n>             final int n = sc.nextInt();\n>             for(int i=0; i<n; ++i){\n>                 final int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n>                 g[a][b] = c;\n>                 g[b][a] = c;\n>                 if(max < a+1){\n>                     max = a+1;\n>                 }\n>                 if(max < b+1){\n>                     max = b+1;\n>                 }\n>             }\n>             int min = INF;\n>             int num = -1;\n>             for(int i=0; i<max; ++i){\n>                 int res = die(i, max);\n>                 if(res < min){\n>                     min = res;\n>                     num = i;\n>                 }\n>             }\n>             System.out.println(num + \" \" + min);\n>         }\n>     }\n>     \n>     public static void main(String[] args) {\n>         new Main().io();\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n0 1 5\n1 2 3",
      "test_mutations": [
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\na b c\nd e f\ng h i",
        "Test Case Input:\n1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n2\n0 1 5\n1 2 3"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. d[] and used[] Declaration : always executed. Statement \"int d[];\" and \"boolean used[];\" are covered. \n4. g[][] Declaration : always executed. Statement \"int g[][];\" is covered. \n5. INF Declaration : always executed. Statement \"final int INF = 1 << 28;\" is covered. \n6. die() Method Declaration and Execution : method declaration is always executed. Statement \"int die(int s, int n) {\" is covered. \n7. used[] and d[] Initialization : always executed. Statements \"used = new boolean[n];\" and \"d = new int[n];\" are covered. \n8. d[] Initialization Loop : always executed. Statement \"for(int j=0; j<n; ++j){ d[j] = INF; }\" is covered. \n9. d[s] Initialization : always executed. Statement \"d[s] = 0;\" is covered. \n10. while Loop : always executed. Statement \"while(true) {\" is covered. \n11. u Assignment in for Loop : always executed. Statement \"int u = -1;\" is covered. \n12. for Loop condition : always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered. \n13. if condition in for Loop : always executed. Statement \"if(!used[v] && (u==-1 || d[v] < d[u])) {\" is covered. \n14. u Assignment in if condition : always executed. Statement \"u = v;\" is covered. \n15. if condition in while Loop : always executed. Statement \"if(u==-1) { break; }\" is covered. \n16. used[u] Assignment : always executed. Statement \"used[u] = true;\" is covered. \n17. for Loop in while Loop : always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered. \n18. if condition in for Loop in while Loop : always executed. Statement \"if(d[v] > d[u] + g[u][v]) {\" is covered. \n19. d[v] Assignment in if condition : always executed. Statement \"d[v] = d[u] + g[u][v];\" is covered. \n20. val Initialization : always executed. Statement \"int val = 0;\" is covered. \n21. for Loop : always executed. Statement \"for(int i=0; i<n; ++i) {\" is covered. \n22. val Increment in for Loop : always executed. Statement \"val += d[i];\" is covered. \n23. val Return : always executed. Statement \"return val;\" is covered. \n24. io() Method Declaration and Execution : method declaration is always executed. Statement \"void io() {\" is covered. \n25. Scanner Initialization : always executed. Statement \"java.util.Scanner sc = new Scanner(System.in);\" is covered. \n26. while Loop : always executed. Statement \"while(true) {\" is covered. \n27. max Initialization : always executed. Statement \"int max = 0;\" is covered. \n28. g[][] Initialization : always executed. Statement \"g = new int[10][10];\" is covered. \n29. for Loop : always executed. Statement \"for(int i=0; i<10; ++i) {\" is covered. \n30. for Loop : always executed. Statement \"for(int j=0; j<10; ++j) {\" is covered. \n31. g[i][j] Initialization : always executed. Statement \"g[i][j] = i==j ? 0 : INF;\" is covered. \n32. n Input : always executed. Statement \"final int n = sc.nextInt();\" is covered. \n33. for Loop : always executed. Statement \"for(int i=0; i<n; ++i) {\" is covered. \n34. a, b, c Input : always executed. Statements \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\", \"final int c = sc.nextInt();\" are covered. \n35. g[a][b] Assignment : always executed. Statement \"g[a][b] = c;\" is covered. \n36. g[b][a] Assignment : always executed. Statement \"g[b][a] = c;\" is covered. \n37. max Update : always executed. Statement \"if(max < a+1) {\" and \"if(max < b+1) {\" are covered. \n38. min Initialization : always executed. Statement \"int min = INF;\" is covered. \n39. num Initialization : always executed. Statement \"int num = -1;\" is covered. \n40. for Loop : always executed. Statement \"for(int i=0; i<max; ++i) {\" is covered. \n41. res Assignment in for Loop : always executed. Statement \"int res = die(i, max);\" is covered. \n42. if condition in for Loop : always executed. Statement \"if(res < min) {\" is covered. \n43. min Assignment in if condition : always executed. Statement \"min = res;\" is covered. \n44. num Assignment in if condition : always executed. Statement \"num = i;\" is covered. \n45. num and min Output : always executed. Statement \"System.out.println(num + \" \" + min);\" is covered. \n46. Main Method Declaration and Execution : always executed. Statement \"public static void main(String[] args) {\" is covered. \n47. io() Method call in Main method : always executed. Statement \"new Main().io();\" is covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.Scanner;\n> public class Main {\n> \tint d[];\n> \tboolean used[];\n> \tint g[][];\n> \tfinal int INF = 1 << 28;\n> \tint die(int s, int n){\n> \t\tused = new boolean[n];\n> \t\td = new int[n];\n> \t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n> \t\td[s] = 0;\n> \t\twhile(true){\n> \t\t\tint u = -1;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n> \t\t\t\t\tu = v;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tif(u==-1){ break; }\n> \t\t\tused[u] = true;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(d[v] > d[u] + g[u][v]){\n> \t\t\t\t\td[v] = d[u] + g[u][v];\n> \t\t\t\t}\n> \t\t\t}\n> \t\t}\n> \t\tint val = 0;\n> \t\tfor(int i=0; i<n; ++i){\n> \t\t\tval += d[i];\n> \t\t}\n> \t\treturn val;\n> \t}\n> \tvoid io(){\n> \t\tjava.util.Scanner sc = new Scanner(System.in);\n> \t\twhile(true){\n> \t\t\tint max = 0;\t\n> \t\t\tg = new int[10][10];\n> \t\t\tfor(int i=0; i<10; ++i){\n> \t\t\t\tfor(int j=0; j<10; ++j){\n> \t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tfinal int n = sc.nextInt();\n> \t\t\tfor(int i=0; i<n; ++i){\n> \t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n> \t\t\t\tg[a][b] = c;\n> \t\t\t\tg[b][a] = c;\n> \t\t\t\tif(max < a+1){\n> \t\t\t\t\tmax = a+1;\n> \t\t\t\t}\n> \t\t\t\tif(max < b+1){\n> \t\t\t\t\tmax = b+1;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tint min = INF;\n> \t\t\tint num = -1;\n> \t\t\tfor(int i=0; i<max; ++i){\n> \t\t\t\tint res = die(i, max);\n> \t\t\t\tif(res < min){\n> \t\t\t\t\tmin = res;\n> \t\t\t\t\tnum = i;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tSystem.out.println(num + \" \" + min);\n> \t\t}\n> \t}\n> \tpublic static void main(String[] args) {\n> \t\tnew Main().io();\n> \t}\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n4\n0 1 2\n1 2 3\n2 3 4\n3 0 5",
      "test_mutations": [
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\nTest Case Input:",
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n4\n0 1 2\n1 2 3\n2 3 4\n3 0 5"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "The plan for step by step execution of the given code snippet and test case is as follows:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. io method declaration and execution : always executed. Statement \"void io() {\" is covered.\n5. Scanner object creation : always executed. Statement \"java.util.Scanner sc = new Scanner(System.in);\" is covered.\n6. while loop condition : always executed. Statement \"while(true) {\" is covered.\n7. max initialization : always executed. Statement \"int max = 0;\" is covered.\n8. 2D array initialization : always executed. Statement \"g = new int[10][10];\" is covered.\n9. Nested for loop to initialize 2D array : always executed. Statements \"for(int i=0; i<10; ++i) {\" and \"for(int j=0; j<10; ++j) {\" are covered.\n10. g array element assignment : always executed. Statement \"g[i][j] = i==j ? 0 : INF;\" is covered.\n11. User Input for n : always executed. Statement \"final int n = sc.nextInt();\" is covered.\n12. For loop for n iterations : always executed. Statement \"for(int i=0; i<n; ++i) {\" is covered.\n13. User Input for a, b, c : user input statements are always executed. Statements \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\" and \"final int c = sc.nextInt();\" are covered.\n14. g array element assignment based on user input : always executed. Statements \"g[a][b] = c;\", \"g[b][a] = c;\" are covered.\n15. max calculation based on user input : always executed. Statements \"if(max < a+1) {\" and \"if(max < b+1) {\" are covered.\n16. min initialization : always executed. Statement \"int min = INF;\" is covered.\n17. num initialization : always executed. Statement \"int num = -1;\" is covered.\n18. For loop for max iterations : always executed. Statement \"for(int i=0; i<max; ++i) {\" is covered.\n19. die method call : always executed. Statement \"int res = die(i, max);\" is covered.\n20. die method execution : always executed. Statement \"int die(int s, int n) {\" is covered.\n21. used and d array initialization : always executed. Statements \"used = new boolean[n];\" and \"d = new int[n];\" are covered.\n22. For loop for n iterations : always executed. Statement \"for(int j=0; j<n; ++j) {\" is covered.\n23. d array initialization : always executed. Statement \"d[j] = INF;\" is covered.\n24. d[s] initialization : always executed. Statement \"d[s] = 0;\" is covered.\n25. while loop condition : always executed. Statement \"while(true) {\" is covered.\n26. for loop for n iterations : always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered.\n27. if condition for finding minimum distance : always executed. Statement \"if(!used[v] && (u==-1 || d[v] < d[u])) {\" is covered.\n28. if condition true block : always executed. Statement \"u = v;\" is covered.\n29. if condition false block : always executed. No statement covered.\n30. used array element assignment : always executed. Statement \"used[u] = true;\" is covered.\n31. for loop for n iterations : always executed. Statement \"for(int v=0; v<n; ++v) {\" is covered.\n32. if condition for updating minimum distance : always executed. Statement \"if(d[v] > d[u] + g[u][v]) {\" is covered.\n33. if condition true block : always executed. Statement \"d[v] = d[u] + g[u][v];\" is covered.\n34. if condition false block : always executed. No statement covered.\n35. for loop for n iterations : always executed. Statement \"for(int i=0; i<n; ++i) {\" is covered.\n36. val calculation : always executed. Statement \"val += d[i];\" is covered.\n37. val return : always executed. Statement \"return val;\" is covered.\n38. min comparison : always executed. Statement \"if(res < min) {\" is covered.\n39. min assignment : always executed. Statement \"min = res;\" is covered.\n40. num assignment : always executed. Statement \"num = i;\" is covered.\n41. System.out.println statement : always executed. Statement \"System.out.println(num + \" \" + min);\" is covered.\n42. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.Scanner;\n> public class Main {\n> \tint d[];\n> \tboolean used[];\n> \tint g[][];\n> \tfinal int INF = 1 << 28;\n> \tint die(int s, int n){\n> \t\tused = new boolean[n];\n> \t\td = new int[n];\n> \t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n> \t\td[s] = 0;\n> \t\twhile(true){\n> \t\t\tint u = -1;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n> \t\t\t\t\tu = v;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tif(u==-1){ break; }\n> \t\t\tused[u] = true;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(d[v] > d[u] + g[u][v]){\n> \t\t\t\t\td[v] = d[u] + g[u][v];\n> \t\t\t\t}\n> \t\t\t}\n> \t\t}\n> \t\tint val = 0;\n> \t\tfor(int i=0; i<n; ++i){\n> \t\t\tval += d[i];\n> \t\t}\n> \t\treturn val;\n> \t}\n> \tvoid io(){\n> \t\tjava.util.Scanner sc = new Scanner(System.in);\n> \t\twhile(true){\n> \t\t\tint max = 0;\n> \t\t\tg = new int[10][10];\n> \t\t\tfor(int i=0; i<10; ++i){\n> \t\t\t\tfor(int j=0; j<10; ++j){\n> \t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tfinal int n = sc.nextInt();\n> \t\t\tfor(int i=0; i<n; ++i){\n> \t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n> \t\t\t\tg[a][b] = c;\n> \t\t\t\tg[b][a] = c;\n> \t\t\t\tif(max < a+1){\n> \t\t\t\t\tmax = a+1;\n> \t\t\t\t}\n> \t\t\t\tif(max < b+1){\n> \t\t\t\t\tmax = b+1;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tint min = INF;\n> \t\t\tint num = -1;\n> \t\t\tfor(int i=0; i<max; ++i){\n> \t\t\t\tint res = die(i, max);\n> \t\t\t\tif(res < min){\n> \t\t\t\t\tmin = res;\n> \t\t\t\t\tnum = i;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tSystem.out.println(num + \" \" + min);\n> \t\t}\n> \t}\n> \tpublic static void main(String[] args) {\n> \t\tnew Main().io();\n> \t}\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\nTest Case Input:\n1\n0 1 5\n1 2 3\n2 0 2",
      "test_mutations": [
        "Test Case Input:\n-1\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n0\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\na\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\n3\n0 1 5\n1 2 3\n2 0 2",
        "Test Case Input:\nTest Case Input:\n1\n0 1 5\n1 2 3\n2 0 2"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered. \n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n\n3. die method declaration and execution: method declaration is always executed. \"int die(int s, int n) {\" is covered. \n\n4. Initialize variables used and d: always executed. \"used = new boolean[n];\" and \"d = new int[n];\" are covered. \n\n5. For loop inside die method : always executed. Statement \"for(int j=0; j<n; ++j){ d[j] = INF; }\" is covered. \n\n6. Initialize variable d[s]: always executed. \"d[s] = 0;\" is covered. \n\n7. While loop condition : always executed. \"while(true) {\" is covered. \n\n8. For loop inside while loop : always executed. Statement \"for(int v=0; v<n; ++v){\" is covered. \n\n9. if condition inside for loop: always executed. Statement \"if(!used[v] && (u==-1 || d[v] < d[u])){\" is covered. \n\n10. Update variable u : always executed. \"u = v;\" is covered. \n\n11. if condition after while loop : always executed. \"if(u==-1){ break; }\" is covered. \n\n12. Set used[u] to true : always executed. \"used[u] = true;\" is covered. \n\n13. For loop inside while loop : always executed. Statement \"for(int v=0; v<n; ++v){\" is covered. \n\n14. if condition inside for loop: always executed. Statement \"if(d[v] > d[u] + g[u][v]){\" is covered. \n\n15. Update variable d[v] : always executed. \"d[v] = d[u] + g[u][v];\" is covered. \n\n16. for loop after while loop : always executed. Statement \"for(int i=0; i<n; ++i){\" is covered. \n\n17. Update variable val : always executed. \"val += d[i];\" is covered. \n\n18. return val : always executed. \"return val;\" is covered. \n\n19. io method declaration and execution : method declaration is always executed. \"void io() {\" is covered. \n\n20. Create Scanner object and while loop : always executed. Statements \"java.util.Scanner sc = new Scanner(System.in);\", \"while(true) {\" is covered. \n\n21. Initialize variables max and g : always executed. \"int max = 0;\", \"g = new int[10][10];\" are covered. \n\n22. Nested for loop to initialize g : always executed. Statements \"for(int i=0; i<10; ++i) {\", \"for(int j=0; j<10; ++j) {\" are covered. \n\n23. if condition inside nested for loop : always executed. Statement \"g[i][j] = i==j ? 0 : INF;\" is covered. \n\n24. Read input value for n : always executed. \"final int n = sc.nextInt();\" is covered. \n\n25. For loop to read input values for a, b, c : always executed. Statement \"for(int i=0; i<n; ++i) {\" is covered. \n\n26. Read input values for a, b, c : always executed. Statements \"final int a = sc.nextInt();\", \"final int b = sc.nextInt();\", \"final int c = sc.nextInt();\" are covered. \n\n27. Update g matrix : always executed. Statements \"g[a][b] = c;\", \"g[b][a] = c;\" are covered. \n\n28. Update variable max : always executed. Statements \"if(max < a+1) {\", \"max = a+1;\", \"if(max < b+1) {\", \"max = b+1;\" are covered. \n\n29. Initialize variables min and num : always executed. Statements \"int min = INF;\", \"int num = -1;\" are covered. \n\n30. For loop to iterate through max : always executed. Statement \"for(int i=0; i<max; ++i) {\" is covered. \n\n31. Call die method : always executed. Statement \"int res = die(i, max);\" is covered. \n\n32. if condition inside for loop : always executed. Statement \"if(res < min) {\" is covered. \n\n33. Update variables min and num : always executed. Statements \"min = res;\", \"num = i;\" are covered. \n\n34. Print output : always executed. Statement \"System.out.println(num + \" \" + min);\" is covered. \n\n35. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n\n> import java.util.Scanner;\n> public class Main {\n> \tint d[];\n> \tboolean used[];\n> \tint g[][];\n> \tfinal int INF = 1 << 28;\n> \tint die(int s, int n){\n> \t\tused = new boolean[n];\n> \t\td = new int[n];\n> \t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n> \t\td[s] = 0;\n> \t\twhile(true){\n> \t\t\tint u = -1;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n> \t\t\t\t\tu = v;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tif(u==-1){ break; }\n> \t\t\tused[u] = true;\n> \t\t\tfor(int v=0; v<n; ++v){\n> \t\t\t\tif(d[v] > d[u] + g[u][v]){\n> \t\t\t\t\td[v] = d[u] + g[u][v];\n> \t\t\t\t}\n> \t\t\t}\n> \t\t}\n> \t\tint val = 0;\n> \t\tfor(int i=0; i<n; ++i){\n> \t\t\tval += d[i];\n> \t\t}\n> \t\treturn val;\n> \t}\n> \tvoid io(){\n> \t\tjava.util.Scanner sc = new Scanner(System.in);\n> \t\twhile(true){\n> \t\t\tint max = 0;\t\n> \t\t\tg = new int[10][10];\n> \t\t\tfor(int i=0; i<10; ++i){\n> \t\t\t\tfor(int j=0; j<10; ++j){\n> \t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tfinal int n = sc.nextInt();\n> \t\t\tfor(int i=0; i<n; ++i){\n> \t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n> \t\t\t\tg[a][b] = c;\n> \t\t\t\tg[b][a] = c;\n> \t\t\t\tif(max < a+1){\n> \t\t\t\t\tmax = a+1;\n> \t\t\t\t}\n> \t\t\t\tif(max < b+1){\n> \t\t\t\t\tmax = b+1;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tint min = INF;\n> \t\t\tint num = -1;\n> \t\t\tfor(int i=0; i<max; ++i){\n> \t\t\t\tint res = die(i, max);\n> \t\t\t\tif(res < min){\n> \t\t\t\t\tmin = res;\n> \t\t\t\t\tnum = i;\n> \t\t\t\t}\n> \t\t\t}\n> \t\t\tSystem.out.println(num + \" \" + min);\n> \t\t}\n> \t}\n> \tpublic static void main(String[] args) {\n> \t\tnew Main().io();\n> \t}\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}