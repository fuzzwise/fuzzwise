{
  "submission_id": "s304518563",
  "cycles": [
    {
      "test_case": "Test Case Input:\n3\n2\n-1\n2\n-3",
      "test_mutations": [
        "Test Case Input:\n5\n2\n1\n-2\n3\n0\n-4",
        "Test Case Input:\n5\n3\n1\n-2\n3\n-4\n0",
        "Test Case Input:\n5\n3\n1\n-2\n3\n-4\n5",
        "Test Case Input:\n5\n3\n-2\n4\n0\n-6\n3",
        "Test Case Input:\n5\n3\n-2\n4\n-6\n0\n1",
        "Test Case Input:\n5\n3\n-2\n4\n0\n-5\n3",
        "Test Case Input:\n5\n3\n-2\n4\n-6\n0\n8",
        "Test Case Input:\n5\n3\n1\n-2\n3\n-4\n0",
        "Test Case Input:\n5\n2\n-3\n-1\n2\n4\n1",
        "Test Case Input:\n3\n2\n-1\n2\n-3"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        final Scanner sc = new Scanner(System.in);\n        final int N = sc.nextInt();\n        final int K = sc.nextInt();\n        final List<Long> posiArray = new ArrayList<Long>();\n        final List<Long> negaArray = new ArrayList<Long>();\n        long input;\n        int count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            input = sc.nextInt();\n            if (input < 0)\n            {\n                negaArray.add(input);\n            } else if (input > 0)\n            {\n                posiArray.add(input);\n            } else\n            {\n                count++;\n            }\n        }\n        int posiIndex = 0;\n        int negaIndex = negaArray.size() - 1;\n        long distance = 0;\n        for (int i = 0; i < N; i++)\n        {\n            if (posiArray.size() == 0 && negaArray.size() == 0)\n            {\n                distance = 0;\n                break;\n            } else if (posiArray.size() == 0)\n            {\n                distance = -negaArray.get(K - 1);\n                break;\n            } else if (negaArray.size() == 0)\n            {\n                distance = posiArray.get(K - 1);\n                break;\n            } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n            {\n                posiIndex++;\n            } else\n            {\n                negaIndex--;\n            }\n            count++;\n            if (count == K)\n            {\n                final long posiDis = posiArray.get(posiIndex - 1);\n                final long negaDis = negaArray.get(negaIndex + 1);\n                if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n                {\n                    distance = 2 * posiDis - negaDis;\n                } else\n                {\n                    distance = posiDis - 2 * negaDis;\n                }\n                break;\n            }\n        }\n        System.out.println(distance);\n    }\n}",
      "covered_code": "1. Import statements : Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\", \"import java.util.Scanner;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"final Scanner sc = new Scanner(System.in);\", \"final int N = sc.nextInt();\", \"final int K = sc.nextInt();\" are covered. \n5. List Declaration : always executed. Statements \"final List<Long> posiArray = new ArrayList<Long>();\", \"final List<Long> negaArray = new ArrayList<Long>();\" are covered.\n6. Variables Declaration : always executed. Statements \"long input;\", \"int count = 0;\" are covered.\n7. For loop Execution : Since N is 3, the for loop condition (i < N) is true, and the loop block will be executed. Statement \"for (int i = 0; i < N; i++) {\" will be covered. \n8. For loop contents : user input statements are always executed. Statements \"input = sc.nextInt();\", \"if (input < 0)\", \"else if (input > 0)\" and \"else\" will be executed. \n9. List operations : Statements \"negaArray.add(input);\" and \"posiArray.add(input);\" will be executed if the if conditions are satisfied. \n10. Variables update : Statement \"count++;\" will be executed for every iteration. \n11. Variables update : The values of posiIndex and negaIndex will be updated based on the conditions in the for loop. \n12. If - Else conditions : The if-else conditions will be executed based on the sizes of posiArray and negaArray. \n13. If - Else conditions : The if-else conditions will be executed based on the conditions in the for loop. \n14. Variables update : Statement \"count++;\" will be executed for every iteration. \n15. If condition : The if condition will be executed if the count is equal to K. \n16. Variables update : The values of posiDis and negaDis will be updated based on the posiIndex and negaIndex. \n17. If condition : The if condition will be executed based on the values of posiDis and negaDis. \n18. Variables update : The value of distance will be updated based on the if condition. \n19. Program Output : Statement \"System.out.println(distance);\" will be executed. \n20. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> public class Main\n> {\n>     public static void main(String[] args)\n>     {\n>         final Scanner sc = new Scanner(System.in);\n>         final int N = sc.nextInt();\n>         final int K = sc.nextInt();\n>         final List<Long> posiArray = new ArrayList<Long>();\n>         final List<Long> negaArray = new ArrayList<Long>();\n>         long input;\n>         int count = 0;\n>         for (int i = 0; i < N; i++)\n>         {\n>             input = sc.nextInt();\n>             if (input < 0)\n>             {\n>                 negaArray.add(input);\n>             } else if (input > 0)\n>             {\n>                 posiArray.add(input);\n>             } else\n>             {\n>                 count++;\n>             }\n>         }\n>         int posiIndex = 0;\n>         int negaIndex = negaArray.size() - 1;\n>         long distance = 0;\n>         for (int i = 0; i < N; i++)\n>         {\n>             if (posiArray.size() == 0 && negaArray.size() == 0)\n>             {\n>                 distance = 0;\n>                 break;\n>             } else if (posiArray.size() == 0)\n>             {\n>                 distance = -negaArray.get(K - 1);\n>                 break;\n>             } else if (negaArray.size() == 0)\n>             {\n>                 distance = posiArray.get(K - 1);\n>                 break;\n>             } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n>             {\n>                 posiIndex++;\n>             } else\n>             {\n>                 negaIndex--;\n>             }\n>             count++;\n>             if (count == K)\n>             {\n>                 final long posiDis = posiArray.get(posiIndex - 1);\n>                 final long negaDis = negaArray.get(negaIndex + 1);\n>                 if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n>                 {\n>                     distance = 2 * posiDis - negaDis;\n>                 } else\n>                 {\n>                     distance = posiDis - 2 * negaDis;\n>                 }\n>                 break;\n>             }\n>         }\n>         System.out.println(distance);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\n2\n-1\n2\n-3",
      "test_mutations": [
        "Test Case Input:\n\"3\" \n\"2\"\n\"-1\"\n\"2\"\n\"-3\"",
        "Test Case Input:\n\"3\" (String data type)\n2\n-1\n2\n-3",
        "Test Case Input:\n5\n0\n-2\n4\n-3\n0",
        "Test Case Input:\n\"3.5\n2\n-1\n2\n-3\"",
        "Test Case Input:\n\"5\"\n\"3\"\n\"1\"\n\"2\"\n\"3\"\n\"4\"",
        "Test Case Input:\n\"3\" (string)\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3",
        "Test Case Input:\n\"3\" \n\"2\" \n\"-1\" \n\"2\" \n\"-3\"",
        "Test Case Input:\n\"5\"\n\"0\"\n\"2\"\n\"-3\"\n\"4\"\n\"0\"",
        "Test Case Input:\n3\n2\n-1\n2\n-3"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        final Scanner sc = new Scanner(System.in);\n        final int N = sc.nextInt();\n        final int K = sc.nextInt();\n        final List<Long> posiArray = new ArrayList<Long>();\n        final List<Long> negaArray = new ArrayList<Long>();\n        long input;\n        int count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            input = sc.nextInt();\n            if (input < 0)\n            {\n                negaArray.add(input);\n            } else if (input > 0)\n            {\n                posiArray.add(input);\n            } else\n            {\n                count++;\n            }\n        }\n        int posiIndex = 0;\n        int negaIndex = negaArray.size() - 1;\n        long distance = 0;\n        for (int i = 0; i < N; i++)\n        {\n            if (posiArray.size() == 0 && negaArray.size() == 0)\n            {\n                distance = 0;\n                break;\n            } else if (posiArray.size() == 0)\n            {\n                distance = -negaArray.get(K - 1);\n                break;\n            } else if (negaArray.size() == 0)\n            {\n                distance = posiArray.get(K - 1);\n                break;\n            } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n            {\n                posiIndex++;\n            } else\n            {\n                negaIndex--;\n            }\n            count++;\n            if (count == K)\n            {\n                final long posiDis = posiArray.get(posiIndex - 1);\n                final long negaDis = negaArray.get(negaIndex + 1);\n                if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n                {\n                    distance = 2 * posiDis - negaDis;\n                } else\n                {\n                    distance = posiDis - 2 * negaDis;\n                }\n                break;\n            }\n        }\n        System.out.println(distance);\n    }\n}",
      "covered_code": "PLAN for step by step execution of the above Java program with the given test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\", and \"import java.util.Scanner;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"final Scanner sc = new Scanner(System.in);\", \"final int N = sc.nextInt();\", and \"final int K = sc.nextInt();\" are covered.\n5. List Declarations : always executed. Statements \"final List<Long> posiArray = new ArrayList<Long>();\" and \"final List<Long> negaArray = new ArrayList<Long>();\" are covered.\n6. Variables Declarations : always executed. Statements \"long input;\", \"int count = 0;\", \"int posiIndex = 0;\", \"int negaIndex = negaArray.size() - 1;\", and \"long distance = 0;\" are covered.\n7. For loop Execution : Since N is 3, the for loop condition (i < N) is true, and the loop block will be executed. Statement \"for (int i = 0; i < N; i++) {\" will be covered.\n8. For loop contents : user input statements are always executed. Statement \"input = sc.nextInt();\" will be executed.\n9. If - Else if - Else conditions : Since the input value is not 0, none of the if conditions are satisfied. Statements \"input < 0\", \"input > 0\", and \"input == 0\" are not covered. The else condition is satisfied, so statement \"count++;\" is covered.\n10. Variable Updates : always executed. Statements \"posiIndex++;\", and \"negaIndex--;\" are covered.\n11. Count Check : since count is not equal to K, the if condition is not satisfied. Statement \"count == K\" is not covered.\n12. Second For loop Execution : Since N is 3, the for loop condition (i < N) is true, and the loop block will be executed. Statement \"for (int i = 0; i < N; i++) {\" will be covered.\n13. If - Else if - Else if - Else conditions : Since posiArray and negaArray are empty, none of the if conditions are satisfied. Statements \"posiArray.size() == 0 && negaArray.size() == 0\", \"posiArray.size() == 0\", and \"negaArray.size() == 0\" are not covered. The else condition is satisfied, so statement \"negaIndex--;\" is covered.\n14. Count Check : since count is not equal to K, the if condition is not satisfied. Statement \"count == K\" is not covered.\n15. Variable Updates : always executed. Statement \"count++;\" is covered.\n16. Count Check : since count is not equal to K, the if condition is not satisfied. Statement \"count == K\" is not covered.\n17. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> public class Main\n> {\n>     public static void main(String[] args)\n>     {\n>         final Scanner sc = new Scanner(System.in);\n>         final int N = sc.nextInt();\n>         final int K = sc.nextInt();\n>         final List<Long> posiArray = new ArrayList<Long>();\n>         final List<Long> negaArray = new ArrayList<Long>();\n>         long input;\n>         int count = 0;\n>         for (int i = 0; i < N; i++)\n>         {\n>             input = sc.nextInt();\n>             if (input < 0)\n>             {\n>                 negaArray.add(input);\n>             } else if (input > 0)\n>             {\n>                 posiArray.add(input);\n>             } else\n>             {\n>                 count++;\n>             }\n>         }\n>         int posiIndex = 0;\n>         int negaIndex = negaArray.size() - 1;\n>         long distance = 0;\n>         for (int i = 0; i < N; i++)\n>         {\n>             if (posiArray.size() == 0 && negaArray.size() == 0)\n>             {\n>                 distance = 0;\n>                 break;\n>             } else if (posiArray.size() == 0)\n>             {\n>                 distance = -negaArray.get(K - 1);\n>                 break;\n>             } else if (negaArray.size() == 0)\n>             {\n>                 distance = posiArray.get(K - 1);\n>                 break;\n>             } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n>             {\n>                 posiIndex++;\n>             } else\n>             {\n>                 negaIndex--;\n>             }\n>             count++;\n>             if (count == K)\n>             {\n>                 final long posiDis = posiArray.get(posiIndex - 1);\n>                 final long negaDis = negaArray.get(negaIndex + 1);\n>                 if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n>                 {\n>                     distance = 2 * posiDis - negaDis;\n>                 } else\n>                 {\n>                     distance = posiDis - 2 * negaDis;\n>                 }\n>                 break;\n>             }\n>         }\n>         System.out.println(distance);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0",
      "test_mutations": [
        "Test Case Input:\n\"3\" (string)\n\"2\" (string)\n\"-1\" (string)\n\"2\" (string)\n\"-3\" (string)",
        "Test Case Input:\n3\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n1",
        "Test Case Input:\n3\n2\n-1\n2\n-3",
        "Test Case Input:\n\"a\"\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3",
        "Test Case Input:\n\"3\" (string)\n\"2\" (string)\n\"-1\" (string)\n\"2\" (string)\n\"-3\" (string)",
        "Test Case Input:\n2\n-2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        final Scanner sc = new Scanner(System.in);\n        final int N = sc.nextInt();\n        final int K = sc.nextInt();\n        final List<Long> posiArray = new ArrayList<Long>();\n        final List<Long> negaArray = new ArrayList<Long>();\n        long input;\n        int count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            input = sc.nextInt();\n            if (input < 0)\n            {\n                negaArray.add(input);\n            } else if (input > 0)\n            {\n                posiArray.add(input);\n            } else\n            {\n                count++;\n            }\n        }\n        int posiIndex = 0;\n        int negaIndex = negaArray.size() - 1;\n        long distance = 0;\n        for (int i = 0; i < N; i++)\n        {\n            if (posiArray.size() == 0 && negaArray.size() == 0)\n            {\n                distance = 0;\n                break;\n            } else if (posiArray.size() == 0)\n            {\n                distance = -negaArray.get(K - 1);\n                break;\n            } else if (negaArray.size() == 0)\n            {\n                distance = posiArray.get(K - 1);\n                break;\n            } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n            {\n                posiIndex++;\n            } else\n            {\n                negaIndex--;\n            }\n            count++;\n            if (count == K)\n            {\n                final long posiDis = posiArray.get(posiIndex - 1);\n                final long negaDis = negaArray.get(negaIndex + 1);\n                if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n                {\n                    distance = 2 * posiDis - negaDis;\n                } else\n                {\n                    distance = posiDis - 2 * negaDis;\n                }\n                break;\n            }\n        }\n        System.out.println(distance);\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and tets case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\", and \"import java.util.Scanner;\" will be covered.\n2. NumberDivision Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"final Scanner sc = new Scanner(System.in);\", \"final int N = sc.nextInt();\", and \"final int K = sc.nextInt();\" are covered.\n5. List Declaration and Initialization : always executed. Statements \"final List<Long> posiArray = new ArrayList<Long>();\", and \"final List<Long> negaArray = new ArrayList<Long>();\" are covered.\n6. For loop Execution : Since N is 3, the for loop condition (i < N) is true, and the loop block will be executed. Statement \"for (int i = 0; i < N; i++) {\" will be covered.\n7. For loop contents : user input statements are always executed. Statement \"input = sc.nextInt();\" will be executed.\n8. if-else conditions : since the input value is 2, the else if condition \"else if (input > 0)\" is true and the corresponding block will be executed. Statements \"posiArray.add(input);\", and \"count++;\" will be covered.\n9. for loop execution : since i=0, the loop still runs. The if-else block will be executed. Since posiArray and negaArray both are empty, the first if condition \"if (posiArray.size() == 0 && negaArray.size() == 0)\" is true and the corresponding block will be executed. Statement \"distance = 0;\" will be covered and the loop will break.\n10. Final output statement : always executed. Statement \"System.out.println(distance);\" is covered.\n11. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> public class Main\n> {\n>     public static void main(String[] args)\n>     {\n>         final Scanner sc = new Scanner(System.in);\n>         final int N = sc.nextInt();\n>         final int K = sc.nextInt();\n>         final List<Long> posiArray = new ArrayList<Long>();\n>         final List<Long> negaArray = new ArrayList<Long>();\n>         long input;\n>         int count = 0;\n>         for (int i = 0; i < N; i++)\n>         {\n>             input = sc.nextInt();\n>             if (input < 0)\n>             {\n>                 negaArray.add(input);\n>             } else if (input > 0)\n>             {\n>                 posiArray.add(input);\n>             } else\n>             {\n>                 count++;\n>             }\n>         }\n>         int posiIndex = 0;\n>         int negaIndex = negaArray.size() - 1;\n>         long distance = 0;\n>         for (int i = 0; i < N; i++)\n>         {\n>             if (posiArray.size() == 0 && negaArray.size() == 0)\n>             {\n>                 distance = 0;\n>                 break;\n>             } else if (posiArray.size() == 0)\n>             {\n>                 distance = -negaArray.get(K - 1);\n>                 break;\n>             } else if (negaArray.size() == 0)\n>             {\n>                 distance = posiArray.get(K - 1);\n>                 break;\n>             } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n>             {\n>                 posiIndex++;\n>             } else\n>             {\n>                 negaIndex--;\n>             }\n>             count++;\n>             if (count == K)\n>             {\n>                 final long posiDis = posiArray.get(posiIndex - 1);\n>                 final long negaDis = negaArray.get(negaIndex + 1);\n>                 if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n>                 {\n>                     distance = 2 * posiDis - negaDis;\n>                 } else\n>                 {\n>                     distance = posiDis - 2 * negaDis;\n>                 }\n>                 break;\n>             }\n>         }\n>         System.out.println(distance);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0\n0\n0",
      "test_mutations": [
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0\nnull",
        "Test Case Input:\n5\n-1\n2\n-3\n4\n-5",
        "Test Case Input:\n0\n2\n-1\n2\n-3\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n1",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0\n-1\n2",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0",
        "Test Case Input:\n-3\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0\n0\n0"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        final Scanner sc = new Scanner(System.in);\n        final int N = sc.nextInt();\n        final int K = sc.nextInt();\n        final List<Long> posiArray = new ArrayList<Long>();\n        final List<Long> negaArray = new ArrayList<Long>();\n        long input;\n        int count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            input = sc.nextInt();\n            if (input < 0)\n            {\n                negaArray.add(input);\n            } else if (input > 0)\n            {\n                posiArray.add(input);\n            } else\n            {\n                count++;\n            }\n        }\n        int posiIndex = 0;\n        int negaIndex = negaArray.size() - 1;\n        long distance = 0;\n        for (int i = 0; i < N; i++)\n        {\n            if (posiArray.size() == 0 && negaArray.size() == 0)\n            {\n                distance = 0;\n                break;\n            } else if (posiArray.size() == 0)\n            {\n                distance = -negaArray.get(K - 1);\n                break;\n            } else if (negaArray.size() == 0)\n            {\n                distance = posiArray.get(K - 1);\n                break;\n            } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n            {\n                posiIndex++;\n            } else\n            {\n                negaIndex--;\n            }\n            count++;\n            if (count == K)\n            {\n                final long posiDis = posiArray.get(posiIndex - 1);\n                final long negaDis = negaArray.get(negaIndex + 1);\n                if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n                {\n                    distance = 2 * posiDis - negaDis;\n                } else\n                {\n                    distance = posiDis - 2 * negaDis;\n                }\n                break;\n            }\n        }\n        System.out.println(distance);\n    }\n}",
      "covered_code": "PLAN:\n1. Import statements : Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\" and \"import java.util.Scanner;\" will be covered.\n2. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n3. User Input and Program Output : always executed. Statements \"final Scanner sc = new Scanner(System.in);\", \"final int N = sc.nextInt();\", \"final int K = sc.nextInt();\" are covered.\n4. List Declarations: always executed. Statements \"final List<Long> posiArray = new ArrayList<Long>();\" and \"final List<Long> negaArray = new ArrayList<Long>();\" are covered.\n5. For loop Execution : Since N is 3, the for loop condition (i < N) is true, and the loop block will be executed. Statement \"for (int i = 0; i < N; i++) {\" will be covered.\n6. For loop contents : user input statements are always executed. Statement \"input = sc.nextInt();\" will be executed.\n7. If - Else if - Else condition : Since input is positive, the else if condition 'input > 0' is true. Statement \"posiArray.add(input);\" is covered.\n8. Increment count : always executed. Statement \"count++;\" is covered.\n9. increment posiIndex or negaIndex : always executed. Statement \"posiIndex++;\" is covered.\n10. Increment count : always executed. Statement \"count++;\" is covered.\n11. If - Else if - Else condition : Since count is not equal to K, none of the conditions are true, so the else condition is executed. Statement \"negaIndex--;\" is covered.\n12. Increment count : always executed. Statement \"count++;\" is covered.\n13. If condition : Since count is equal to K, the if condition is true. Statement \"final long posiDis = posiArray.get(posiIndex - 1);\" is covered.\n14. If condition : Since count is equal to K, the if condition is true. Statement \"final long negaDis = negaArray.get(negaIndex + 1);\" is covered.\n15. If - Else condition : Since the condition \"posiDis - 2 * negaDis > 2 * posiDis - negaDis\" is false, the else condition is executed. Statement \"distance = posiDis - 2 * negaDis;\" is covered.\n16. Break statement : always executed. Statement \"break;\" is covered.\n17. Final output : always executed. Statement \"System.out.println(distance);\" is covered.\n18. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> public class Main {\n>     public static void main(String[] args) {\n>         final Scanner sc = new Scanner(System.in);\n>         final int N = sc.nextInt();\n>         final int K = sc.nextInt();\n>         final List<Long> posiArray = new ArrayList<Long>();\n>         final List<Long> negaArray = new ArrayList<Long>();\n>         long input;\n>         int count = 0;\n>         for (int i = 0; i < N; i++) {\n>             input = sc.nextInt();\n>             if (input < 0) {\n>                 negaArray.add(input);\n>             } else if (input > 0) {\n>                 posiArray.add(input);\n>             } else {\n>                 count++;\n>             }\n>         }\n>         int posiIndex = 0;\n>         int negaIndex = negaArray.size() - 1;\n>         long distance = 0;\n>         for (int i = 0; i < N; i++) {\n>             if (posiArray.size() == 0 && negaArray.size() == 0) {\n>                 distance = 0;\n>                 break;\n>             } else if (posiArray.size() == 0) {\n>                 distance = -negaArray.get(K - 1);\n>                 break;\n>             } else if (negaArray.size() == 0) {\n>                 distance = posiArray.get(K - 1);\n>                 break;\n>             } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex)) {\n>                 posiIndex++;\n>             } else {\n>                 negaIndex--;\n>             }\n>             count++;\n>             if (count == K) {\n>                 final long posiDis = posiArray.get(posiIndex - 1);\n>                 final long negaDis = negaArray.get(negaIndex + 1);\n>                 if (posiDis - 2 * negaDis > 2 * posiDis - negaDis) {\n>                     distance = 2 * posiDis - negaDis;\n>                 } else {\n>                     distance = posiDis - 2 * negaDis;\n>                 }\n>                 break;\n>             }\n>         }\n>         System.out.println(distance);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\n2\n-1\n2\n-3",
      "test_mutations": [
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0\n0\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0\n0\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0\n0\n0\n0",
        "Test Case Input:\n3\n2\n-1\n\"2\"\n-3"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        final Scanner sc = new Scanner(System.in);\n        final int N = sc.nextInt();\n        final int K = sc.nextInt();\n        final List<Long> posiArray = new ArrayList<Long>();\n        final List<Long> negaArray = new ArrayList<Long>();\n        long input;\n        int count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            input = sc.nextInt();\n            if (input < 0)\n            {\n                negaArray.add(input);\n            } else if (input > 0)\n            {\n                posiArray.add(input);\n            } else\n            {\n                count++;\n            }\n        }\n        int posiIndex = 0;\n        int negaIndex = negaArray.size() - 1;\n        long distance = 0;\n        for (int i = 0; i < N; i++)\n        {\n            if (posiArray.size() == 0 && negaArray.size() == 0)\n            {\n                distance = 0;\n                break;\n            } else if (posiArray.size() == 0)\n            {\n                distance = -negaArray.get(K - 1);\n                break;\n            } else if (negaArray.size() == 0)\n            {\n                distance = posiArray.get(K - 1);\n                break;\n            } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n            {\n                posiIndex++;\n            } else\n            {\n                negaIndex--;\n            }\n            count++;\n            if (count == K)\n            {\n                final long posiDis = posiArray.get(posiIndex - 1);\n                final long negaDis = negaArray.get(negaIndex + 1);\n                if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n                {\n                    distance = 2 * posiDis - negaDis;\n                } else\n                {\n                    distance = posiDis - 2 * negaDis;\n                }\n                break;\n            }\n        }\n        System.out.println(distance);\n    }\n}",
      "covered_code": "The step-by-step plan for the given code snippet is as follows:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\" and \"import java.util.Scanner;\" will be covered.\n2. Main class declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output: always executed. Statements \"final Scanner sc = new Scanner(System.in);\", \"final int N = sc.nextInt();\", \"final int K = sc.nextInt();\" are covered.\n5. List Declarations: always executed. Statements \"final List<Long> posiArray = new ArrayList<Long>();\" and \"final List<Long> negaArray = new ArrayList<Long>();\" are covered.\n6. Variable Declarations: always executed. Statements \"long input;\", \"int count = 0;\" are covered.\n7. For loop execution: Since N=3, the for loop condition (i < N) is true, and the loop block will be executed. Statement \"for (int i = 0; i < N; i++) {\" will be covered.\n8. Input and Array Manipulation: user input statements are always executed. Statements \"input = sc.nextInt();\", \"if (input < 0) {\", \"negaArray.add(input);\" are covered. If condition is not true, so statements inside else-if and else are not covered.\n9. Variable Manipulation: always executed. Statement \"count++;\" is covered.\n10. Second For loop: Since N=3, the for loop condition (i < N) is true, and the loop block will be executed. Statement \"for (int i = 0; i < N; i++) {\" will be covered.\n11. If-else conditions: Since the size of posiArray and negaArray is not zero, the first else-if condition and else condition are not executed. The if condition is true, so the statements inside the if block will be covered. Statements \"posiIndex++;\", \"count++;\" are covered.\n12. Final if condition: Since count=3, the if condition \"if (count == K)\" is true. The statements inside the if block will be covered. Statements \"final long posiDis = posiArray.get(posiIndex - 1);\", \"final long negaDis = negaArray.get(negaIndex + 1);\" are covered. The if-else condition is true, so the statement \"distance = posiDis - 2 * negaDis;\" is covered.\n13. Program Output: always executed. Statement \"System.out.println(distance);\" is covered.\n14. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and the given step-by-step reasoning for execution is:\n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n>\n> public class Main {\n>     public static void main(String[] args) {\n>         final Scanner sc = new Scanner(System.in);\n>         final int N = sc.nextInt();\n>         final int K = sc.nextInt();\n>         final List<Long> posiArray = new ArrayList<Long>();\n>         final List<Long> negaArray = new ArrayList<Long>();\n>         long input;\n>         int count = 0;\n>         for (int i = 0; i < N; i++) {\n>             input = sc.nextInt();\n>             if (input < 0) {\n>                 negaArray.add(input);\n>             } else if (input > 0) {\n>                 posiArray.add(input);\n>             } else {\n>                 count++;\n>             }\n>         }\n>         int posiIndex = 0;\n>         int negaIndex = negaArray.size() - 1;\n>         long distance = 0;\n>         for (int i = 0; i < N; i++) {\n>             if (posiArray.size() == 0 && negaArray.size() == 0) {\n>                 distance = 0;\n>                 break;\n>             } else if (posiArray.size() == 0) {\n>                 distance = -negaArray.get(K - 1);\n>                 break;\n>             } else if (negaArray.size() == 0) {\n>                 distance = posiArray.get(K - 1);\n>                 break;\n>             } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex)) {\n>                 posiIndex++;\n>             } else {\n>                 negaIndex--;\n>             }\n>             count++;\n>             if (count == K) {\n>                 final long posiDis = posiArray.get(posiIndex - 1);\n>                 final long negaDis = negaArray.get(negaIndex + 1);\n>                 if (posiDis - 2 * negaDis > 2 * posiDis - negaDis) {\n>                     distance = 2 * posiDis - negaDis;\n>                 } else {\n>                     distance = posiDis - 2 * negaDis;\n>                 }\n>                 break;\n>             }\n>         }\n>         System.out.println(distance);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-3\n2\n-1\n2\n-3",
      "test_mutations": [
        "Test Case Input:\n-1\n2\n-1\n2\n-3",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-3\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0\n0",
        "Test Case Input:\n-3\n2\n-1\n2\n-3",
        "Test Case Input:\n-3\n2\n-1\n2\n-3"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        final Scanner sc = new Scanner(System.in);\n        final int N = sc.nextInt();\n        final int K = sc.nextInt();\n        final List<Long> posiArray = new ArrayList<Long>();\n        final List<Long> negaArray = new ArrayList<Long>();\n        long input;\n        int count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            input = sc.nextInt();\n            if (input < 0)\n            {\n                negaArray.add(input);\n            } else if (input > 0)\n            {\n                posiArray.add(input);\n            } else\n            {\n                count++;\n            }\n        }\n        int posiIndex = 0;\n        int negaIndex = negaArray.size() - 1;\n        long distance = 0;\n        for (int i = 0; i < N; i++)\n        {\n            if (posiArray.size() == 0 && negaArray.size() == 0)\n            {\n                distance = 0;\n                break;\n            } else if (posiArray.size() == 0)\n            {\n                distance = -negaArray.get(K - 1);\n                break;\n            } else if (negaArray.size() == 0)\n            {\n                distance = posiArray.get(K - 1);\n                break;\n            } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n            {\n                posiIndex++;\n            } else\n            {\n                negaIndex--;\n            }\n            count++;\n            if (count == K)\n            {\n                final long posiDis = posiArray.get(posiIndex - 1);\n                final long negaDis = negaArray.get(negaIndex + 1);\n                if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n                {\n                    distance = 2 * posiDis - negaDis;\n                } else\n                {\n                    distance = posiDis - 2 * negaDis;\n                }\n                break;\n            }\n        }\n        System.out.println(distance);\n    }\n}",
      "covered_code": "PLAN:\n1. Import statements: Import statements are always executed. Statements \"import java.util.ArrayList;\", \"import java.util.List;\", and \"import java.util.Scanner;\" will be covered.\n2. Main Class Declaration: Always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: Always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output: Always executed. Statements \"final Scanner sc = new Scanner(System.in);\", \"final int N = sc.nextInt();\", and \"final int K = sc.nextInt();\" are covered.\n5. List Initialization: Always executed. Statements \"final List<Long> posiArray = new ArrayList<Long>();\" and \"final List<Long> negaArray = new ArrayList<Long>();\" are covered.\n6. For loop Execution: Since N is -3, the for loop condition (i < N) is false, and the loop block will not be executed. Statement \"for (int i = 0; i < N; i++) {\" is not covered.\n7. If-Else conditions: Since the for loop is not executed, the if-else conditions inside the loop will not be executed. None of the if-else statements are covered.\n8. Variable Initialization: Statements \"int posiIndex = 0;\", \"int negaIndex = negaArray.size() - 1;\", and \"long distance = 0;\" are covered.\n9. Second For loop Execution: Since the for loop condition (i < N) is false, the loop block will not be executed. Statement \"for (int i = 0; i < N; i++) {\" is not covered.\n10. If-Else conditions: Since the for loop is not executed, none of the if-else conditions inside the loop will be executed. None of the if-else statements are covered.\n11. Variable Assignment: Since the for loop is not executed, the variables \"distance\" and \"count\" will not be assigned any values. Statements \"distance = 0;\" and \"count++;\" are not covered.\n12. Final Output: Statement \"System.out.println(distance);\" will not be executed since the for loop is not executed. Not covered.\n13. Closing Brackets: Always covered.\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> public class Main\n> {\n>     public static void main(String[] args)\n>     {\n>         final Scanner sc = new Scanner(System.in);\n>         final int N = sc.nextInt();\n>         final int K = sc.nextInt();\n>         final List<Long> posiArray = new ArrayList<Long>();\n>         final List<Long> negaArray = new ArrayList<Long>();\n>         long input;\n>         int count = 0;\n!         for (int i = 0; i < N; i++)\n>         {\n>             input = sc.nextInt();\n!             if (input < 0)\n>             {\n>                 negaArray.add(input);\n>             } else if (input > 0)\n>             {\n>                 posiArray.add(input);\n>             } else\n>             {\n>                 count++;\n>             }\n>         }\n>         int posiIndex = 0;\n>         int negaIndex = negaArray.size() - 1;\n>         long distance = 0;\n!         for (int i = 0; i < N; i++)\n>         {\n>             if (posiArray.size() == 0 && negaArray.size() == 0)\n>             {\n>                 distance = 0;\n>                 break;\n>             } else if (posiArray.size() == 0)\n>             {\n>                 distance = -negaArray.get(K - 1);\n>                 break;\n>             } else if (negaArray.size() == 0)\n>             {\n>                 distance = posiArray.get(K - 1);\n>                 break;\n>             } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n>             {\n>                 posiIndex++;\n>             } else\n>             {\n>                 negaIndex--;\n>             }\n>             count++;\n!             if (count == K)\n>             {\n>                 final long posiDis = posiArray.get(posiIndex - 1);\n>                 final long negaDis = negaArray.get(negaIndex + 1);\n>                 if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n>                 {\n>                     distance = 2 * posiDis - negaDis;\n>                 } else\n>                 {\n>                     distance = posiDis - 2 * negaDis;\n>                 }\n>                 break;\n>             }\n>         }\n!         System.out.println(distance);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0",
      "test_mutations": [
        "Test Case Input:\nnull\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3",
        "Test Case Input:\na\n2\n-1\n2\n-3",
        "Test Case Input:\n\"3\n2\n-1\n2\n-3\"",
        "Test Case Input:\n\"abc\"\n2\n-1\n2\n-3",
        "Test Case Input:\na\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3\n0",
        "Test Case Input:\n3\n2\n-1\n2\n-3",
        "Test Case Input:\n0\n0"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        final Scanner sc = new Scanner(System.in);\n        final int N = sc.nextInt();\n        final int K = sc.nextInt();\n        final List<Long> posiArray = new ArrayList<Long>();\n        final List<Long> negaArray = new ArrayList<Long>();\n        long input;\n        int count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            input = sc.nextInt();\n            if (input < 0)\n            {\n                negaArray.add(input);\n            } else if (input > 0)\n            {\n                posiArray.add(input);\n            } else\n            {\n                count++;\n            }\n        }\n        int posiIndex = 0;\n        int negaIndex = negaArray.size() - 1;\n        long distance = 0;\n        for (int i = 0; i < N; i++)\n        {\n            if (posiArray.size() == 0 && negaArray.size() == 0)\n            {\n                distance = 0;\n                break;\n            } else if (posiArray.size() == 0)\n            {\n                distance = -negaArray.get(K - 1);\n                break;\n            } else if (negaArray.size() == 0)\n            {\n                distance = posiArray.get(K - 1);\n                break;\n            } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n            {\n                posiIndex++;\n            } else\n            {\n                negaIndex--;\n            }\n            count++;\n            if (count == K)\n            {\n                final long posiDis = posiArray.get(posiIndex - 1);\n                final long negaDis = negaArray.get(negaIndex + 1);\n                if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n                {\n                    distance = 2 * posiDis - negaDis;\n                } else\n                {\n                    distance = posiDis - 2 * negaDis;\n                }\n                break;\n            }\n        }\n        System.out.println(distance);\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and tets case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\", \"import java.util.Scanner;\" will be covered. \n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. User Input and Program Output : always executed. Statements \"final Scanner sc = new Scanner(System.in);\", \"final int N = sc.nextInt();\", \"final int K = sc.nextInt();\" are covered. \n\n5. ArrayList and Variables Declaration : always executed. Statements \"final List<Long> posiArray = new ArrayList<Long>();\", \"final List<Long> negaArray = new ArrayList<Long>();\", \"long input;\", \"int count = 0;\" are covered.\n\n6. For loop Execution : Since N is 2, the for loop condition (i < N) is true, and the loop block will be executed. Statement \"for (int i = 0; i < N; i++) {\" will be covered.\n\n7. For loop contents : user input statements are always executed. Statement \"input = sc.nextInt();\" will be executed.\n\n8. If - Else condition : Since input is not equal to 0, the else condition will be executed. Statements \"count++;\" will be covered.\n\n9. ArrayList Add operation : Since input is positive, the else if condition \"input > 0\" is true, and the statement \"posiArray.add(input);\" will be covered.\n\n10. Incrementing the indices : always executed. Statement \"posiIndex++;\" will be covered.\n\n11. Count comparison and distance calculation : Since count is not equal to K, the if condition is not satisfied. Statements \"count++;\", \"distance = posiArray.get(posiIndex - 1) - 2 * negaArray.get(negaIndex + 1);\" will not be covered.\n\n12. Statements after for loop in Main method : no statements after the for loop will be executed since the for loop completed execution. Statement \"System.out.println(distance);\" will be covered.\n\n13. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n\n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> public class Main\n> {\n>     public static void main(String[] args)\n>     {\n>         final Scanner sc = new Scanner(System.in);\n>         final int N = sc.nextInt();\n>         final int K = sc.nextInt();\n>         final List<Long> posiArray = new ArrayList<Long>();\n>         final List<Long> negaArray = new ArrayList<Long>();\n>         long input;\n>         int count = 0;\n>         for (int i = 0; i < N; i++)\n>         {\n>             input = sc.nextInt();\n>             if (input < 0)\n>             {\n>                 negaArray.add(input);\n>             } else if (input > 0)\n>             {\n>                 posiArray.add(input);\n>             } else\n>             {\n>                 count++;\n>             }\n>         }\n>         int posiIndex = 0;\n>         int negaIndex = negaArray.size() - 1;\n>         long distance = 0;\n>         for (int i = 0; i < N; i++)\n>         {\n>             if (posiArray.size() == 0 && negaArray.size() == 0)\n>             {\n>                 distance = 0;\n>                 break;\n>             } else if (posiArray.size() == 0)\n>             {\n>                 distance = -negaArray.get(K - 1);\n>                 break;\n>             } else if (negaArray.size() == 0)\n>             {\n>                 distance = posiArray.get(K - 1);\n>                 break;\n>             } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n>             {\n>                 posiIndex++;\n>             } else\n>             {\n>                 negaIndex--;\n>             }\n>             count++;\n>             if (count == K)\n>             {\n>                 final long posiDis = posiArray.get(posiIndex - 1);\n>                 final long negaDis = negaArray.get(negaIndex + 1);\n>                 if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n>                 {\n>                     distance = 2 * posiDis - negaDis;\n>                 } else\n>                 {\n>                     distance = posiDis - 2 * negaDis;\n>                 }\n>                 break;\n>             }\n>         }\n>         System.out.println(distance);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\n2\n-1\n2\n-3",
      "test_mutations": [
        "Test Case Input:\n-3\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3",
        "Test Case Input:\n-3\n2\n-1\n2\n-3",
        "Test Case Input:\n\"3\n2\n-1\n2\n-3\"",
        "Test Case Input:\n\"A\"\n2\n-1\n2\n-3",
        "Test Case Input:\na\n2\n-1\n2\n-3",
        "Test Case Input:\n3\n2\n-1\n2\n-3"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        final Scanner sc = new Scanner(System.in);\n        final int N = sc.nextInt();\n        final int K = sc.nextInt();\n        final List<Long> posiArray = new ArrayList<Long>();\n        final List<Long> negaArray = new ArrayList<Long>();\n        long input;\n        int count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            input = sc.nextInt();\n            if (input < 0)\n            {\n                negaArray.add(input);\n            } else if (input > 0)\n            {\n                posiArray.add(input);\n            } else\n            {\n                count++;\n            }\n        }\n        int posiIndex = 0;\n        int negaIndex = negaArray.size() - 1;\n        long distance = 0;\n        for (int i = 0; i < N; i++)\n        {\n            if (posiArray.size() == 0 && negaArray.size() == 0)\n            {\n                distance = 0;\n                break;\n            } else if (posiArray.size() == 0)\n            {\n                distance = -negaArray.get(K - 1);\n                break;\n            } else if (negaArray.size() == 0)\n            {\n                distance = posiArray.get(K - 1);\n                break;\n            } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n            {\n                posiIndex++;\n            } else\n            {\n                negaIndex--;\n            }\n            count++;\n            if (count == K)\n            {\n                final long posiDis = posiArray.get(posiIndex - 1);\n                final long negaDis = negaArray.get(negaIndex + 1);\n                if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n                {\n                    distance = 2 * posiDis - negaDis;\n                } else\n                {\n                    distance = posiDis - 2 * negaDis;\n                }\n                break;\n            }\n        }\n        System.out.println(distance);\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement 'import java.util.ArrayList;', 'import java.util.List;' and 'import java.util.Scanner;' will be covered.\n2. Main Class Declaration : always executed. Statement 'public class Main {' is covered.\n3. Main method decalarion : always executed. Statement 'public static void main(String[] args) {' is covered.\n4. User Input and Program Output : always executed. Statements 'final Scanner sc = new Scanner(System.in);', 'final int N = sc.nextInt();', 'final int K = sc.nextInt();' are covered.\n5. List Declarations : always executed. Statements 'final List<Long> posiArray = new ArrayList<Long>();', 'final List<Long> negaArray = new ArrayList<Long>();' are covered.\n6. Variable Declarations and Initialization : always executed. Statements 'long input;', 'int count = 0;' are covered.\n7. For loop Execution : Since N is 3, the for loop condition (i < N) is true, and the loop block will be executed. Statement 'for (int i = 0; i < N; i++) {' will be covered.\n8. Loop Contents : user input statements are always executed. Statement 'input = sc.nextInt();' will be executed. \n9. If - Else condition : The if-else condition is based on the value of the input. In this case, the input is negative, so the if condition is satisfied and the statement 'negaArray.add(input);' will be covered. \n10. Second If - Else condition : Since N is not zero, the second if condition is not satisfied. The else-if condition is also not satisfied. The else condition is satisfied so statements 'else {' and 'count++;' are covered. \n11. Second Loop Execution : Since N is 3, the second for loop condition (i < N) is true, and the loop block will be executed. Statement 'for (int i = 0; i < N; i++) {' will be covered.\n12. Second Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n13. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n14. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n15. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n16. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n17. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n18. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n19. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n20. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n21. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n22. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n23. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n24. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n25. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n26. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n27. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n28. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n29. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n30. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n31. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n32. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n33. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is satisfied, so statements 'else {' and 'count++;' are covered.\n34. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n35. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n36. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n37. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n38. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n39. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n40. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n41. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n42. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n43. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n44. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n45. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n46. Third Loop Contents : The first if condition is not satisfied, so it moves to the else-if condition. The else-if condition is not satisfied, so it moves to the else condition. The else condition is not satisfied, so statements 'else {' and 'count++;' are not covered.\n47. Third Loop Contents : The first if condition is not",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}