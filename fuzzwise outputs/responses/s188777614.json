{
  "submission_id": "s188777614",
  "cycles": [
    {
      "test_case": "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n3\n2\n1\n-2\n3",
        "Test Case Input:\n3\n2\n5\n-3\n0",
        "Test Case Input:\n3\n2\n1\n-2\n3",
        "Test Case Input:\n3\n2\n1\n-2\n3",
        "Test Case Input:\n3\n2\n1\n2\n3",
        "Test Case Input:\n5\n3\n1\n-2\n3\n-4\n0",
        "Test Case Input:\n5\n3\n-2\n4\n0\n-5\n3",
        "Test Case Input:\n3\n2\n-1\n0\n1",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. Main method contents : always executed. Statement \"Main main = new Main();\", \"main.solve();\" are covered. \n5. solve method declaration : always executed. Statement \"void solve() throws IOException {\" is covered.\n6. User Input and Variable Assignment : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered. \n7. ArrayList and Variable Declaration : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long zeros = 0, k = 0, n = 0;\" are covered. \n8. For loop Execution : Since n is 5, the for loop condition (i < n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" will be covered. \n9. For loop contents : user input statements are always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\" will be executed. \n10. If - Else condition : Since a is 3, the if condition 'a>0' is true. Statements \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a); }\" are covered. \n11. ArrayList sorting : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered. \n12. Variable assignment and while loop execution : always executed. Statements \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1){\" will be covered. \n13. While loop contents : The condition of the while loop 'hi-lo>1' is true, and the loop block will be executed. Statement \"long mid = (hi+lo)/2;\" will be covered. \n14. If condition within while loop : Since guess is greater than 0, the if condition 'guess>0' is true. Statements \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\" are covered. \n15. If condition within while loop : Since guess is less than or equal to 0, the if condition 'guess<=0' is true. Statements \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\" are covered. \n16. If condition within while loop : Since guess is less than 0, the if condition 'guess<0' is true. Statements \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\" are covered. \n17. return statement : always executed. Statement \"return ans >= k;\" is covered. \n18. Statement after while loop : always executed. Statement \"System.out.println(lo);\" is covered. \n19. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n-3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n\"5\"\n\"3\"\n\"-2\"\n\"1\"\n\"0\"\n\"-3\"\n\"4\"",
        "Test Case Input:\n-5\n3\n2\n1\n0\n-3\n-4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n3\n0\n-5\n4",
        "Test Case Input:\n\"5\" (string)\n\"3\" (string)\n\"-2\" (string)\n\"1\" (string)\n\"0\" (string)\n\"-3\" (string)\n\"4\" (string)",
        "Test Case Input:\n-1\n2\n3\n-4\n0\n5",
        "Test Case Input:\n\"5\"\n\"3\"\n\"-2\"\n\"1\"\n\"0\"\n\"-3\"\n\"4\"",
        "Test Case Input:\n\"5\n3\n-2\n1\n0\n-3\n4\"",
        "Test Case Input:\n5\n0\n1\n2\n3\n4\n5",
        "Test Case Input:\n5\n-3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN:\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", and \"import java.util.*;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Global Variable Declarations : always executed. Statements \"static PrintWriter out = new PrintWriter(System.out);\", \"static Scanner sc = new Scanner(System.in);\", \"static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\", \"ArrayList<Long> positive, negative, minus_nega;\", \"long zeros = 0, k = 0, n = 0;\" are covered.\n4. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n5. solve method declaration and execution : always executed. Statements \"Main main = new Main();\", \"main.solve();\" are covered.\n6. Variable Declarations and Assignments : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered.\n7. ArrayList Declarations : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n8. For loop Execution : Since n is 5, the for loop condition (i<n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" will be covered.\n9. Inside For loop : user input statements are always executed. Statement \"long a = sc.nextLong();\" will be executed.\n10. If - Else condition : If a is greater than 0, the if condition 'a>0' is true. Statement 'if(a>0) positive.add(a);' is covered. If a is equal to 0, the if condition 'a==0' is true. Statement 'else if(a==0) zeros += 1;' is covered. If a is less than 0, the if condition 'a>0' is false and the else condition is executed. Statement 'else{ negative.add(a); minus_nega.add(-a); }' is covered.\n11. Sorting ArrayLists : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n12. Variable Declarations and Assignments : always executed. Statements \"long lo = -maxi, hi = maxi+1;\" are covered.\n13. While loop Execution : The condition (hi-lo>1) is true. The loop block will be executed. Statement \"while(hi-lo>1){\" is covered.\n14. Inside While loop : If the condition 'guess>0' is true, the if block will be executed. Statement 'if(legal(mid)) lo = mid;' is covered. If the condition 'guess>0' is false, the else if block will be executed. Statement 'else hi = mid;' is covered.\n15. Print Statement : always executed. Statement \"System.out.println(lo);\" is covered.\n16. Closing Brackets : always covered.\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n5\n0\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n1\n-1",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n0\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n2\n-2\n0\n4\n5\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-2\n3\n-5\n1\n0\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4\n\nPLAN:\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", and \"import java.util.*;\" will be covered.\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n3. main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. solve method declaration: always executed. Statement \"void solve() throws IOException {\" is covered.\n5. User Input and Program Output : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"long a = sc.nextLong();\", \"System.out.println(lo);\" are covered.\n6. ArrayList Initialization: always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n7. For loop Execution : Since n is 5, the for loop condition (i < n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" will be covered.\n8. For loop contents : user input statements are always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a);}\" will be executed.\n9. Sorting ArrayLists: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" will be covered.\n10. While loop Execution : Since hi - lo > 1, the loop condition is true, and the loop block will be executed. Statement \"while(hi-lo>1){\" will be covered.\n11. While loop contents: Statements inside the while loop will be executed based on the condition of the legal() method.\n12. legal() method declaration and execution: method declaration is always executed. \"boolean legal(long guess){\" is covered. The statements inside the legal() method will be executed based on the condition of the if statements.\n13. helperPosList method declaration and execution: method declaration is always executed. \"long helperPosList(ArrayList<Long> pos, long lower){\" is covered. The statements inside the helperPosList() method will be executed based on the condition of the for loop.\n14. Closing Brackets : always covered.\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5 (string)\n3 (string)\n-2 (string)\n1 (string)\n0 (string)\n-3 (string)\n4 (string)",
      "test_mutations": [
        "Test Case Input:\n\"abc\"\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-2\n5\n3\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-2\n3\n5\n1\n0\n-3\n4",
        "Test Case Input:\n\"5\n3\n-2\n1\n0\n-3\n4\"",
        "Test Case Input:\n2\n-2\n5\nExplanation: This test case will cause an ArithmeticException because the value of 'n' is set to -2, which will result in an invalid calculation in the 'solve' method.",
        "Test Case Input:\n\"a\"\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n2\na\n3",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n\"5\" (string)\n\"3\" (string)\n\"-2\" (string)\n\"1\" (string)\n\"0\" (string)\n\"-3\" (string)\n\"4\" (string)"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case: \n\n1. Import statements : Import statements are always executed. Statements \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered. \n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Create an instance of Main class and call solve method : always executed. Statement \"Main main = new Main();\", \"main.solve();\" are covered.\n\n5. solve method : always executed. Statement \"void solve() throws IOException {\" is covered.\n\n6. Input reading and variable initialization : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered.\n\n7. ArrayList initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n\n8. Loop execution : Since n = 5, the for loop condition (i<n) is true, and the loop block will be executed 5 times. Statement \"for(int i=0;i<n;i++) {\" is covered.\n\n9. Loop contents : user input statements are always executed. Statement \"long a = sc.nextLong();\" is covered. \n\n10. max calculation : always executed. Statement \"maxi = Math.max(maxi,a*a);\" is covered.\n\n11. Number categorization : always executed. Statements \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else { negative.add(a); minus_nega.add(-a); }\" are covered.\n\n12. Sorting of ArrayLists : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n13. Binary search for the correct guess : always executed. Statements \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1) {\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\" are covered.\n\n14. Printing the final result : always executed. Statement \"System.out.println(lo);\" is covered.\n\n15. legal method : always executed. Statement \"boolean legal(long guess) {\" is covered.\n\n16. Calculation of ans : always executed. Statements \"long ans = 0;\", \"if(guess>0) {\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\" are covered.\n\n17. Calculation of ans when guess is less than or equal to 0 : always executed. Statements \"if(guess<=0) {\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\" are covered.\n\n18. Calculation of ans when guess is less than 0 : always executed. Statements \"if(guess < 0) {\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0) {\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++) {\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\" are covered.\n\n19. Return statement : always executed. Statement \"return ans >= k;\" is covered.\n\n20. helperPosList method : always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered.\n\n21. Calculation of ans in helperPosList method : always executed. Statements \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--) {\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len) {\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\" are covered.\n\n22. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n2\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n0\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-2\n5\n3\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n\"5\" (string)\n\"3\" (string)\n\"-2\" (string)\n\"1\" (string)\n\"0\" (string)\n\"-3\" (string)\n\"4\" (string)",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-2\n3\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main class Declaration : always executed. Statement \"public class Main {\" is covered.\n\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Main class object creation and solve method call : always executed. Statement \"Main main = new Main();\", \"main.solve();\" are covered.\n\n5. solve method execution : Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered.\n\n6. ArrayList initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n\n7. For loop Execution : Since the value of n is 5, the for loop condition (i<n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" will be covered.\n\n8. For loop contents : user input statements are always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\" are covered.\n\n9. If - Else condition : Since the value of a is not zero, the if condition 'a==0' is not satisfies. Statement 'if(a==0) zeros += 1;' is not covered. The else condition is satisfied so statements \"else {...\" and \"else {...\" are covered.\n\n10. ArrayList sorting : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n11. While loop Execution : the while loop condition (hi-lo>1) is true, and the loop block will be executed. Statement \"while(hi-lo>1){\" will be covered.\n\n12. While loop contents : if-else conditions are always executed. Statements \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\" are covered.\n\n13. System.out.println statement : always executed. Statement \"System.out.println(lo);\" is covered.\n\n14. legal method declaration and execution : always executed. Statements \"boolean legal(long guess){\", \"long ans = 0;\", \"if(ans>=k) return true;\", \"if(ans>=k) return true;\", \"return ans >= k;}\" are covered.\n\n15. helperPosList method declaration and execution : always executed. Statements \"long helperPosList(ArrayList<Long> pos, long lower){\", \"long ans = 0;\", \"for(int right=len-1;right>=0;right--){\", \"ans /= 2;\", \"return ans;}\" are covered.\n\n16. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-2\n5\n3\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n5 (string)\n3 (string)\n-2 (string)\n1 (string)\n0 (string)\n-3 (string)\n4 (string)",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-3\n5\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-2\n5\n3\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. The import statements are:\n    - import java.io.BufferedReader;\n    - import java.io.IOException;\n    - import java.io.InputStreamReader;\n    - import java.io.PrintWriter;\n    - import java.net.CookieHandler;\n    - import java.util.*;\n\n    All the import statements will be covered.\n\n2. Main Class Declaration : The Main class declaration is always executed. The statement \"public class Main {\" is covered.\n\n3. Main method declaration : The main method declaration is always executed. The statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. solve method declaration : The solve method declaration is always executed. The statement \"void solve() throws IOException {\" is covered.\n\n5. User Input and Program Output : The statements for user input and program output are always executed. The statements are:\n    - n = sc.nextInt();\n    - k = sc.nextInt();\n    - positive = new ArrayList<>();\n    - negative = new ArrayList<>();\n    - minus_nega = new ArrayList<>();\n    - for loop:\n        - long a = sc.nextLong();\n\n    All the above statements will be covered.\n\n6. Calculation of \"k\" : The statement \"k = n*(n-1)/2+1-k;\" is always executed and will be covered.\n\n7. ArrayList Initialization and Calculation of \"maxi\" : The statements for ArrayList initialization and calculation of \"maxi\" are always executed. The statements are:\n    - positive = new ArrayList<>();\n    - negative = new ArrayList<>();\n    - minus_nega = new ArrayList<>();\n    - long maxi = Long.MIN_VALUE;\n\n    All the above statements will be covered.\n\n8. For loop for input values and ArrayList population : The for loop for input values and ArrayList population is always executed. The statements are:\n    - long a = sc.nextLong();\n    - if(a > 0) positive.add(a);\n    - else if(a == 0) zeros += 1;\n    - else {\n        - negative.add(a);\n        - minus_nega.add(-a);\n      }\n\n    All the above statements will be covered.\n\n9. ArrayList Sorting : The statements for sorting the ArrayLists are always executed. The statements are:\n    - Collections.sort(positive);\n    - Collections.sort(negative);\n    - Collections.sort(minus_nega);\n\n    All the above statements will be covered.\n\n10. Calculation of \"lo\" and \"hi\" : The statements for calculating \"lo\" and \"hi\" are always executed. The statements are:\n    - long lo = -maxi;\n    - long hi = maxi + 1;\n\n    All the above statements will be covered.\n\n11. Binary Search Loop : The binary search loop is executed until the condition \"hi-lo>1\" is true. The statements are:\n    - long mid = (hi + lo) / 2;\n    - if(legal(mid)) lo = mid;\n    - else hi = mid;\n\n    All the above statements will be covered.\n\n12. Output the value of \"lo\" : The statement \"System.out.println(lo);\" is always executed and will be covered.\n\n13. legal method declaration and execution : The legal method declaration and execution is always executed. The statements are:\n    - boolean legal(long guess) {\n        - long ans = 0;\n        - if(guess > 0) {\n            - ans += helperPosList(positive, guess);\n            - ans += helperPosList(minus_nega, guess);\n            - if(ans >= k) return true;\n          }\n        - if(guess <= 0) {\n            - ans += zeros * (n - zeros);\n            - ans += positive.size() * (positive.size() - 1) / 2;\n            - ans += negative.size() * (negative.size() - 1) / 2;\n            - if(ans >= k) return true;\n          }\n        - if(guess < 0) {\n            - int lenPos = positive.size(), lenNeg = negative.size();\n            - if(lenNeg * lenPos > 0) {\n                - int right = 0;\n                - for(int i = 0; i < lenPos; i++) {\n                    - long cur = positive.get(i);\n                    - while(right < lenNeg && cur * negative.get(right) < guess) right++;\n                    - ans += lenNeg - right;\n                  }\n              }\n          }\n        - return ans >= k;\n      }\n\n    All the above statements will be covered.\n\n14. helperPosList method declaration and execution : The helperPosList method declaration and execution is always executed. The statements are:\n    - long helperPosList(ArrayList<Long> pos, long lower) {\n        - int len = pos.size(), left = 0;\n        - long ans = 0;\n        - if(len == 0 || pos.get(len - 1) * pos.get(len - 1) < lower) return 0;\n        - for(int right = len - 1; right >= 0; right--) {\n            - long cur = pos.get(right);\n            - while(left < len && pos.get(left) * cur < lower) left++;\n            - if(left != len) {\n                - if(left <= right) ans += len - left - 1;\n                - else ans += len - left;\n              }\n          }\n        - ans /= 2;\n        - return ans;\n      }\n\n    All the above statements will be covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n * (n - 1) / 2 + 1 - k;\n>         positive = new ArrayList<>();\n>         negative = new ArrayList<>();\n>         minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n\n>         for(int i = 0; i < n; i++) {\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi, a * a);\n>             if(a > 0) positive.add(a);\n>             else if(a == 0) zeros += 1;\n>             else {\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi + 1;\n\n>         while(hi - lo > 1) {\n>             long mid = (hi + lo) / 2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n\n>         System.out.println(lo);\n>     }\n\n>     boolean legal(long guess) {\n>         long ans = 0;\n\n>         if(guess > 0) {\n>             ans += helperPosList(positive, guess);\n>             ans += helperPosList(minus_nega, guess);\n>             if(ans >= k) return true;\n>         }\n\n>         if(guess <= 0) {\n>             ans += zeros * (n - zeros);\n>             ans += positive.size() * (positive.size() - 1) / 2;\n>             ans += negative.size() * (negative.size() - 1) / 2;\n>             if(ans >= k) return true;\n>         }\n\n>         if(guess < 0) {\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg * lenPos > 0) {\n>                 int right = 0;\n>                 for(int i = 0; i < lenPos; i++) {\n>                     long cur = positive.get(i);\n>                     while(right < lenNeg && cur * negative.get(right) < guess) right++;\n>                     ans += lenNeg - right;\n>                 }\n>             }\n>         }\n\n>         return ans >= k;\n>     }\n\n>     long helperPosList(ArrayList<Long> pos, long lower) {\n>         int len = pos.size(), left = 0;\n>         long ans = 0;\n\n>         if(len == 0 || pos.get(len - 1) * pos.get(len - 1) < lower) return 0;\n\n>         for(int right = len - 1; right >= 0; right--) {\n>             long cur = pos.get(right);\n>             while(left < len && pos.get(left) * cur < lower) left++;\n>             if(left != len) {\n>                 if(left <= right) ans += len - left - 1;\n>                 else ans += len - left;\n>             }\n>         }\n>         ans /= 2;\n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n-3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n5\n0\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n1\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n5\n-3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.util.*;\" will be covered.\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. Create object of Main class and call solve method: always executed. Statement \"Main main = new Main(); main.solve();\" is covered.\n5. solve method declaration and execution: always executed. Statement \"void solve() throws IOException {\" is covered.\n6. User Input and Program Output: always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered.\n7. ArrayList initialization: always executed. Statements \"positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\" are covered.\n8. Initialize variables and loop execution: always executed. Statements \"long maxi = Long.MIN_VALUE;\", \"for(int i=0;i<n;i++) {\" are covered.\n9. Input numbers and arraylist manipulation: always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else { negative.add(a); minus_nega.add(-a); }\" are covered.\n10. Sort ArrayLists: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n11. Binary search implementation: always executed. Statements \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1) {\" are covered.\n12. Implement legal method: always executed. Statement \"boolean legal(long guess) {\" is covered.\n13. Calculate ans for guess > 0: always executed. Statements \"long ans = 0;\", \"if(guess>0) {\" are covered.\n14. Calculate ans for guess <= 0: always executed. Statements \"if(guess<=0) {\" are covered.\n15. Calculate ans for guess < 0: always executed. Statements \"if(guess < 0) {\" are covered.\n16. Calculate ans >= k: always executed. Statement \"return ans >= k;\" is covered.\n17. Implement helperPosList method: always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered.\n18. Calculate ans for helperPosList: always executed. Statements \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--) {\" are covered.\n19. Divide ans by 2: always executed. Statement \"ans /= 2;\" is covered.\n20. Print result: always executed. Statement \"System.out.println(lo);\" is covered.\n21. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k;\n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2;\n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5 (string)\n3 (string)\n-2 (string)\n1 (string)\n0 (string)\n-3 (string)\n4 (string)",
      "test_mutations": [
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n3\n0\n1\n-2\nExplanation: This test case will raise an ArithmeticException as it attempts to divide by zero.",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5 (string)\n3 (string)\n-2 (string)\n1 (string)\n0 (string)\n-3 (string)\n4 (string)"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\" will be covered.\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. Main method contents:\n   - Create an instance of the Main class: always executed. Statement \"Main main = new Main();\" is covered.\n   - Call the solve() method: always executed. Statement \"main.solve();\" is covered.\n\n5. solve() method declaration and execution:\n   - Declaration: always executed. Statement \"void solve() throws IOException {\" is covered.\n   - Read input values for n and k: always executed. Statements \"n = sc.nextInt();\" and \"k = sc.nextInt();\" are covered.\n   - Calculate the value of k: always executed. Statement \"k = n*(n-1)/2+1-k;\" is covered.\n   - Create ArrayLists for positive, negative, and minus_nega: always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", and \"minus_nega = new ArrayList<>();\" are covered.\n   - Initialize maxi variable: always executed. Statement \"long maxi = Long.MIN_VALUE;\" is covered.\n   - For loop execution:\n     - Loop condition: always executed. The loop will execute n times. Statement \"for(int i=0;i<n;i++){\" is covered.\n     - Read input value for a: always executed. Statement \"long a = sc.nextLong();\" is covered.\n     - Calculate maximum value: always executed. Statement \"maxi = Math.max(maxi,a*a);\" is covered.\n     - If-else conditions:\n       - If a>0: always executed. Statement \"if(a>0) positive.add(a);\" is covered.\n       - Else if a==0: always executed. Statement \"else if(a==0) zeros += 1;\" is covered.\n       - Else: always executed. Statements \"else{\", \"negative.add(a);\", and \"minus_nega.add(-a);\" are covered.\n   - Sort the ArrayLists: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", and \"Collections.sort(minus_nega);\" are covered.\n   - Calculate lo and hi variables: always executed. Statements \"long lo = -maxi, hi = maxi+1;\" are covered.\n   - While loop execution:\n     - Loop condition: always executed. The loop will execute until hi-lo>1. Statement \"while(hi-lo>1){\" is covered.\n     - Calculate mid value: always executed. Statement \"long mid = (hi+lo)/2;\" is covered.\n     - If-else condition:\n       - If legal(mid): always executed. Statement \"if(legal(mid)) lo = mid;\" is covered.\n       - Else: always executed. Statement \"else hi = mid;\" is covered.\n   - Print the value of lo: always executed. Statement \"System.out.println(lo);\" is covered.\n\n6. legal() method declaration and execution:\n   - Declaration: always executed. Statement \"boolean legal(long guess) {\" is covered.\n   - Calculate ans variable: always executed. Statement \"long ans = 0;\" is covered.\n   - If-else conditions:\n     - If guess>0: always executed. Statement \"if(guess>0){\" is covered.\n     - If guess<=0: always executed. Statement \"if(guess<=0){\" is covered.\n     - If guess<0: always executed. Statement \"if(guess < 0){\" is covered.\n   - Return ans>=k: always executed. Statement \"return ans >= k;\" is covered.\n\n7. helperPosList() method declaration and execution:\n   - Declaration: always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered.\n   - Calculate len and left variables: always executed. Statements \"int len = pos.size(), left=0;\" are covered.\n   - Calculate ans variable: always executed. Statement \"long ans = 0;\" is covered.\n   - If condition: always executed. Statement \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\" is covered.\n   - For loop execution:\n     - Loop condition: always executed. The loop will execute len times. Statement \"for(int right=len-1;right>=0;right--){\" is covered.\n     - Calculate cur variable: always executed. Statement \"long cur = pos.get(right);\" is covered.\n     - While loop execution:\n       - Loop condition: always executed. The loop will execute until left<len and pos.get(left)*cur<lower. Statement \"while(left<len&&pos.get(left)*cur<lower) left++;\" is covered.\n       - If condition: always executed. Statement \"if(left!=len){\" is covered.\n       - If-else conditions:\n         - If condition: always executed. Statement \"if(left<=right) ans += len-left-1;\" is covered.\n         - Else condition: always executed. Statement \"else ans += len-left;\" is covered.\n   - Calculate ans variable: always executed. Statement \"ans /= 2;\" is covered.\n   - Return ans: always executed. Statement \"return ans;\" is covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n0\n1",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n1 (string)\n2 (string)",
        "Test Case Input:\n3\n2\n-1\n0\n1",
        "Test Case Input:\n0 (string)\n1 (string)",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n0\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. All import statements will be covered.\n\n2. Main class declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. solve method declaration: always executed. Statement \"void solve() throws IOException {\" is covered.\n\n5. User Input: always executed. Statements \"n = sc.nextInt();\" and \"k = sc.nextInt();\" are covered.\n\n6. Initialization of ArrayLists and variables: always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\" and \"minus_nega = new ArrayList<>();\" are covered. Variables \"zeros\", \"k\" and \"n\" are also initialized.\n\n7. For loop execution: The for loop will execute n times. Each iteration will execute the statements inside the loop. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a); }\" will be covered.\n\n8. Sorting ArrayLists: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\" and \"Collections.sort(minus_nega);\" are covered.\n\n9. Calculation of lo and hi: always executed. Statements \"long lo = -maxi, hi = maxi+1;\" are covered.\n\n10. While loop execution: The while loop will execute until the condition \"hi-lo>1\" is false. The statements inside the loop will be executed. Statement \"long mid = (hi+lo)/2;\" is covered.\n\n11. legal method execution: The legal method will be executed. Statements inside the legal method will be covered.\n\n12. helperPosList method execution: The helperPosList method will be executed. Statements inside the helperPosList method will be covered.\n\n13. Print statement: always executed. Statement \"System.out.println(lo);\" is covered.\n\n14. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> \n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n> \n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n> \n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n> \n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n> \n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0",
      "test_mutations": [
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5 (string)\n3 (string)\n-2 (string)\n1 (string)\n0 (string)\n-3 (string)\n4 (string)",
        "Test Case Input:\n5\n0\n3\n1\n2\n-5",
        "Test Case Input:\n-10\n5\n-2\n1\n0\n-3\n4\n-5\n6\n-7\n8\n-9",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. All the import statements will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. Create an instance of Main class and call solve method : always executed. Statements \"Main main = new Main();\", \"main.solve();\" are covered.\n5. solve method declaration : always executed. Statement \"void solve() throws IOException {\" is covered.\n6. Input values for n and k : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered.\n7. Calculation of k : always executed. Statement \"k = n*(n-1)/2+1-k;\" is covered.\n8. ArrayList initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n9. Calculation of maxi : always executed. Statement \"long maxi = Long.MIN_VALUE;\" is covered.\n10. Loop for n times : always executed. Statements \"for(int i=0;i<n;i++) {\" and \"}\" are covered.\n11. Read input values for a : always executed. Statement \"long a = sc.nextLong();\" is covered.\n12. Calculation of maxi : always executed. Statement \"maxi = Math.max(maxi,a*a);\" is covered.\n13. If-else condition for a : always executed. Statements \"if(a>0) {\", \"else if(a==0) {\", \"else {\" and \"}\" are covered.\n14. Add a to respective ArrayList : always executed. Statements \"positive.add(a);\", \"negative.add(a);\" and \"minus_nega.add(-a);\" are covered.\n15. Sort ArrayLists : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\" and \"Collections.sort(minus_nega);\" are covered.\n16. Calculation of lo and hi : always executed. Statements \"long lo = -maxi;\", \"long hi = maxi+1;\" are covered.\n17. While loop : always executed. Statement \"while(hi-lo>1) {\" is covered.\n18. Calculate mid : always executed. Statement \"long mid = (hi+lo)/2;\" is covered.\n19. If condition for legal method : always executed. Statement \"if(legal(mid)) {\" is covered.\n20. legal method declaration : always executed. Statement \"boolean legal(long guess) {\" is covered.\n21. Calculate ans : always executed. Statement \"long ans = 0;\" is covered.\n22. If condition for guess>0 : always executed. Statement \"if(guess>0) {\" is covered.\n23. Calculate ans for guess>0 : always executed. Statements \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\" and \"if(ans>=k) return true;\" are covered.\n24. If condition for guess<=0 : always executed. Statement \"if(guess<=0) {\" is covered.\n25. Calculate ans for guess<=0 : always executed. Statements \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\" and \"if(ans>=k) return true;\" are covered.\n26. If condition for guess<0 : always executed. Statement \"if(guess < 0) {\" is covered.\n27. Calculation of lenPos and lenNeg : always executed. Statements \"int lenPos = positive.size(), lenNeg = negative.size();\" are covered.\n28. If condition for lenNeg*lenPos>0 : always executed. Statement \"if(lenNeg*lenPos>0) {\" is covered.\n29. Loop for lenPos times : always executed. Statements \"for(int i=0;i<lenPos;i++) {\" and \"}\" are covered.\n30. Calculate cur : always executed. Statement \"long cur = positive.get(i);\" is covered.\n31. Loop for lenNeg times : always executed. Statement \"for(int i=0;i<lenPos;i++) {\" is covered.\n32. Calculate right : always executed. Statement \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\" is covered.\n33. Calculate ans : always executed. Statement \"ans += lenNeg-right;\" is covered.\n34. return ans >= k : always executed. Statement \"return ans >= k;\" is covered.\n35. helperPosList method declaration : always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered.\n36. Calculate len : always executed. Statement \"int len = pos.size(), left=0;\" is covered.\n37. Calculate ans : always executed. Statement \"long ans = 0;\" is covered.\n38. If condition for len==0||pos.get(len-1)*pos.get(len-1)<lower : always executed. Statement \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\" is covered.\n39. Loop for len times : always executed. Statement \"for(int right=len-1;right>=0;right--) {\" and \"}\" are covered.\n40. Calculate cur : always executed. Statement \"long cur = pos.get(right);\" is covered.\n41. Loop for len times : always executed. Statement \"for(int right=len-1;right>=0;right--) {\" is covered.\n42. Calculate left : always executed. Statement \"while(left<len&&pos.get(left)*cur<lower) left++;\" is covered.\n43. If condition for left!=len : always executed. Statement \"if(left!=len) {\" is covered.\n44. Calculate ans : always executed. Statements \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\" and \"}\" are covered.\n45. Calculate ans : always executed. Statement \"ans /= 2;\" is covered.\n46. return ans : always executed. Statement \"return ans;\" is covered.\n47. Print lo : always executed. Statement \"System.out.println(lo);\" is covered.\n48. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n0",
      "test_mutations": [
        "Test Case Input:\n5\n0\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n1 (string)\n2 (string)",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n1 (string)\n2 (string)\n3 (string)\n4 (string)\n5 (string)\n6 (string)",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statements \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. solve method declaration and execution : solve method is called from the main method. Statements \"Main main = new Main();\", \"main.solve();\" will be covered.\n\n5. User Input and Program Output : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered.\n\n6. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n\n7. For loop Execution : Since the value of n is 5, the for loop condition (i < n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" will be covered.\n\n8. For loop contents : user input statements are always executed. Statement \"long a = sc.nextLong();\" will be executed.\n\n9. if - else if - else condition : Since the value of a is 0, the else if condition 'a==0' is true. Statement 'else if(a==0) zeros += 1;' is covered. The other conditions are not satisfied, so statements 'if(a>0) positive.add(a);' and 'else{ negative.add(a); minus_nega.add(-a); }' are not covered.\n\n10. Collections sort method : always covered. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n11. loop condition check and while loop execution : always executed. Statements \"while(hi-lo>1){\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\" are covered.\n\n12. legal method declaration and execution : always executed. Statements \"boolean legal(long guess){\", \"long ans = 0;\", \"if(guess>0){\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\", \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\", \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\", \"}\", \"return ans >= k;\", \"}\" are covered.\n\n13. helperPosList method declaration and execution : always executed. Statements \"long helperPosList(ArrayList<Long> pos, long lower){\", \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\", \"}\" are covered.\n\n14. Program Output : always executed. Statement \"System.out.println(lo);\" is covered.\n\n15. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0",
      "test_mutations": [
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n1 (string)\n2 (string)\n3 (string)\n4 (string)\n5 (string)\n6 (string)\n7 (string)\n8 (string)\n9 (string)\n10 (string)",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n0",
        "Test Case Input:\n5\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered. \n\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Main class instance creation and solve method call: always executed. Statements \"Main main = new Main();\", \"main.solve();\" are covered.\n\n5. solve method declaration and execution: always executed. Statement \"void solve() throws IOException {\" is covered.\n\n6. Input and variable initialization: always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\", \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\" are covered.\n\n7. Loop execution: always executed. Statement \"for(int i=0;i<n;i++) {\" is covered.\n\n8. Loop contents: always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\" are covered.\n\n9. If-else condition: always executed. Statements \"if(a>0) {\", \"positive.add(a);\", \"}\", \"else if(a==0) {\", \"zeros += 1;\", \"}\", \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\" are covered.\n\n10. ArrayList sorting: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n11. Loop execution: always executed. Statements \"for(int i=0;i<n;i++) {\" is covered.\n\n12. Loop contents: always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\" are covered.\n\n13. If-else condition: always executed. Statements \"if(a>0) {\", \"positive.add(a);\", \"}\", \"else if(a==0) {\", \"zeros += 1;\", \"}\", \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\" are covered.\n\n14. Binary Search: always executed. Statements \"long lo = -maxi;\", \"hi = maxi+1;\", \"while(hi-lo>1) {\" are covered.\n\n15. If condition: always executed. Statement \"if(legal(mid)) {\" is covered.\n\n16. legal method declaration and execution: always executed. Statement \"boolean legal(long guess) {\" is covered.\n\n17. Variable initialization: always executed. Statement \"long ans = 0;\" is covered.\n\n18. If condition: always executed. Statement \"if(guess>0) {\" is covered.\n\n19. Method call: always executed. Statement \"ans += helperPosList(positive,guess);\" is covered.\n\n20. Method call: always executed. Statement \"ans += helperPosList(minus_nega,guess);\" is covered.\n\n21. If condition: always executed. Statement \"if(ans>=k) {\" is covered.\n\n22. If condition: always executed. Statement \"if(guess<=0) {\" is covered.\n\n23. Variable addition: always executed. Statements \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\" are covered.\n\n24. If condition: always executed. Statement \"if(ans>=k) {\" is covered.\n\n25. If condition: always executed. Statement \"if(guess < 0) {\" is covered.\n\n26. Variable initialization: always executed. Statements \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0) {\" are covered.\n\n27. Loop execution: always executed. Statements \"for(int i=0;i<lenPos;i++) {\" is covered.\n\n28. Variable initialization: always executed. Statement \"long cur = positive.get(i);\" is covered.\n\n29. Loop execution: always executed. Statement \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\" is covered.\n\n30. Variable addition: always executed. Statement \"ans += lenNeg-right;\" is covered.\n\n31. Return statement: always executed. Statement \"return ans >= k;\" is covered.\n\n32. helperPosList method declaration and execution: always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered.\n\n33. Variable initialization: always executed. Statements \"int len = pos.size(), left=0;\", \"long ans = 0;\" are covered.\n\n34. If condition: always executed. Statement \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\" is covered.\n\n35. Loop execution: always executed. Statements \"for(int right=len-1;right>=0;right--) {\" is covered.\n\n36. Variable initialization: always executed. Statement \"long cur = pos.get(right);\" is covered.\n\n37. Loop execution: always executed. Statement \"while(left<len&&pos.get(left)*cur<lower) left++;\" is covered.\n\n38. If condition: always executed. Statement \"if(left!=len) {\" is covered.\n\n39. If-else condition: always executed. Statement \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\" are covered.\n\n40. Variable division: always executed. Statement \"ans /= 2;\" is covered.\n\n41. Return statement: always executed. Statement \"return ans;\" is covered.\n\n42. System.out.println statement: always executed. Statement \"System.out.println(lo);\" is covered.\n\n43. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}