{
  "submission_id": "s502305175",
  "cycles": [
    {
      "test_case": "Test Case Input:\n1 2 3",
      "test_mutations": [
        "Test Case Input:\n1 2 3",
        "Test Case Input:\n1 2 3",
        "Test Case Input:\n1 2 3",
        "Test Case Input:\n1 2 3",
        "Test Case Input:\n1 2 3",
        "Test Case Input:\n1 2 3",
        "Test Case Input:\n1 2 3",
        "Test Case Input:\n1 2 3",
        "Test Case Input:\n1 2 3",
        "Test Case Input:\n1 2 3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\" and \"import java.io.IOException;\" will be covered.\n\n2. Main class declaration: always executed. Statement \"class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. InputStreamReader and BufferedReader object creation: always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\" and \"BufferedReader br = new BufferedReader(isr);\" are covered.\n\n5. String variable initialization: always executed. Statement \"String str = \"\";\" is covered.\n\n6. Integer array creation: always executed. Statement \"int[] a = new int[3];\" is covered.\n\n7. try-catch block: always executed. Statements \"try {\" and \"} catch(IOException e) {\" are covered.\n\n8. while loop: Since there is no condition specified for the while loop, it will run indefinitely. The loop block will be executed until an exception is encountered or the program is exited. Statement \"while (true) {\" is covered.\n\n9. Read input from user: Statements \"str = br.readLine();\" and \"StringTokenizer st = new StringTokenizer(str, \" \");\" are always executed.\n\n10. Parse input tokens and store in array: Statements \"int i = 0;\" and \"while (st.hasMoreTokens()) {\" are always executed. The loop block inside this statement will be executed as many times as there are tokens in the input string.\n\n11. Check condition and print output: Since there is no condition specified for the if-else statement, both the if and else blocks will be executed. Statements \"if (a[0] < a[1] && a[1] < a[2]) {\" and \"System.out.print(\"YES\");\" are covered. Statements \"else {\" and \"System.out.print(\"NO\");\" are also covered.\n\n12. Clear string variable: Statement \"str = \"\";\" is always executed.\n\n13. Closing brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str = \"\";\n>         int[] a = new int[3];\n>         try {\n>             while (true) {\n>                 str = br.readLine();\n>                 StringTokenizer st = new StringTokenizer(str, \" \");\n>                 int i = 0;\n>                 while (st.hasMoreTokens()) {\n>                     a[i] = Integer.parseInt(st.nextToken());\n>                     i++;\n>                 }\n>                 i = 0;\n>                 if (a[0] < a[1] && a[1] < a[2]) {\n>                     System.out.print(\"YES\");\n>                 } else {\n>                     System.out.print(\"NO\");\n>                 }\n>                 str = \"\";\n>             }\n>         } catch (IOException e) {\n>             System.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 2 a",
      "test_mutations": [
        "Test Case Input:\n\"1\" \"2\" \"3\" \"4\"",
        "Test Case Input:\n\"1\" \"2\" \"3\" \"4\"",
        "Test Case Input:\na b c",
        "Test Case Input:\n5 a 7",
        "Test Case Input: \n1.5 2.5 3.5",
        "Test Case Input:\na b c",
        "Test Case Input:\na b c",
        "Test Case Input:\n\"abc\" 2 3",
        "Test Case Input:\nabc 123 456",
        "Test Case Input:\n1 2 a"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.util.StringTokenizer;\" will be covered.\n\n2. Main Class Declaration : always executed. Statement \"class Main {\" is covered.\n\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. User Input and Program Output : always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\", \"BufferedReader br = new BufferedReader(isr);\" are covered.\n\n5. String str Initialization : always executed. Statement \"String str=\"\";\" is covered.\n\n6. Array Initialization : always executed. Statement \"int[] a=new int[3];\" is covered.\n\n7. try block execution : Statements within the try block will be executed until an exception occurs or an exit condition is reached.\n\n8. Read input using BufferedReader : always executed. Statement \"str = br.readLine();\" is covered.\n\n9. Tokenize the input string : always executed. Statement \"StringTokenizer st=new StringTokenizer(str,\" \");\" is covered.\n\n10. Loop through the tokens and store them in an array : always executed. Statements within the while loop \"while (st.hasMoreTokens()) {\", \"a[i]=Integer.parseInt(st.nextToken());\", \"i++;\" are covered.\n\n11. Check the condition : always executed. Statement \"if(a[0] < a[1] && a[1] < a[2]){\" is covered.\n\n12. Print output : always executed. Statement \"System.out.print(\"YES\");\" is covered.\n\n13. else block : always executed. Statement \"System.out.print(\"NO\");\" is covered.\n\n14. Reset the string : always executed. Statement \"str=\"\";\" is covered.\n\n15. catch block execution : always executed. Statement \"catch(IOException e) {\" is covered.\n\n16. Exit the program : always executed. Statement \"System.exit(0);\" is covered.\n\n17. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>             while(true){\n>                 str = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>                  while (st.hasMoreTokens()) {\n>                      a[i]=Integer.parseInt(st.nextToken());\n>                      i++;\n>                  }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>             }\n>         } catch(IOException e) {\n>             System.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 2 a",
      "test_mutations": [
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a ",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 -3",
        "Test Case Input:\n1 2 3 4",
        "Test Case Input:\n1 2 3",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 0 3",
        "Test Case Input:\n1 2 a"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "1. Import statements: The import statements are always executed. The statement \"import java.io.BufferedReader;\" and \"import java.io.IOException;\" will be covered.\n2. Main Class Declaration: The main class declaration is always executed. The statement \"class Main {\" will be covered.\n3. Main Method Declaration: The main method declaration is always executed. The statement \"public static void main(String[] args) {\" will be covered.\n4. InputStreamReader and BufferedReader Initialization: The initialization of InputStreamReader and BufferedReader is always executed. The statements \"InputStreamReader isr = new InputStreamReader(System.in);\" and \"BufferedReader br = new BufferedReader(isr);\" will be covered.\n5. Variable Initialization: The initialization of variables is always executed. The statement \"String str=\"\";\" and \"int[] a=new int[3];\" will be covered.\n6. Try block: The try block will be executed. The statement \"try {\" will be covered.\n7. while loop: The while loop condition is true, so the loop block will be executed. The statement \"while(true) {\" will be covered.\n8. Read user input: The readline() method is executed to read user input. The statement \"str = br.readLine();\" will be covered.\n9. StringTokenizer and Integer.parseInt: The StringTokenizer and Integer.parseInt methods are executed to parse the input string. The statements \"StringTokenizer st=new StringTokenizer(str,\" \");\" and \"a[i]=Integer.parseInt(st.nextToken());\" will be covered.\n10. If-else condition: The if condition \"a[0] < a[1] && a[1] < a[2]\" is false, so the else block will be executed. The statements \"System.out.print(\"NO\");\" will be covered.\n11. String assignment: The string assignment statement is always executed. The statement \"str=\"\";\" will be covered.\n12. Catch block: The catch block will be executed. The statement \"catch(IOException e) {\" will be covered.\n13. System.exit(): The System.exit() method is executed. The statement \"System.exit(0);\" will be covered.\n14. Closing Brackets: The closing brackets are always executed. The statements \"}\" and \"}\" will be covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>         \twhile(true){\n>         \t\tstr = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>     \t\t     while (st.hasMoreTokens()) {\n>     \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n>     \t\t    \t i++;\n>     \t\t     }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>         \t}\n>         } catch(IOException e) {\n>         \tSystem.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5 4 3",
      "test_mutations": [
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 3 4",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n5 4 3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements: Import statements are always executed. The statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.util.StringTokenizer;\" will be covered.\n2. Main class declaration: Always executed. The statement \"class Main {\" is covered.\n3. Main method declaration: Always executed. The statement \"public static void main(String[] args) {\" is covered.\n4. InputStreamReader and BufferedReader initialization: Always executed. The statements \"InputStreamReader isr = new InputStreamReader(System.in);\", \"BufferedReader br = new BufferedReader(isr);\" are covered.\n5. String and int array initialization: Always executed. The statements \"String str=\"\";\", \"int[] a=new int[3];\" are covered.\n6. Try block: Always executed. The statement \"try {\" is covered.\n7. while loop: The while loop will continue executing until an IOException is thrown. The condition \"true\" will always be executed. The statement \"while(true) {\" is covered.\n8. Reading input from user: The statement \"str = br.readLine();\" is covered. The StringTokenizer is used to split the input string into integers and store them in the array \"a\".\n9. StringTokenizer and array assignment: The statements \"StringTokenizer st=new StringTokenizer(str,\" \");\", \"int i=0;\", \"while (st.hasMoreTokens()) {\", \"a[i]=Integer.parseInt(st.nextToken());\", \"i++;\", \"}\" are covered.\n10. If-else condition: The if condition \"a[0] < a[1] && a[1] < a[2]\" is always executed. The statement \"if(a[0] < a[1] && a[1] < a[2]) {\" is covered. The else condition is also always executed. The statement \"System.out.print(\"NO\");\" is covered.\n11. Print statement: The statements \"System.out.print(\"YES\");\" and \"System.out.print(\"NO\");\" are covered.\n12. Resetting string: The statement \"str=\"\";\" is covered.\n13. Catch block: The catch block is executed when an IOException is thrown. The statement \"catch(IOException e) {\" is covered.\n14. System exit: The statement \"System.exit(0);\" is covered.\n15. Closing brackets: Always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>         \twhile(true){\n>         \t\tstr = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>     \t\t     while (st.hasMoreTokens()) {\n>     \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n>     \t\t    \t i++;\n>     \t\t     }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>         \t}\n>         } catch(IOException e) {\n>         \tSystem.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 2.5 3",
      "test_mutations": [
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 3 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 3 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 3 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2.5 3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\" and \"import java.io.IOException;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. InputStreamReader and BufferedReader Initialization: always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\" and \"BufferedReader br = new BufferedReader(isr);\" are covered.\n\n5. String Initialization: always executed. Statement \"String str=\"\";\" is covered.\n\n6. Integer Array Initialization: always executed. Statement \"int[] a=new int[3];\" is covered.\n\n7. Try block execution: always executed. Statement \"try {\" is covered.\n\n8. while loop execution: The condition \"true\" is always satisfied, so the while loop will execute indefinitely. Statement \"while(true) {\" is covered.\n\n9. Read input from user: Statements \"str = br.readLine();\" and \"StringTokenizer st=new StringTokenizer(str,\" \");\" are always executed.\n\n10. Tokenize input string: The input string is tokenized using StringTokenizer. Statements within the nested while loop \"int i=0;\", \"while (st.hasMoreTokens()) {\" and \"a[i]=Integer.parseInt(st.nextToken());\" are always executed.\n\n11. If-else condition: Statements within the if block and else block will be executed based on the condition \"a[0] < a[1] && a[1] < a[2]\". Statement \"if(a[0] < a[1] && a[1] < a[2]){\" and \"System.out.print(\"YES\");\" are covered if the condition is true. Statement \"else{\" and \"System.out.print(\"NO\");\" are covered if the condition is false.\n\n12. Empty the string variable: always executed. Statement \"str=\"\";\" is covered.\n\n13. Catch block execution: always executed. Statement \"catch(IOException e) {\" is covered.\n\n14. Exit the program: always executed. Statement \"System.exit(0);\" is covered.\n\n15. Closing Braces: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>             while(true){\n>                 str = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>                  while (st.hasMoreTokens()) {\n>                      a[i]=Integer.parseInt(st.nextToken());\n>                      i++;\n>                  }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>             }\n>         } catch(IOException e) {\n>             System.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5 4 a",
      "test_mutations": [
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 abc",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2.5 a",
        "Test Case Input:\n1 2 three",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n5 4 a"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.util.StringTokenizer;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. User Input and Program Output: always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\", \"BufferedReader br = new BufferedReader(isr);\", \"String str=\"\";\" are covered.\n\n5. Try block execution: since the while loop condition \"true\" is always true, the try block will be executed infinitely.\n\n6. Read input and Tokenize: Statements \"str = br.readLine();\", \"StringTokenizer st=new StringTokenizer(str,\" \");\" are covered.\n\n7. While Loop Execution: The while loop will continue executing until an IOException occurs. The condition \"true\" is always true, so the loop block will be executed.\n\n8. Tokenize and Assign values: Statements \"int i=0;\", \"while (st.hasMoreTokens()) {\", \"a[i]=Integer.parseInt(st.nextToken());\", \"i++;\" are covered.\n\n9. If-Else condition: The if condition \"a[0] < a[1] && a[1] < a[2]\" will be evaluated. If the condition is true, the if block will be executed, otherwise, the else block will be executed. Statements \"if(a[0] < a[1] && a[1] < a[2]) {\", \"System.out.print(\"YES\");\", \"else {\", \"System.out.print(\"NO\");\" are covered.\n\n10. Print Output: Either \"YES\" or \"NO\" will be printed based on the if-else condition. Statement \"System.out.print(\"YES\");\" or \"System.out.print(\"NO\");\" is covered.\n\n11. Reset variables: Statement \"str=\"\";\" is covered.\n\n12. Catch block execution: If an IOException occurs, the catch block will be executed. Statement \"catch(IOException e) {\" is covered.\n\n13. System Exit: Statement \"System.exit(0);\" is covered.\n\n14. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>             while(true){\n>                 str = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>                  while (st.hasMoreTokens()) {\n>                      a[i]=Integer.parseInt(st.nextToken());\n>                      i++;\n>                  }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                     System.out.print(\"YES\");\n>                 }else{\n>                     System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>             }\n>         } catch(IOException e) {\n>             System.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 2 a",
      "test_mutations": [
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2.5 a",
        "Test Case Input:\n1.5 2 3",
        "Test Case Input:\n1 2 \"a\"",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\" and \"import java.io.IOException;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. InputStreamReader and BufferedReader object creation : always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\" and \"BufferedReader br = new BufferedReader(isr);\" are covered. \n5. String variable declaration : always executed. Statement \"String str=\"\";\" is covered. \n6. Integer array declaration : always executed. Statement \"int[] a=new int[3];\" is covered. \n7. try block execution : always executed. Statement \"try {\" is covered. \n8. while loop : Since the condition \"while(true)\" is always true, the while loop block will be executed indefinitely until an exception occurs or the program is terminated. Statement \"while(true){\" is covered. \n9. Read input from user : The input is read using the BufferedReader object and stored in the string variable \"str\". Statements \"str = br.readLine();\" and \"StringTokenizer st=new StringTokenizer(str,\" \");\" are covered. \n10. Tokenize input string : The string \"str\" is tokenized using the delimiter \" \" and the tokens are stored in the integer array \"a\". Statements \"int i=0;\", \"while (st.hasMoreTokens()) {\" and \"a[i]=Integer.parseInt(st.nextToken());\" are covered. \n11. if-else condition : The if condition 'a[0] < a[1] && a[1] < a[2]' is evaluated. If the condition is true, the statement \"System.out.print(\"YES\");\" is executed. Otherwise, the statement \"System.out.print(\"NO\");\" is executed. Statements \"if(a[0] < a[1] && a[1] < a[2]){\" and \"System.out.print(\"YES\");\" or \"System.out.print(\"NO\");\" are covered based on the input values. \n12. Reset string variable : The string variable \"str\" is reset to an empty string. Statement \"str=\"\";\" is covered. \n13. catch block execution : The catch block is executed if there is an IOException. The program exits with status 0. Statements \"catch(IOException e) {\" and \"System.exit(0);\" are covered. \n14. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>             while(true){\n>                 str = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>                  while (st.hasMoreTokens()) {\n>                      a[i]=Integer.parseInt(st.nextToken());\n>                      i++;\n>                  }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>             }\n>         } catch(IOException e) {\n>             System.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 2 a",
      "test_mutations": [
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2.5 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n5 a 3",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2.5 3",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\" and \"import java.io.IOException;\" will be covered. \n\n2. Main Class Declaration : always executed. Statement \"class Main {\" is covered. \n\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. InputStreamReader and BufferedReader Initialization : always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\" and \"BufferedReader br = new BufferedReader(isr);\" are covered.\n\n5. String Initialization : always executed. Statement \"String str=\"\";\" is covered.\n\n6. Array Initialization : always executed. Statement \"int[] a=new int[3];\" is covered.\n\n7. Try block : always executed. Statement \"try {\" is covered.\n\n8. while loop : Since the input is not terminated, the condition 'true' is satisfied and the while loop will be executed. Statement \"while(true){\" is covered.\n\n9. User Input and Program Output : always executed. Statement \"str = br.readLine();\" is covered. \n\n10. StringTokenizer Initialization and Token Extraction : always executed. Statement \"StringTokenizer st=new StringTokenizer(str,\" \");\" is covered.\n\n11. while loop for Token Extraction : always executed. Statement \"while (st.hasMoreTokens()) {\" is covered.\n\n12. Token Conversion and Array Assignment : always executed. Statement \"a[i]=Integer.parseInt(st.nextToken());\" is covered. \n\n13. If - Else condition : The if condition 'a[0] < a[1] && a[1] < a[2]' is not satisfied since the third token is not a valid integer. The else condition will be executed. \n\n14. Program Output : always executed. Statements \"System.out.print(\"NO\");\" is covered.\n\n15. String Reset : always executed. Statement \"str=\"\";\" is covered.\n\n16. Catch block and Program Termination : always executed. Statements \"catch(IOException e) {\" and \"System.exit(0);\" are covered.\n\n17. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>             while(true){\n>                 str = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>                  while (st.hasMoreTokens()) {\n>                      a[i]=Integer.parseInt(st.nextToken());\n>                      i++;\n>                  }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                     System.out.print(\"YES\");\n>                 }else{\n>                     System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>             }\n>         } catch(IOException e) {\n>             System.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 a 3",
      "test_mutations": [
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n5 4 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 \"a\"",
        "Test Case Input:\n1 2 3 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.util.StringTokenizer;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"class Main {\" is covered.\n\n3. Main method declaration and InputStreamReader object creation: always executed. Statement \"public static void main(String[] args) {\" and \"InputStreamReader isr = new InputStreamReader(System.in);\" are covered.\n\n4. BufferedReader object creation: always executed. Statement \"BufferedReader br = new BufferedReader(isr);\" is covered.\n\n5. Variable initialization: always executed. Statement \"String str=\"\";\" and \"int[] a=new int[3];\" are covered.\n\n6. try block: always executed. Statement \"try {\" is covered.\n\n7. while loop condition: always executed. Statement \"while(true){\" is covered.\n\n8. Reading input from user: always executed. Statement \"str = br.readLine();\" is covered.\n\n9. Tokenizing the input string: always executed. Statement \"StringTokenizer st=new StringTokenizer(str,\" \");\" is covered.\n\n10. Loop for storing integers in array: always executed. Statement \"while (st.hasMoreTokens()) {\" is covered.\n\n11. Storing integers in array: always executed. Statement \"a[i]=Integer.parseInt(st.nextToken());\" is covered.\n\n12. Checking the condition: always executed. Statement \"if(a[0] < a[1] && a[1] < a[2]){\" is covered.\n\n13. Printing \"YES\" if condition is true: always executed. Statement \"System.out.print(\"YES\");\" is covered.\n\n14. Printing \"NO\" if condition is false: always executed. Statement \"System.out.print(\"NO\");\" is covered.\n\n15. Resetting the string variable: always executed. Statement \"str=\"\";\" is covered.\n\n16. Catch block: always executed. Statement \"} catch(IOException e) {\" is covered.\n\n17. Exiting the program: always executed. Statement \"System.exit(0);\" is covered.\n\n18. Closing Brackets: always executed.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>             while(true){\n>                 str = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>                  while (st.hasMoreTokens()) {\n>                      a[i]=Integer.parseInt(st.nextToken());\n>                      i++;\n>                  }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>             }\n>         } catch(IOException e) {\n>             System.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 2 a",
      "test_mutations": [
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1.5 2.5 3.5",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 3.5",
        "Test Case Input:\n1 2 a"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\", \"BufferedReader br = new BufferedReader(isr);\", \"String str=\"\";\" and \"int[] a=new int[3];\" are covered. \n5. try block Execution : Since the try block does not contain any input/output operations, it will be executed. Statement \"try {\" is covered. \n6. while loop Execution : The while loop will be executed until an IOException occurs or the program is exited. Statement \"while(true){\" is covered.\n7. User Input and Tokenization : User input statements are always executed. Statements \"str = br.readLine();\", \"StringTokenizer st=new StringTokenizer(str,\" \");\", \"int i=0;\", \"while (st.hasMoreTokens()) {\" and \"a[i]=Integer.parseInt(st.nextToken());\" will be executed. \n8. If - Else condition : Since the values of a[0], a[1], and a[2] are not provided in the test case, the if condition 'a[0] < a[1] && a[1] < a[2]' is not satisfied. Statement 'if(a[0] < a[1] && a[1] < a[2]){' is not covered. The else condition is satisfied so statement 'System.out.print(\"NO\");' is covered. \n9. Output : Since the if condition is not satisfied, the output statement 'System.out.print(\"NO\");' is covered. \n10. Resetting String : Since the while loop is executed again, statement \"str=\"\";\" is covered. \n11. catch block Execution : Since an IOException is not thrown in the test case, the catch block will not be executed. \n12. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>         \twhile(true){\n>         \t\tstr = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>     \t\t     while (st.hasMoreTokens()) {\n>     \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n>     \t\t    \t i++;\n>     \t\t     }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n!                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>         \t}\n>         } catch(IOException e) {\n>         \tSystem.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 2 3 4",
      "test_mutations": [
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 3 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 3 4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\" and \"import java.io.IOException;\" will be covered.\n2. Main class declaration: always executed. Statement \"class Main {\" is covered. \n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered. \n4. InputStreamReader and BufferedReader Initialization: always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\" and \"BufferedReader br = new BufferedReader(isr);\" are covered.\n5. String and int array initialization: always executed. Statements \"String str = \"\";\" and \"int[] a = new int[3];\" are covered. \n6. try-catch block: always executed. Statement \"try {\" is covered. \n7. while loop execution: Since there is no condition to break the while loop, it will run indefinitely. Statement \"while(true) {\" is covered. \n8. Read input from user: always executed. Statement \"str = br.readLine();\" is covered. \n9. Tokenizing the input: always executed. Statement \"StringTokenizer st = new StringTokenizer(str, \" \");\" is covered. \n10. Loop through tokens: always executed. Statement \"while (st.hasMoreTokens()) {\" is covered. \n11. Parse tokens to integers and assign to array: always executed. Statements \"a[i] = Integer.parseInt(st.nextToken());\" and \"i++;\" are covered. \n12. If-else condition: Since the condition is always true, both the if and else blocks will be executed. Statements \"if (a[0] < a[1] && a[1] < a[2]) {\" and \"System.out.print(\"YES\");\" are covered. Statements \"else {\" and \"System.out.print(\"NO\");\" are also covered. \n13. Resetting the string: always executed. Statement \"str = \"\";\" is covered. \n14. Catching IOException: always executed. Statement \"} catch(IOException e) {\" is covered. \n15. Exiting the program: always executed. Statement \"System.exit(0);\" is covered. \n16. Closing brackets: always executed. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is: \n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str = \"\";\n>         int[] a = new int[3];\n>         try {\n>             while(true) {\n>                 str = br.readLine();\n>                 StringTokenizer st = new StringTokenizer(str, \" \");\n>                 int i = 0;\n>                 while (st.hasMoreTokens()) {\n>                     a[i] = Integer.parseInt(st.nextToken());\n>                     i++;\n>                 }\n>                 i = 0;\n>                 if (a[0] < a[1] && a[1] < a[2]) {\n>                     System.out.print(\"YES\");\n>                 } else {\n>                     System.out.print(\"NO\");\n>                 }\n>                 str = \"\";\n>             }\n>         } catch(IOException e) {\n>             System.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 2 a",
      "test_mutations": [
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 three",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 3a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n4 3.5 2",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\" and \"import java.io.IOException;\" are covered.\n2. Main class declaration: always executed. Statement \"class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. InputStreamReader and BufferedReader initialization: always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\" and \"BufferedReader br = new BufferedReader(isr);\" are covered.\n5. Variable declaration and initialization: always executed. Statement \"String str=\"\";\" is covered. Statement \"int[] a=new int[3];\" is covered.\n6. try-catch block: always executed. Statements \"try {\" and \"} catch(IOException e) {\" are covered.\n7. while loop: always executed. Statement \"while(true) {\" is covered.\n8. Reading input: always executed. Statement \"str = br.readLine();\" is covered.\n9. StringTokenizer and array population: always executed. Statement \"StringTokenizer st=new StringTokenizer(str,\" \");\" is covered. Statement \"while (st.hasMoreTokens()) {\" is covered. Statement \"a[i]=Integer.parseInt(st.nextToken());\" is covered. Statement \"i++;\" is covered.\n10. if-else condition: always executed. Statement \"if(a[0] < a[1] && a[1] < a[2]) {\" is covered. Statement \"System.out.print(\"YES\");\" is covered. Statement \"} else {\" is covered. Statement \"System.out.print(\"NO\");\" is covered.\n11. Resetting string: always executed. Statement \"str=\"\";\" is covered.\n12. Closing brackets: always executed. Statements \"}\" and \"}\" are covered.\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>             while(true){\n>                 str = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>                  while (st.hasMoreTokens()) {\n>                      a[i]=Integer.parseInt(st.nextToken());\n>                      i++;\n>                  }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>             }\n>         } catch(IOException e) {\n>             System.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 a 3",
      "test_mutations": [
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 3.5",
        "Test Case Input:\n1 2 3.5",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\na 2 3",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\" will be covered.\n\n2. Main class declaration: always executed. Statement \"class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. InputStreamReader and BufferedReader initialization: always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\" and \"BufferedReader br = new BufferedReader(isr);\" are covered.\n\n5. String initialization: always executed. Statement \"String str = \"\";\" is covered.\n\n6. Array Initialization: always executed. Statement \"int[] a = new int[3];\" is covered.\n\n7. try-catch block: always executed. Statement \"try {\" is covered.\n\n8. while loop: always executed. Statement \"while(true) {\" is covered.\n\n9. Reading input line: always executed. Statement \"str = br.readLine();\" is covered.\n\n10. StringTokenizer initialization and parsing: always executed. Statements \"StringTokenizer st = new StringTokenizer(str, \" \");\", \"int i = 0;\", \"while (st.hasMoreTokens()) {\" are covered.\n\n11. Token parsing and array assignment: always executed. Statements \"a[i] = Integer.parseInt(st.nextToken());\", \"i++;\" are covered.\n\n12. if-else condition: always executed. Statements \"if (a[0] < a[1] && a[1] < a[2]) {\" and \"System.out.print(\"YES\");\" are covered. The else condition is not covered.\n\n13. Loop execution and output: always executed. Statements \"System.out.print(\"NO\");\" and \"str = \"\";\" are covered.\n\n14. Catch block: always executed. Statements \"} catch(IOException e) {\" and \"System.exit(0);\" are covered.\n\n15. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> \n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str = \"\";\n>         int[] a = new int[3];\n>         try {\n>             while (true) {\n>                 str = br.readLine();\n>                 StringTokenizer st = new StringTokenizer(str, \" \");\n>                 int i = 0;\n>                 while (st.hasMoreTokens()) {\n>                     a[i] = Integer.parseInt(st.nextToken());\n>                     i++;\n>                 }\n>                 i = 0;\n>                 if (a[0] < a[1] && a[1] < a[2]) {\n>                     System.out.print(\"YES\");\n>                 } else {\n>                     System.out.print(\"NO\");\n>                 }\n>                 str = \"\";\n>             }\n>         } catch (IOException e) {\n>             System.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5 a 3",
      "test_mutations": [
        "Test Case Input:\n1 2 3 4",
        "Test Case Input:\n1 2 3a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2.5 3",
        "Test Case Input:\n1 2 3 4",
        "Test Case Input:\n1 2 3 a",
        "Test Case Input:\n5 2 3",
        "Test Case Input:\n5 4 3",
        "Test Case Input:\n5 a 3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"class Main {\" is covered.\n3. Main method declaration : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\", \"BufferedReader br = new BufferedReader(isr);\" are covered.\n5. While loop Execution : Since there is no break statement, the while loop will execute indefinitely until an exception occurs. Statement \"while(true) {\" is covered.\n6. Read Input : The input is read as a string. Statement \"str = br.readLine();\" is covered.\n7. Tokenize Input : The input string is tokenized using a space delimiter. Statement \"StringTokenizer st=new StringTokenizer(str,\" \");\" is covered.\n8. Store Tokens : The tokens are stored in an integer array. Statement \"a[i]=Integer.parseInt(st.nextToken());\" is covered.\n9. Compare Array Elements : The elements of the array are compared using relational operators. Statement \"if(a[0] < a[1] && a[1] < a[2]) {\" is covered.\n10. Print Output : The output is printed based on the result of the comparison. Statements \"System.out.print(\"YES\");\" and \"System.out.print(\"NO\");\" are covered.\n11. Clear String : The string variable is cleared for the next iteration of the loop. Statement \"str = \"\";\" is covered.\n12. Catch IOException : If an IOException occurs during input reading, the program will exit. Statement \"catch(IOException e) {\" is covered.\n13. Close Brackets : always covered.\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>         \twhile(true){\n>         \t\tstr = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>     \t\t     while (st.hasMoreTokens()) {\n>     \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n>     \t\t    \t i++;\n>     \t\t     }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>         \t}\n>         } catch(IOException e) {\n>         \tSystem.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 2 3",
      "test_mutations": [
        "Test Case Input:\n0 0 0",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 3.5",
        "Test Case Input:\n1 2 3 4",
        "Test Case Input:\n1 2 3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\" will be covered.\n\n2. Main class declaration: always executed. Statement \"class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. InputStreamReader and BufferedReader initialization: always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\" and \"BufferedReader br = new BufferedReader(isr);\" are covered.\n\n5. String variable initialization: always executed. Statement \"String str=\"\";\" is covered.\n\n6. Integer array initialization: always executed. Statement \"int[] a=new int[3];\" is covered.\n\n7. try-catch block: always executed. Statement \"try {\" is covered.\n\n8. while loop: The while loop condition \"true\" is always true, so the loop block will be executed indefinitely. Statement \"while(true) {\" is covered.\n\n9. Reading input string: The code reads a line of input string using the BufferedReader and stores it in the variable \"str\". Statement \"str = br.readLine();\" is covered.\n\n10. Tokenizing the input string: The code tokenizes the input string using the StringTokenizer class. Statement \"StringTokenizer st=new StringTokenizer(str,\" \");\" is covered.\n\n11. Parsing tokens and storing in array: The code parses the tokens obtained from the input string and stores them in the array \"a\". Statements inside the nested while loop \"while (st.hasMoreTokens()) { a[i]=Integer.parseInt(st.nextToken()); i++; }\" are covered.\n\n12. If-else condition: The code checks if the values in the array \"a\" satisfy the condition \"a[0] < a[1] && a[1] < a[2]\". If true, it prints \"YES\", otherwise it prints \"NO\". The if condition is satisfied, so statement \"if(a[0] < a[1] && a[1] < a[2]) {\" is covered.\n\n13. Printing \"YES\" or \"NO\": The code prints \"YES\" if the condition in the if statement is true, otherwise it prints \"NO\". Statements \"System.out.print(\"YES\");\" and \"System.out.print(\"NO\");\" are covered.\n\n14. Resetting the input string: The code resets the input string to an empty string. Statement \"str=\"\";\" is covered.\n\n15. catch block: The catch block catches any IOException that might occur during the execution of the code. The catch block is executed when an IOException occurs. Statement \"catch(IOException e) {\" is covered.\n\n16. System.exit(0): The code exits the program with a status code of 0 if an IOException occurs. Statement \"System.exit(0);\" is covered.\n\n17. Closing brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>         \twhile(true){\n>         \t\tstr = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>     \t\t     while (st.hasMoreTokens()) {\n>     \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n>     \t\t    \t i++;\n>     \t\t     }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>         \t}\n>         } catch(IOException e) {\n>         \tSystem.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 2.5 3",
      "test_mutations": [
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2.5 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2.5 3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\" and \"import java.io.IOException;\" will be covered. \n2. Class Declaration : always executed. Statement \"class Main {\" is covered. \n3. Main method declaration : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. InputStreamReader and BufferedReader Initialization : always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\" and \"BufferedReader br = new BufferedReader(isr);\" are covered. \n5. String variable initialization : always executed. Statement \"String str=\"\";\" is covered. \n6. Integer array initialization : always executed. Statement \"int[] a=new int[3];\" is covered.\n7. Try-catch block : always executed. Statement \"try {\" is covered. \n8. while loop execution : Statements within the while loop will be executed as long as the condition is true. \n9. Reading input from user : always executed. Statement \"str = br.readLine();\" is covered. \n10. Tokenizing input string : always executed. Statement \"StringTokenizer st=new StringTokenizer(str,\" \");\" is covered. \n11. Checking the condition and printing output : Since the condition is satisfied (a[0] < a[1] and a[1] < a[2]), the if block is executed. Statement \"System.out.print(\"YES\");\" is covered. If the condition is not satisfied, the else block is executed. Statement \"System.out.print(\"NO\");\" is covered. \n12. Resetting string variable : always executed. Statement \"str=\"\";\" is covered. \n13. Closing brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>         \twhile(true){\n>         \t\tstr = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>     \t\t     while (st.hasMoreTokens()) {\n>     \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n>     \t\t    \t i++;\n>     \t\t     }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>         \t}\n>         } catch(IOException e) {\n>         \tSystem.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n1 2 a",
      "test_mutations": [
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 a 3",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a",
        "Test Case Input:\n1 2 a"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.util.StringTokenizer;\" will be covered. \n2. Class Declaration : always executed. Statement \"class Main {\" is covered. \n3. Main method declaration : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"InputStreamReader isr = new InputStreamReader(System.in);\", \"BufferedReader br = new BufferedReader(isr);\", \"String str=\"\";\", \"int[] a=new int[3];\" are covered. \n5. While loop Execution : The while loop will execute infinitely until there is an IOException. Statement \"while(true){\" is covered. \n6. User Input and Tokenization : Since the input is \"1 2 a\", the first iteration of the while loop will execute the following statements - \n   a. \"str = br.readLine();\" - covered\n   b. \"StringTokenizer st=new StringTokenizer(str,\" \");\" - covered\n   c. \"int i=0;\" - covered\n   d. \"while (st.hasMoreTokens()) {\" - covered\n   e. \"a[i]=Integer.parseInt(st.nextToken());\" - covered\n   f. \"i++;\" - covered\n   g. \"i=0;\" - covered\n7. If - Else condition : The values of a[0] = 1, a[1] = 2, and a[2] = a. Since a[0] < a[1] and a[1] < a[2] is false, the else condition will be executed. Statement \"System.out.print(\"NO\");\" is covered. \n8. Continue while loop : Since the while loop is infinite, it will continue to execute. Statement \"str=\"\";\" is covered. \n9. Catch block : Since there is no IOException, the catch block will not be executed. \n10. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.util.StringTokenizer;\n> class Main {\n>     public static void main(String[] args) {\n>         InputStreamReader isr = new InputStreamReader(System.in);\n>         BufferedReader br = new BufferedReader(isr);\n>         String str=\"\";\n>         int[] a=new int[3];\n>         try {\n>             while(true){\n>                 str = br.readLine();\n>                 StringTokenizer st=new StringTokenizer(str,\" \");\n>                 int i=0;\n>                  while (st.hasMoreTokens()) {\n>                      a[i]=Integer.parseInt(st.nextToken());\n>                      i++;\n>                  }i=0;\n>                 if(a[0] < a[1] && a[1] < a[2]){\n>                 System.out.print(\"YES\");\n>                 }else{\n>                 System.out.print(\"NO\");\n>                 }\n>                 str=\"\";\n>             }\n>         } catch(IOException e) {\n>             System.exit(0);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}