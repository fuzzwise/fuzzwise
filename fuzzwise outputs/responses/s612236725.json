{
  "submission_id": "s612236725",
  "cycles": [
    {
      "test_case": "Test Case Input:\n3\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
      "test_mutations": [
        "Test Case Input:\n3\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5",
        "Test Case Input:\n1\n1\n1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "Test Case Input:\n2\n5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110 115 120 125 130 135\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n\nPREVIOUSLY GENERATED TEST CASES",
        "Test Case Input:\n5\n1 2 3 4 5\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25",
        "Test Case Input:\n5\n1 2 3 4 5\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25",
        "Test Case Input:\n5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5",
        "Test Case Input:\n5\n1 2 3 4 5\n1 2 3 4 5\n5 4 3 2 1\n2 3 4 5 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1",
        "Test Case Input:\n1\n1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "Test Case Input:\n3\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n    public static void sort(int array[], int array2[], int left, int right){\n        if(left <= right){\n            int p = array[(left + right) >>> 1];\n            int l = left;\n            int r = right;\n            while(l <= r){\n                while (array[l] < p){\n                    l++;\n                }\n                while (array[r] > p){\n                    r--;\n                }\n                if (l <= r){\n                    int tmp = array[l];\n                    array[l] = array[r];\n                    array[r] = tmp;\n                    int tmp2 = array2[l];\n                    array2[l] = array2[r];\n                    array2[r] = tmp2;\n                    l++;\n                    r--;\n                }\n            }\n            Main.sort(array, array2, left, r);\n            Main.sort(array, array2, l, right);\n        }\n    }\n    public static void main(String args[]){\n        Scanner stdIn = new Scanner(System.in);\n        int n = stdIn.nextInt();\n        int c[] = new int[26];\n        int s[][] = new int[n][26];\n        int ind[] = new int[26];\n        for(int i = 0; i < 26; i++){\n            c[i] = stdIn.nextInt();\n            ind[i] = i;\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < 26; j++){\n                s[i][j] = stdIn.nextInt();\n            }\n        }\n        for(int i = 0; i < n - 26; i++){\n            int max = 0;\n            int index = 0;\n            for(int j = 0; j < 26; j++){\n                if(s[i][j] > max){\n                    max = s[i][j];\n                    index = j;\n                }\n            }\n            System.out.println(index + 1);\n        }\n        Main.sort(c, ind, 0, n - 1);\n        for(int i = 26; i < 0; i--){\n            System.out.println(ind[i]);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method decalarion : always executed. Statement \"public static void main(String args[]) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner stdIn = new Scanner(System.in);\", \"int n = stdIn.nextInt();\", \"int c[] = new int[26];\", \"int s[][] = new int[n][26];\", \"int ind[] = new int[26];\" are covered.\n5. For loop Execution 1 : Since n is 3, the for loop condition (i < n - 26) is false, and the loop block will not be executed. Statement \"for(int i = 0; i < n - 26; i++) {\" is not covered.\n6. Function call sort() : The function sort() will be executed with the given arguments. Statement \"Main.sort(c, ind, 0, n - 1);\" is covered.\n7. Sort method Declaration and Execution : method declaration is always executed. \"public static void sort(int array[], int array2[], int left, int right) {\" is covered. The sort method will be executed recursively.\n8. While loop Execution 1 : The while loop condition (l <= r) is false, and the loop block will not be executed. Statement \"while(l <= r) {\" is not covered.\n9. Sort method Recursive Calls : The sort method will be called recursively twice. Statement \"Main.sort(array, array2, left, r);\" and \"Main.sort(array, array2, l, right);\" are covered.\n10. For loop Execution 2 : Since i is less than n, the for loop condition (i < n) is true, and the loop block will be executed. Statement \"for(int i = 0; i < n; i++) {\" is covered.\n11. For loop Execution 3 : Since j is less than 26, the for loop condition (j < 26) is true, and the loop block will be executed. Statement \"for(int j = 0; j < 26; j++) {\" is covered.\n12. For loop Execution 4 : Since i is less than n - 26, the for loop condition (i < n - 26) is false, and the loop block will not be executed. Statement \"for(int i = 0; i < n - 26; i++) {\" is not covered.\n13. Function call System.out.println() : The function System.out.println() will be executed with the given arguments. Statement \"System.out.println(index + 1);\" is covered.\n14. For loop Execution 5 : Since i is less than 26, the for loop condition (i < 26) is true, and the loop block will be executed. Statement \"for(int i = 26; i < 0; i--) {\" is covered.\n15. Function call System.out.println() : The function System.out.println() will be executed with the given arguments. Statement \"System.out.println(ind[i]);\" is covered.\n16. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.util.*;\n> public class Main {\n>     public static void sort(int array[], int array2[], int left, int right){\n>         if(left <= right){\n>             int p = array[(left + right) >>> 1];\n>             int l = left;\n>             int r = right;\n>             while(l <= r){\n>                 while (array[l] < p){\n>                     l++;\n>                 }\n>                 while (array[r] > p){\n>                     r--;\n>                 }\n>                 if (l <= r){\n>                     int tmp = array[l];\n>                     array[l] = array[r];\n>                     array[r] = tmp;\n>                     int tmp2 = array2[l];\n>                     array2[l] = array2[r];\n>                     array2[r] = tmp2;\n>                     l++;\n>                     r--;\n>                 }\n>             }\n>             Main.sort(array, array2, left, r);\n>             Main.sort(array, array2, l, right);\n>         }\n>     }\n>     public static void main(String args[]){\n>         Scanner stdIn = new Scanner(System.in);\n>         int n = stdIn.nextInt();\n>         int c[] = new int[26];\n>         int s[][] = new int[n][26];\n>         int ind[] = new int[26];\n>         for(int i = 0; i < 26; i++){\n>             c[i] = stdIn.nextInt();\n>             ind[i] = i;\n>         }\n>         for(int i = 0; i < n; i++){\n>             for(int j = 0; j < 26; j++){\n>                 s[i][j] = stdIn.nextInt();\n>             }\n>         }\n!         for(int i = 0; i < n - 26; i++){\n!             int max = 0;\n!             int index = 0;\n!             for(int j = 0; j < 26; j++){\n!                 if(s[i][j] > max){\n!                     max = s[i][j];\n!                     index = j;\n!                 }\n!             }\n!             System.out.println(index + 1);\n!         }\n>         Main.sort(c, ind, 0, n - 1);\n>         for(int i = 26; i < 0; i--){\n>             System.out.println(ind[i]);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        "!",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\na b c d e f g h i j k l m n o p q r s t u v w x y z\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
      "test_mutations": [
        "Test Case Input:\n3\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n-5\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n0\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\nnull\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n1\na b c d e f g h i j k l m n o p q r s t u v w x y z\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n3\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n3\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n3\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n3\na b c d e f g h i j k l m n o p q r s t u v w x y z\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n    public static void sort(int array[], int array2[], int left, int right){\n        if(left <= right){\n            int p = array[(left + right) >>> 1];\n            int l = left;\n            int r = right;\n            while(l <= r){\n                while (array[l] < p){\n                    l++;\n                }\n                while (array[r] > p){\n                    r--;\n                }\n                if (l <= r){\n                    int tmp = array[l];\n                    array[l] = array[r];\n                    array[r] = tmp;\n                    int tmp2 = array2[l];\n                    array2[l] = array2[r];\n                    array2[r] = tmp2;\n                    l++;\n                    r--;\n                }\n            }\n            Main.sort(array, array2, left, r);\n            Main.sort(array, array2, l, right);\n        }\n    }\n    public static void main(String args[]){\n        Scanner stdIn = new Scanner(System.in);\n        int n = stdIn.nextInt();\n        int c[] = new int[26];\n        int s[][] = new int[n][26];\n        int ind[] = new int[26];\n        for(int i = 0; i < 26; i++){\n            c[i] = stdIn.nextInt();\n            ind[i] = i;\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < 26; j++){\n                s[i][j] = stdIn.nextInt();\n            }\n        }\n        for(int i = 0; i < n - 26; i++){\n            int max = 0;\n            int index = 0;\n            for(int j = 0; j < 26; j++){\n                if(s[i][j] > max){\n                    max = s[i][j];\n                    index = j;\n                }\n            }\n            System.out.println(index + 1);\n        }\n        Main.sort(c, ind, 0, n - 1);\n        for(int i = 26; i < 0; i--){\n            System.out.println(ind[i]);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. sort method Declaration : always executed. Statement \"public static void sort(int array[], int array2[], int left, int right) {\" is covered.\n4. sort method Execution : The sort method will be executed only if the left index is less than or equal to the right index. The values of left and right indices are calculated using bitwise right shift operator and assigned to p, l, and r variables. The while loop inside the sort method will be executed multiple times until l is less than or equal to r. Statements inside the while loop will be executed based on the conditions. \n5. Main method decalarion : always executed. Statement \"public static void main(String args[]) {\" is covered.\n6. User Input and Program Output : always executed. Statements \"Scanner stdIn = new Scanner(System.in);\", \"int n = stdIn.nextInt();\", \"int c[] = new int[26];\", \"int s[][] = new int[n][26];\", \"int ind[] = new int[26];\" are covered.\n7. Loop 1 Execution : The for loop will be executed n times. The loop block will be executed for each iteration. Statements \"for(int i = 0; i < 26; i++){\" and \"c[i] = stdIn.nextInt();\" are covered.\n8. Loop 2 Execution : The outer for loop will be executed n times. The inner for loop will be executed 26 times for each iteration of the outer loop. Statements \"for(int i = 0; i < n; i++){\" and \"for(int j = 0; j < 26; j++){\" are covered. \n9. Loop 3 Execution : The for loop will be executed n-26 times. The loop block will be executed for each iteration. Statements \"for(int i = 0; i < n - 26; i++){\" and \"System.out.println(index + 1);\" are covered.\n10. sort method call in Main method : Statements \"Main.sort(c, ind, 0, n - 1);\" will be executed.\n11. Statements after sort method call in Main method : no statements after the sort method call will be executed since the program exits after sort method call. Statements \"for(int i = 26; i < 0; i--)\" and \"System.out.println(ind[i]);\" are not covered.\n12. Closing Brackets : always covered.\n \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.util.*;\n> public class Main {\n>     public static void sort(int array[], int array2[], int left, int right){\n>         if(left <= right){\n>             int p = array[(left + right) >>> 1];\n>             int l = left;\n>             int r = right;\n>             while(l <= r){\n>                 while (array[l] < p){\n>                     l++;\n>                 }\n>                 while (array[r] > p){\n>                     r--;\n>                 }\n>                 if (l <= r){\n>                     int tmp = array[l];\n>                     array[l] = array[r];\n>                     array[r] = tmp;\n>                     int tmp2 = array2[l];\n>                     array2[l] = array2[r];\n>                     array2[r] = tmp2;\n>                     l++;\n>                     r--;\n>                 }\n>             }\n>             Main.sort(array, array2, left, r);\n>             Main.sort(array, array2, l, right);\n>         }\n>     }\n>     public static void main(String args[]){\n>         Scanner stdIn = new Scanner(System.in);\n>         int n = stdIn.nextInt();\n>         int c[] = new int[26];\n>         int s[][] = new int[n][26];\n>         int ind[] = new int[26];\n>         for(int i = 0; i < 26; i++){\n>             c[i] = stdIn.nextInt();\n>             ind[i] = i;\n>         }\n>         for(int i = 0; i < n; i++){\n>             for(int j = 0; j < 26; j++){\n>                 s[i][j] = stdIn.nextInt();\n>             }\n>         }\n>         for(int i = 0; i < n - 26; i++){\n>             int max = 0;\n>             int index = 0;\n>             for(int j = 0; j < 26; j++){\n>                 if(s[i][j] > max){\n>                     max = s[i][j];\n>                     index = j;\n>                 }\n>             }\n>             System.out.println(index + 1);\n>         }\n>         Main.sort(c, ind, 0, n - 1);\n!         for(int i = 26; i < 0; i--){\n!             System.out.println(ind[i]);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\na b c d e f g h i j k l m n o p q r s t u v w x y z\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
      "test_mutations": [
        "Test Case Input:\n0\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25",
        "Test Case Input:\n3\na b c d e f g h i j k l m n o p q r s t u v w x y z\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n2\n3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n-5\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n0\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n3\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n3\na b c d e f g h i j k l m n o p q r s t u v w x y z\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n3\na b c d e f g h i j k l m n o p q r s t u v w x y z\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n3\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26",
        "Test Case Input:\n3\na b c d e f g h i j k l m n o p q r s t u v w x y z\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n    public static void sort(int array[], int array2[], int left, int right){\n        if(left <= right){\n            int p = array[(left + right) >>> 1];\n            int l = left;\n            int r = right;\n            while(l <= r){\n                while (array[l] < p){\n                    l++;\n                }\n                while (array[r] > p){\n                    r--;\n                }\n                if (l <= r){\n                    int tmp = array[l];\n                    array[l] = array[r];\n                    array[r] = tmp;\n                    int tmp2 = array2[l];\n                    array2[l] = array2[r];\n                    array2[r] = tmp2;\n                    l++;\n                    r--;\n                }\n            }\n            Main.sort(array, array2, left, r);\n            Main.sort(array, array2, l, right);\n        }\n    }\n    public static void main(String args[]){\n        Scanner stdIn = new Scanner(System.in);\n        int n = stdIn.nextInt();\n        int c[] = new int[26];\n        int s[][] = new int[n][26];\n        int ind[] = new int[26];\n        for(int i = 0; i < 26; i++){\n            c[i] = stdIn.nextInt();\n            ind[i] = i;\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < 26; j++){\n                s[i][j] = stdIn.nextInt();\n            }\n        }\n        for(int i = 0; i < n - 26; i++){\n            int max = 0;\n            int index = 0;\n            for(int j = 0; j < 26; j++){\n                if(s[i][j] > max){\n                    max = s[i][j];\n                    index = j;\n                }\n            }\n            System.out.println(index + 1);\n        }\n        Main.sort(c, ind, 0, n - 1);\n        for(int i = 26; i < 0; i--){\n            System.out.println(ind[i]);\n        }\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered. \n2. NumberDivision Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String args[]) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner stdIn = new Scanner(System.in);\", \"int n = stdIn.nextInt();\", \"int c[] = new int[26];\", \"int s[][] = new int[n][26];\", \"int ind[] = new int[26];\" are covered. \n5. Loop 1 - Input : Loop block is executed 3 times based on the test case input value 'n' = 3. Statements \"for(int i = 0; i < 26; i++){\" and \"c[i] = stdIn.nextInt();\", \"ind[i] = i;\" are covered. \n6. Loop 2 - Input : Loop block is executed 3 times based on the test case input value 'n' = 3. Statements \"for(int i = 0; i < n; i++){\" and \"for(int j = 0; j < 26; j++){\" are covered. \n7. Loop 3 - Output : Loop block is executed 3 - 26 = -23 times based on the test case input values. The loop condition \"i < n - 26\" is not satisfied, so the loop block is not executed. \n8. Function call within main method : no function calls within the main method. \n9. Sorting : Sorting is done using the recursive sort method. Since the loop condition of the recursion method \"if(left <= right)\" is not satisfied, the sort method is not executed. \n10. Loop 4 - Output : Loop block is executed 0 times based on the loop condition \"i = 26; i > 0; i--\" which is not satisfied. \n11. Statements after loop in Main method : no statements after the loop will be executed since the loop failed to complete execution. \n12. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.*;\n> public class Main {\n>     public static void sort(int array[], int array2[], int left, int right){\n!         if(left <= right){\n!             int p = array[(left + right) >>> 1];\n!             int l = left;\n!             int r = right;\n!             while(l <= r){\n!                 while (array[l] < p){\n!                     l++;\n!                 }\n!                 while (array[r] > p){\n!                     r--;\n!                 }\n!                 if (l <= r){\n!                     int tmp = array[l];\n!                     array[l] = array[r];\n!                     array[r] = tmp;\n!                     int tmp2 = array2[l];\n!                     array2[l] = array2[r];\n!                     array2[r] = tmp2;\n!                     l++;\n!                     r--;\n!                 }\n!             }\n!             Main.sort(array, array2, left, r);\n!             Main.sort(array, array2, l, right);\n!         }\n>     }\n>     public static void main(String args[]){\n>         Scanner stdIn = new Scanner(System.in);\n>         int n = stdIn.nextInt();\n>         int c[] = new int[26];\n>         int s[][] = new int[n][26];\n>         int ind[] = new int[26];\n>         for(int i = 0; i < 26; i++){\n>             c[i] = stdIn.nextInt();\n>             ind[i] = i;\n>         }\n>         for(int i = 0; i < n; i++){\n>             for(int j = 0; j < 26; j++){\n>                 s[i][j] = stdIn.nextInt();\n>             }\n>         }\n>         for(int i = 0; i < n - 26; i++){\n!             int max = 0;\n!             int index = 0;\n!             for(int j = 0; j < 26; j++){\n!                 if(s[i][j] > max){\n!                     max = s[i][j];\n!                     index = j;\n!                 }\n!             }\n!             System.out.println(index + 1);\n>         }\n>         Main.sort(c, ind, 0, n - 1);\n>         for(int i = 26; i < 0; i--){\n!             System.out.println(ind[i]);\n>         }\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}