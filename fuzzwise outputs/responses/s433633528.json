{
  "submission_id": "s433633528",
  "cycles": [
    {
      "test_case": "Test Case Input:\n0",
      "test_mutations": [
        "Test Case Input:\n10",
        "Test Case Input:\n10",
        "Test Case Input:\n10",
        "Test Case Input:\n0",
        "Test Case Input:\n100",
        "Test Case Input:\n10",
        "Test Case Input:\n1",
        "Test Case Input:\n1",
        "Test Case Input:\n10",
        "Test Case Input:\n0"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n\t\tint nLen = String.valueOf(n).length();\n\t\tfor (int i = 1; i < nLen; i++) {\n\t\t\tans = ans + 9;\n\t\t}\n\t\tif ( ans == -1) {\n\t\t\tans = 0;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
      "covered_code": "1. Import statements: Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n2. Main class declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String args[]) {\" is covered.\n4. User Input and Program Output: always executed. Statement \"Scanner scan = new Scanner(System.in);\" is covered.\n5. Variable initialization: always executed. Statements \"int n = scan.nextInt();\" and \"int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\" are covered.\n6. Calculation in for loop: If the input number is 0, the for loop will not be executed. If the input number is non-zero, the for loop will be executed nLen-1 times. The condition \"int i = 1; i < nLen; i++\" will be covered nLen-1 times. The statement inside the for loop \"ans = ans + 9;\" will also be covered nLen-1 times.\n7. If condition: If ans is -1, the if condition \"if ( ans == -1)\" will be satisfied and the statement \"ans = 0;\" will be covered. Otherwise, the else condition is executed. The else condition is always executed. The statement \"System.out.println(ans);\" is covered.\n8. Closing brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.Scanner;\n> public class Main {\n> \tpublic static void main(String args[]) {\n> \t\tScanner scan = new Scanner(System.in);\n> \t\tint n = scan.nextInt();\n> \t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n> \t\tint nLen = String.valueOf(n).length();\n> \t\tfor (int i = 1; i < nLen; i++) {\n> \t\t\tans = ans + 9;\n> \t\t}\n> \t\tif ( ans == -1) {\n> \t\t\tans = 0;\n> \t\t}\n> \t\tSystem.out.println(ans);\n> \t}\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\nabc",
      "test_mutations": [
        "Test Case Input:\n\"abc\"",
        "Test Case Input:\n\"abc\"",
        "Test Case Input:\n\"abc\"",
        "Test Case Input:\n-1",
        "Test Case Input:\n\"abc\"",
        "Test Case Input:\nabc",
        "Test Case Input:\n\"abc\"",
        "Test Case Input:\n\"abc\"",
        "Test Case Input:\n\"abc\"",
        "Test Case Input:\n\"abc\""
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n\t\tint nLen = String.valueOf(n).length();\n\t\tfor (int i = 1; i < nLen; i++) {\n\t\t\tans = ans + 9;\n\t\t}\n\t\tif ( ans == -1) {\n\t\t\tans = 0;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements: Import statements are always executed. The statement \"import java.util.Scanner;\" will be covered.\n2. Main Class Declaration: Always executed. The statement \"public class Main {\" is covered.\n3. Main method declaration: Always executed. The statement \"public static void main(String args[]) {\" is covered.\n4. User Input and Program Output: Always executed. The statement \"Scanner scan = new Scanner(System.in);\" is covered.\n5. Variable Declarations and Assignments: Always executed. The statements \"int n = scan.nextInt();\", \"int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\", and \"int nLen = String.valueOf(n).length();\" are covered.\n6. For loop execution: Since nLen is 3, the for loop condition (i < nLen) is true, and the loop block will be executed. The statement \"for (int i = 1; i < nLen; i++) {\" is covered.\n7. For loop contents: The for loop block will be executed once. The statement \"ans = ans + 9;\" is covered.\n8. If condition: Since ans is not -1, the if condition 'ans == -1' is not satisfied. The statement \"if ( ans == -1) {\" is not covered. The else block is not present.\n9. Program Output: The statement \"System.out.println(ans);\" is covered.\n10. Closing Brackets: Always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.Scanner;\n> public class Main {\n>     public static void main(String args[]) {\n>         Scanner scan = new Scanner(System.in);\n>         int n = scan.nextInt();\n>         int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n>         int nLen = String.valueOf(n).length();\n>         for (int i = 1; i < nLen; i++) {\n>             ans = ans + 9;\n>         }\n!         if ( ans == -1) {\n>             ans = 0;\n!         }\n>         System.out.println(ans);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-10",
      "test_mutations": [
        "Test Case Input:\n12",
        "Test Case Input:\n-10",
        "Test Case Input:\n-5",
        "Test Case Input:\n-1",
        "Test Case Input:\n-10",
        "Test Case Input:\n-1",
        "Test Case Input:\nnull",
        "Test Case Input:\n1.5",
        "Test Case Input:\n-1",
        "Test Case Input:\n-10"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n\t\tint nLen = String.valueOf(n).length();\n\t\tfor (int i = 1; i < nLen; i++) {\n\t\t\tans = ans + 9;\n\t\t}\n\t\tif ( ans == -1) {\n\t\t\tans = 0;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n1. Import statements: Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n2. Main class declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String args[]) {\" is covered.\n4. User input and variable assignment: always executed. Statements \"Scanner scan = new Scanner(System.in);\", \"int n = scan.nextInt();\", and \"int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\" are covered.\n5. Variable assignment and loop execution: the loop condition (i < nLen) is true since nLen is 2. The loop block will be executed. Statement \"for (int i = 1; i < nLen; i++) {\" is covered.\n6. Loop contents: the loop block will be executed once. Statement \"ans = ans + 9;\" is covered.\n7. If condition: since ans is not equal to -1, the if condition 'ans == -1' is not satisfied. Statement \"if ( ans == -1) {\" is not covered. The else condition is not present.\n8. Print result: always executed. Statement \"System.out.println(ans);\" is covered.\n9. Closing brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.Scanner;\n> public class Main {\n>     public static void main(String args[]) {\n>         Scanner scan = new Scanner(System.in);\n>         int n = scan.nextInt();\n>         int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n>         int nLen = String.valueOf(n).length();\n>         for (int i = 1; i < nLen; i++) {\n>             ans = ans + 9;\n>         }\n!         if ( ans == -1) {\n>             ans = 0;\n>         }\n>         System.out.println(ans);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\nabc",
      "test_mutations": [
        "Test Case Input:\nnull",
        "Test Case Input:\nTest Case Input:\nTest Case Input:\nTest Case Input:\n0\nabc\n-10",
        "Test Case Input:\n-1",
        "Test Case Input:\n10",
        "Test Case Input:\nnull",
        "Test Case Input:\n10",
        "Test Case Input:\n10",
        "Test Case Input:\n-2",
        "Test Case Input:\n0",
        "Test Case Input:\nabc"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n\t\tint nLen = String.valueOf(n).length();\n\t\tfor (int i = 1; i < nLen; i++) {\n\t\t\tans = ans + 9;\n\t\t}\n\t\tif ( ans == -1) {\n\t\t\tans = 0;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner scan = new Scanner(System.in);\", \"int n = scan.nextInt();\" and \"System.out.println(ans);\" are covered. \n5. Calculation of ans : Since the input is invalid (non-numeric), the line \"int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\" will not be executed. \n6. Calculation of nLen : Since the input is invalid (non-numeric), the line \"int nLen = String.valueOf(n).length();\" will not be executed. \n7. For loop Execution : Since the input is invalid (non-numeric), the for loop condition (i < nLen) is not satisfied, and the loop block will not be executed. Statement \"for (int i = 1; i < nLen; i++) {\" will not be covered. \n8. If condition : Since the input is invalid (non-numeric), the if condition 'ans == -1' is not satisfied. Statement 'if ( ans == -1) {' will not be covered. The else condition will not be executed since the if condition is not satisfied. \n9. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.Scanner;\n> public class Main {\n> \tpublic static void main(String args[]) {\n> \t\tScanner scan = new Scanner(System.in);\n> \t\tint n = scan.nextInt();\n! \t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n! \t\tint nLen = String.valueOf(n).length();\n! \t\tfor (int i = 1; i < nLen; i++) {\n! \t\t\tans = ans + 9;\n> \t\t}\n> \t\tif ( ans == -1) {\n> \t\t\tans = 0;\n> \t\t}\n> \t\tSystem.out.println(ans);\n> \t}\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\nabc",
      "test_mutations": [
        "Test Case Input:\n1.5",
        "Test Case Input:\n0",
        "Test Case Input:\nabc",
        "Test Case Input:\nabc",
        "Test Case Input:\n-10",
        "Test Case Input:\nxyz",
        "Test Case Input:\nabc",
        "Test Case Input:\n-10",
        "Test Case Input:\n-10",
        "Test Case Input:\nabc"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n\t\tint nLen = String.valueOf(n).length();\n\t\tfor (int i = 1; i < nLen; i++) {\n\t\t\tans = ans + 9;\n\t\t}\n\t\tif ( ans == -1) {\n\t\t\tans = 0;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner scan = new Scanner(System.in);\", \"int n = scan.nextInt();\" and \"System.out.println(ans);\" are covered.\n5. Integer Parsing and Substring : always executed. Statements \"int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\" and \"int nLen = String.valueOf(n).length();\" are covered.\n6. For loop Execution : Since nLen is 1, the for loop condition (i < nLen) is false, and the loop block will not be executed. Statement \"for (int i = 1; i < nLen; i++) {\" is not covered.\n7. If condition : Since ans is not equal to -1, the if condition 'ans == -1' is not satisfied. Statement 'if ( ans == -1) {' is not covered. The else condition is not present, so there are no statements covered in the else block.\n8. Print ans : The value of ans will be printed. Statement \"System.out.println(ans);\" is covered.\n9. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.util.Scanner;\n> public class Main {\n>     public static void main(String args[]) {\n>         Scanner scan = new Scanner(System.in);\n>         int n = scan.nextInt();\n>         int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n>         int nLen = String.valueOf(n).length();\n> !         for (int i = 1; i < nLen; i++) {\n> !             ans = ans + 9;\n>         }\n> !         if ( ans == -1) {\n> !             ans = 0;\n>         }\n>         System.out.println(ans);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\nnull",
      "test_mutations": [
        "Test Case Input:\n0",
        "Test Case Input:\n-10",
        "Test Case Input:\nnull",
        "Test Case Input:\nabc",
        "Test Case Input:\nnull",
        "Test Case Input:\nabc",
        "Test Case Input:\n-5",
        "Test Case Input:\n-1",
        "Test Case Input:\nnull",
        "Test Case Input:\nnull"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n\t\tint nLen = String.valueOf(n).length();\n\t\tfor (int i = 1; i < nLen; i++) {\n\t\t\tans = ans + 9;\n\t\t}\n\t\tif ( ans == -1) {\n\t\t\tans = 0;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n2. Main class declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User input and program output: always executed. Statement \"Scanner scan = new Scanner(System.in);\" is covered. Statement \"int n = scan.nextInt();\" is covered. Statement \"System.out.println(ans);\" is covered.\n5. Calculation of ans variable: always executed. Statement \"int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\" is covered.\n6. Calculation of nLen variable: always executed. Statement \"int nLen = String.valueOf(n).length();\" is covered.\n7. For loop execution: Since nLen is not equal to 1, the for loop condition (i < nLen) is true, and the loop block will be executed. Statement \"for (int i = 1; i < nLen; i++) {\" is covered.\n8. For loop contents: always executed. Statement \"ans = ans + 9;\" is covered.\n9. If condition: Since ans is not equal to -1, the if condition (ans == -1) is not satisfied. Statement \"if (ans == -1) {\" is not covered.\n10. Statements after if condition: Since the if condition is not satisfied, the else block will be executed. Statement \"ans = 0;\" is covered.\n11. Closing brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.Scanner;\n> public class Main {\n>     public static void main(String args[]) {\n>         Scanner scan = new Scanner(System.in);\n>         int n = scan.nextInt();\n>         int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n>         int nLen = String.valueOf(n).length();\n>         for (int i = 1; i < nLen; i++) {\n>             ans = ans + 9;\n>         }\n>         if (ans == -1) {\n!             ans = 0;\n>         }\n>         System.out.println(ans);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0",
      "test_mutations": [
        "Test Case Input:\nabc",
        "Test Case Input:\nabc",
        "Test Case Input:\n-10",
        "Test Case Input:\n0",
        "Test Case Input:\n10",
        "Test Case Input:\n-5",
        "Test Case Input:\n10",
        "Test Case Input:\n\"abc\"",
        "Test Case Input:\n-10",
        "Test Case Input:\n0"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n\t\tint nLen = String.valueOf(n).length();\n\t\tfor (int i = 1; i < nLen; i++) {\n\t\t\tans = ans + 9;\n\t\t}\n\t\tif ( ans == -1) {\n\t\t\tans = 0;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input : always executed. Statement \"Scanner scan = new Scanner(System.in);\" is covered. \n5. Calculation of ans : Calculation of ans will always be executed. Statements \"int n = scan.nextInt();\", \"int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\", \"int nLen = String.valueOf(n).length();\" are covered. \n6. For loop Execution : Since nLen is 1, the for loop condition (i < nLen) is false, and the loop block will not be executed. Statement \"for (int i = 1; i < nLen; i++) {\" is not covered. \n7. If condition : Since ans is not -1, the if condition 'ans == -1' is not satisfied. Statement 'if ( ans == -1) {' is not covered. The else condition is not present, so no statements are covered. \n8. Print Statement : always executed. Statement \"System.out.println(ans);\" is covered. \n9. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.Scanner;\n> public class Main {\n> \tpublic static void main(String args[]) {\n> \t\tScanner scan = new Scanner(System.in);\n> \t\tint n = scan.nextInt();\n> \t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n> \t\tint nLen = String.valueOf(n).length();\n! \t\tfor (int i = 1; i < nLen; i++) {\n> \t\t\tans = ans + 9;\n> \t\t}\n! \t\tif ( ans == -1) {\n> \t\t\tans = 0;\n> \t\t}\n> \t\tSystem.out.println(ans);\n> \t}\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3.14",
      "test_mutations": [
        "Test Case Input:\n-10",
        "Test Case Input:\n-1",
        "Test Case Input:\n-1",
        "Test Case Input:\n-5",
        "Test Case Input:\nabc",
        "Test Case Input:\nabc",
        "Test Case Input:\n-10",
        "Test Case Input:\nabc",
        "Test Case Input:\n-5",
        "Test Case Input:\n3.14"
      ],
      "initial_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n\t\tint nLen = String.valueOf(n).length();\n\t\tfor (int i = 1; i < nLen; i++) {\n\t\t\tans = ans + 9;\n\t\t}\n\t\tif ( ans == -1) {\n\t\t\tans = 0;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n\n2. Main method declaration: always executed. Statement \"public static void main(String args[]) {\" is covered.\n\n3. User Input and Program Output: always executed. Statement \"Scanner scan = new Scanner(System.in);\" is covered.\n\n4. Variable declaration and initialization: always executed. Statements \"int n = scan.nextInt();\", \"int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\", and \"int nLen = String.valueOf(n).length();\" are covered.\n\n5. For loop execution: Since nLen is 3, the for loop condition (i < nLen) is true, and the loop block will be executed. Statement \"for (int i = 1; i < nLen; i++) {\" is covered.\n\n6. For loop contents: always executed. Statement \"ans = ans + 9;\" will be executed.\n\n7. If condition: Since ans is not equal to -1, the if condition 'ans == -1' is not satisfied. Statement \"if ( ans == -1) {\" is not covered. \n\n8. Program Output: always executed. Statement \"System.out.println(ans);\" is covered.\n\n9. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.Scanner;\n> public class Main {\n>     public static void main(String args[]) {\n>         Scanner scan = new Scanner(System.in);\n>         int n = scan.nextInt();\n>         int ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n>         int nLen = String.valueOf(n).length();\n>         for (int i = 1; i < nLen; i++) {\n>             ans = ans + 9;\n>         }\n!         if ( ans == -1) {\n>             ans = 0;\n>         }\n>         System.out.println(ans);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}