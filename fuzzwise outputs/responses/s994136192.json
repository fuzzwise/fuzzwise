{
  "submission_id": "s994136192",
  "cycles": [
    {
      "test_case": "Test Case Input:\n5\n2\n11001",
      "test_mutations": [
        "Test Case Input:\n5\n2\n11010",
        "Test Case Input:\n5\n2\n10101",
        "Test Case Input:\n5\n2\n11111",
        "Test Case Input:\n5\n2\n11001",
        "Test Case Input:\n5\n2\n10101",
        "Test Case Input:\n5\n2\n11001",
        "Test Case Input:\n5\n2\n10101",
        "Test Case Input:\n5\n1\n11110",
        "Test Case Input:\n5\n2\n10110",
        "Test Case Input:\n5\n2\n11001"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        char[] s = sc.next().toCharArray();\n        List<Integer> one = new ArrayList<>();\n        List<Integer> zero = new ArrayList<>();\n        int oneCnt = 0;\n        int zeroCnt = 0;\n        if (s[0] == '1') {\n            oneCnt++;\n        } else {\n            zeroCnt++;\n            one.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            if (s[i] == '1') {\n                oneCnt++;\n                if (zeroCnt != 0) {\n                    zero.add(zeroCnt);\n                    zeroCnt = 0;\n                }\n            } else {\n                zeroCnt++;\n                if (oneCnt != 0) {\n                    one.add(oneCnt);\n                    oneCnt = 0;\n                }\n            }\n        }\n        if (oneCnt != 0) {\n            one.add(oneCnt);\n        } else if (zeroCnt != 0) {\n            zero.add(zeroCnt);\n            one.add(0);\n        }\n        if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n            System.out.println(s.length);\n            return;\n        }\n        long oneSum = 0;\n        long zeroSum = 0;\n        for (int i = 0; i < k + 1; i++) {\n            oneSum += one.get(i);\n        }\n        for (int i = 0; i < k; i++) {\n            zeroSum += zero.get(i);\n        }\n        long ans = zeroSum + oneSum;\n        for (int i = 1; i < zero.size() - k + 1; i++) {\n            zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n            oneSum += one.get(i + k) - one.get(i - 1);\n            ans = Math.max(zeroSum + oneSum, ans);\n        }\n        System.out.println(ans);\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\", \"import java.util.Scanner;\" will be covered.\n2. NumberDivision Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int k = sc.nextInt();\", \"char[] s = sc.next().toCharArray();\" are covered.\n5. Variable Declarations and Initializations : always executed. Statements \"List<Integer> one = new ArrayList<>();\", \"List<Integer> zero = new ArrayList<>();\", \"int oneCnt = 0;\", \"int zeroCnt = 0;\" are covered.\n6. If condition and List Manipulation : Since the value of s[0] is 1, the if condition 's[0] == '1'' is satisfied. Statement \"if (s[0] == '1') {\" is covered. Statement \"oneCnt++;\" is covered. \n7. For loop Execution : The for loop iterates from i=1 to i<n, where n=5. The loop block will be executed 4 times. Statement \"for (int i = 1; i < n; i++) {\" will be covered.\n8. If - Else condition : Since the value of s[i] at each iteration is not 1, the else condition 's[i] != '1'' is satisfied. Statement \"else {\" is covered. Statement \"zeroCnt++;\" is covered. Statement \"one.add(oneCnt);\" is not covered.\n9. List Manipulation within For loop : Statements \"zero.add(zeroCnt);\", \"zeroCnt = 0;\" are covered. But, since the value of oneCnt is 0, statement \"one.add(oneCnt);\" is not covered.\n10. If condition and List Manipulation : Since the value of oneCnt is 0, the if condition 'oneCnt != 0' is not satisfied. Statement \"if (oneCnt != 0) {\" is not covered. Statement \"one.add(oneCnt);\" is not covered.\n11. If condition and List Manipulation : Since the value of zeroCnt is not 0, the if condition 'zeroCnt != 0' is satisfied. Statement \"if (zeroCnt != 0) {\" is covered. Statement \"zero.add(zeroCnt);\" is covered.\n12. If - Else condition : Since the value of one is not empty and the size of zero is 1 and the values of one at indices 0 and 1 are both 0, the if condition 'zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0' is satisfied. Statement \"if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\" is covered. Statement \"System.out.println(s.length);\" is covered. Statement \"return;\" is not covered.\n13. Variable Declarations and Initializations : always executed. Statements \"long oneSum = 0;\", \"long zeroSum = 0;\", \"long ans = zeroSum + oneSum;\" are covered.\n14. For loop Execution : The for loop iterates from i=0 to i<k+1, where k=2. The loop block will be executed 3 times. Statement \"for (int i = 0; i < k + 1; i++) {\" will be covered.\n15. Variable Manipulation within For loop : Statements \"oneSum += one.get(i);\" are covered.\n16. For loop Execution : The for loop iterates from i=0 to i<k, where k=2. The loop block will be executed 2 times. Statement \"for (int i = 0; i < k; i++) {\" will be covered.\n17. Variable Manipulation within For loop : Statements \"zeroSum += zero.get(i);\" are covered.\n18. Variable Manipulation and Comparison within For loop : Statements \"ans = zeroSum + oneSum;\" is covered. Statement \"for (int i = 1; i < zero.size() - k + 1; i++) {\" is covered.\n19. Variable Manipulation within For loop : Statements \"zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\", \"oneSum += one.get(i + k) - one.get(i - 1);\", \"ans = Math.max(zeroSum + oneSum, ans);\" are covered.\n20. Program Output : always executed. Statement \"System.out.println(ans);\" is covered.\n21. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> public class Main {\n>     public static void main(String[] args) {\n>         Scanner sc = new Scanner(System.in);\n>         int n = sc.nextInt();\n>         int k = sc.nextInt();\n>         char[] s = sc.next().toCharArray();\n>         List<Integer> one = new ArrayList<>();\n>         List<Integer> zero = new ArrayList<>();\n>         int oneCnt = 0;\n>         int zeroCnt = 0;\n>         if (s[0] == '1') {\n>             oneCnt++;\n>         } else {\n>             zeroCnt++;\n>             one.add(0);\n>         }\n>         for (int i = 1; i < n; i++) {\n>             if (s[i] == '1') {\n>                 oneCnt++;\n>                 if (zeroCnt != 0) {\n>                     zero.add(zeroCnt);\n>                     zeroCnt = 0;\n>                 }\n>             } else {\n>                 zeroCnt++;\n>                 if (oneCnt != 0) {\n>                     one.add(oneCnt);\n>                     oneCnt = 0;\n>                 }\n>             }\n>         }\n>         if (oneCnt != 0) {\n>             one.add(oneCnt);\n>         } else if (zeroCnt != 0) {\n>             zero.add(zeroCnt);\n>             one.add(0);\n>         }\n>         if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n>             System.out.println(s.length);\n>             return;\n>         }\n>         long oneSum = 0;\n>         long zeroSum = 0;\n>         for (int i = 0; i < k + 1; i++) {\n>             oneSum += one.get(i);\n>         }\n>         for (int i = 0; i < k; i++) {\n>             zeroSum += zero.get(i);\n>         }\n>         long ans = zeroSum + oneSum;\n>         for (int i = 1; i < zero.size() - k + 1; i++) {\n>             zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n>             oneSum += one.get(i + k) - one.get(i - 1);\n>             ans = Math.max(zeroSum + oneSum, ans);\n>         }\n>         System.out.println(ans);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n2\n11001",
      "test_mutations": [
        "Test Case Input:\n5\n3\n10011",
        "Test Case Input:\n\"5\" (input value is a string instead of an integer)\n\"2\"\n\"11001\"",
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n\"abc\"\n0\n11001",
        "Test Case Input:\n\"5\"\n\"2\"\n\"11001\"",
        "Test Case Input:\n\"5\"\n\"2\"\n\"11001\"",
        "Test Case Input:\n\"5\"\n\"2\"\n\"11a01\"",
        "Test Case Input:\n3\n3\n101",
        "Test Case Input:\n\"5.5\"\n\"3\"\n\"11001\"",
        "Test Case Input:\n\"5\"\n\"2\"\n\"11001\""
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        char[] s = sc.next().toCharArray();\n        List<Integer> one = new ArrayList<>();\n        List<Integer> zero = new ArrayList<>();\n        int oneCnt = 0;\n        int zeroCnt = 0;\n        if (s[0] == '1') {\n            oneCnt++;\n        } else {\n            zeroCnt++;\n            one.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            if (s[i] == '1') {\n                oneCnt++;\n                if (zeroCnt != 0) {\n                    zero.add(zeroCnt);\n                    zeroCnt = 0;\n                }\n            } else {\n                zeroCnt++;\n                if (oneCnt != 0) {\n                    one.add(oneCnt);\n                    oneCnt = 0;\n                }\n            }\n        }\n        if (oneCnt != 0) {\n            one.add(oneCnt);\n        } else if (zeroCnt != 0) {\n            zero.add(zeroCnt);\n            one.add(0);\n        }\n        if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n            System.out.println(s.length);\n            return;\n        }\n        long oneSum = 0;\n        long zeroSum = 0;\n        for (int i = 0; i < k + 1; i++) {\n            oneSum += one.get(i);\n        }\n        for (int i = 0; i < k; i++) {\n            zeroSum += zero.get(i);\n        }\n        long ans = zeroSum + oneSum;\n        for (int i = 1; i < zero.size() - k + 1; i++) {\n            zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n            oneSum += one.get(i + k) - one.get(i - 1);\n            ans = Math.max(zeroSum + oneSum, ans);\n        }\n        System.out.println(ans);\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\", \"import java.util.Scanner;\" will be covered.\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output: always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int k = sc.nextInt();\", \"char[] s = sc.next().toCharArray();\" are covered.\n5. Variable and List Initialization: always executed. Statements \"List<Integer> one = new ArrayList<>();\", \"List<Integer> zero = new ArrayList<>();\", \"int oneCnt = 0;\", \"int zeroCnt = 0;\" are covered.\n6. If - Else condition: Since the condition \"s[0] == '1'\" is false, the else block will be executed. Statements \"zeroCnt++;\", \"one.add(0);\" are covered.\n7. For loop Execution: The for loop condition (i < n) is true, and the loop block will be executed. Statement \"for (int i = 1; i < n; i++) {\" will be covered.\n8. If - Else condition inside For loop: Since the condition \"s[i] == '1'\" is false, the else block will be executed. Statements \"zeroCnt++;\", \"one.add(oneCnt);\", \"oneCnt = 0;\" are covered.\n9. If - Else condition outside For loop: Since the condition \"oneCnt != 0\" is true, the if block will be executed. Statement \"one.add(oneCnt);\" is covered.\n10. If - Else condition outside For loop: The condition \"zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0\" is false. The else block will be executed. Statements \"zero.add(zeroCnt);\", \"one.add(0);\" are covered.\n11. For loop Execution: The for loop condition (i < k + 1) is true, and the loop block will be executed. Statement \"for (int i = 0; i < k + 1; i++) {\" will be covered.\n12. For loop Execution: The for loop condition (i < k) is true, and the loop block will be executed. Statement \"for (int i = 0; i < k; i++) {\" will be covered.\n13. Calculation of oneSum: Statement \"oneSum += one.get(i);\" is covered.\n14. Calculation of zeroSum: Statement \"zeroSum += zero.get(i);\" is covered.\n15. Calculation of ans: Statement \"long ans = zeroSum + oneSum;\" is covered.\n16. For loop Execution: The for loop condition (i < zero.size() - k + 1) is true, and the loop block will be executed. Statement \"for (int i = 1; i < zero.size() - k + 1; i++) {\" will be covered.\n17. Update zeroSum and oneSum: Statements \"zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\", \"oneSum += one.get(i + k) - one.get(i - 1);\" are covered.\n18. Update ans: Statement \"ans = Math.max(zeroSum + oneSum, ans);\" is covered.\n19. Program Output: Statement \"System.out.println(ans);\" is covered.\n20. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> \n> public class Main {\n>     public static void main(String[] args) {\n>         Scanner sc = new Scanner(System.in);\n>         int n = sc.nextInt();\n>         int k = sc.nextInt();\n>         char[] s = sc.next().toCharArray();\n>         List<Integer> one = new ArrayList<>();\n>         List<Integer> zero = new ArrayList<>();\n>         int oneCnt = 0;\n>         int zeroCnt = 0;\n>         if (s[0] == '1') {\n>         } else {\n>             zeroCnt++;\n>             one.add(0);\n>         }\n>         for (int i = 1; i < n; i++) {\n>             if (s[i] == '1') {\n>                 if (zeroCnt != 0) {\n>                     zero.add(zeroCnt);\n>                     zeroCnt = 0;\n>                 }\n>             } else {\n>                 zeroCnt++;\n>                 if (oneCnt != 0) {\n>                     one.add(oneCnt);\n>                     oneCnt = 0;\n>                 }\n>             }\n>         }\n>         if (oneCnt != 0) {\n>             one.add(oneCnt);\n>         } else if (zeroCnt != 0) {\n>             zero.add(zeroCnt);\n>             one.add(0);\n>         }\n>         if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n>             System.out.println(s.length);\n>             return;\n>         }\n>         long oneSum = 0;\n>         long zeroSum = 0;\n>         for (int i = 0; i < k + 1; i++) {\n>             oneSum += one.get(i);\n>         }\n>         for (int i = 0; i < k; i++) {\n>             zeroSum += zero.get(i);\n>         }\n>         long ans = zeroSum + oneSum;\n>         for (int i = 1; i < zero.size() - k + 1; i++) {\n>             zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n>             oneSum += one.get(i + k) - one.get(i - 1);\n>             ans = Math.max(zeroSum + oneSum, ans);\n>         }\n>         System.out.println(ans);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-5\n2\nabc123",
      "test_mutations": [
        "Test Case Input:\n\"5\" (string)\n\"2\" (string)\n\"11001\" (string)",
        "Test Case Input:\n\"5\"\n\"2\"\n\"11001\"",
        "Test Case Input:\n\"abc\"\n2\n11001",
        "Test Case Input:\n\"5\"\n\"2\"\n\"11001\"",
        "Test Case Input:\n\"5\"\n\"2\"\n\"11001\"",
        "Test Case Input:\n5\n2\n11abc",
        "Test Case Input:\n5\n2\n11a01",
        "Test Case Input:\na\n2\n11001",
        "Test Case Input:\na\n2\n11001",
        "Test Case Input:\n-5\n2\nabc123"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        char[] s = sc.next().toCharArray();\n        List<Integer> one = new ArrayList<>();\n        List<Integer> zero = new ArrayList<>();\n        int oneCnt = 0;\n        int zeroCnt = 0;\n        if (s[0] == '1') {\n            oneCnt++;\n        } else {\n            zeroCnt++;\n            one.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            if (s[i] == '1') {\n                oneCnt++;\n                if (zeroCnt != 0) {\n                    zero.add(zeroCnt);\n                    zeroCnt = 0;\n                }\n            } else {\n                zeroCnt++;\n                if (oneCnt != 0) {\n                    one.add(oneCnt);\n                    oneCnt = 0;\n                }\n            }\n        }\n        if (oneCnt != 0) {\n            one.add(oneCnt);\n        } else if (zeroCnt != 0) {\n            zero.add(zeroCnt);\n            one.add(0);\n        }\n        if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n            System.out.println(s.length);\n            return;\n        }\n        long oneSum = 0;\n        long zeroSum = 0;\n        for (int i = 0; i < k + 1; i++) {\n            oneSum += one.get(i);\n        }\n        for (int i = 0; i < k; i++) {\n            zeroSum += zero.get(i);\n        }\n        long ans = zeroSum + oneSum;\n        for (int i = 1; i < zero.size() - k + 1; i++) {\n            zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n            oneSum += one.get(i + k) - one.get(i - 1);\n            ans = Math.max(zeroSum + oneSum, ans);\n        }\n        System.out.println(ans);\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\", \"import java.util.Scanner;\" will be covered.\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output: always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int k = sc.nextInt();\", \"char[] s = sc.next().toCharArray();\" are covered.\n5. List Declarations: always executed. Statements \"List<Integer> one = new ArrayList<>();\", \"List<Integer> zero = new ArrayList<>();\" are covered.\n6. Variable Declarations and Initializations: always executed. Statements \"int oneCnt = 0;\", \"int zeroCnt = 0;\" are covered.\n7. If condition: Since the value of s[0] is not '1', the if condition 's[0] == '1'' is not satisfied. Statement \"if (s[0] == '1') {\" is covered but statement \"zero.add(0);\" is not covered. The else condition is satisfied so statements \"else {\" and \"one.add(0);\" are covered.\n8. For loop Execution: The for loop condition (i < n) is true, and the loop block will be executed. Statement \"for (int i = 1; i < n; i++) {\" will be covered.\n9. If - Else conditions within For loop: Since the value of s[i] is not '1', the if condition 's[i] == '1'' is not satisfied. Statement \"if (s[i] == '1') {\" is covered but statement \"zeroCnt++;\" is not covered. The else condition is satisfied so statements \"else {\" and \"oneCnt++;\" are covered.\n10. List Modifications within For loop: Statements modifying the lists \"zero\" and \"one\" are executed conditionally. Statements \"zero.add(zeroCnt);\" and \"one.add(oneCnt);\" are covered only when the if conditions are satisfied.\n11. List Modifications after For loop: Statements modifying the lists \"zero\" and \"one\" are executed conditionally. Statements \"one.add(oneCnt);\" and \"zero.add(0);\" are covered only when the if conditions are satisfied.\n12. If condition on Lists: Since the conditions for the if condition 'zero.isEmpty()' and '(zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0)' are not satisfied, the if condition block will not be executed. Statements \"if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\" and \"System.out.println(s.length);\\nreturn;\" are not covered.\n13. Variable Declarations and Initializations: always executed. Statements \"long oneSum = 0;\", \"long zeroSum = 0;\" are covered.\n14. For loop Execution: The for loop condition (i < k + 1) is true, and the loop block will be executed. Statement \"for (int i = 0; i < k + 1; i++) {\" will be covered.\n15. List Access and Summation: Statements accessing the lists \"one\" and \"zero\" and summing their values are executed. Statements \"oneSum += one.get(i);\" and \"zeroSum += zero.get(i);\" are covered.\n16. For loop Execution: The for loop condition (i < k) is true, and the loop block will be executed. Statement \"for (int i = 0; i < k; i++) {\" will be covered.\n17. List Access and Summation: Statements accessing the list \"zero\" and summing its values are executed. Statement \"zeroSum += zero.get(i);\" is covered.\n18. Variable Declaration and Assignment: always executed. Statement \"long ans = zeroSum + oneSum;\" is covered.\n19. For loop Execution: The for loop condition (i < zero.size() - k + 1) is true, and the loop block will be executed. Statement \"for (int i = 1; i < zero.size() - k + 1; i++) {\" will be covered.\n20. List Access and Summation: Statements accessing the lists \"one\" and \"zero\" and summing their values are executed. Statements \"zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\" and \"oneSum += one.get(i + k) - one.get(i - 1);\" are covered.\n21. Maximum Calculation: always executed. Statement \"ans = Math.max(zeroSum + oneSum, ans);\" is covered.\n22. Program Output: always executed. Statement \"System.out.println(ans);\" is covered.\n23. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> public class Main {\n>     public static void main(String[] args) {\n>         Scanner sc = new Scanner(System.in);\n>         int n = sc.nextInt();\n>         int k = sc.nextInt();\n>         char[] s = sc.next().toCharArray();\n>         List<Integer> one = new ArrayList<>();\n>         List<Integer> zero = new ArrayList<>();\n>         int oneCnt = 0;\n>         int zeroCnt = 0;\n>         if (s[0] == '1') {\n!             oneCnt++;\n>         } else {\n!             zeroCnt++;\n!             one.add(0);\n>         }\n>         for (int i = 1; i < n; i++) {\n>             if (s[i] == '1') {\n!                 oneCnt++;\n>                 if (zeroCnt != 0) {\n!                     zero.add(zeroCnt);\n!                     zeroCnt = 0;\n>                 }\n>             } else {\n!                 zeroCnt++;\n>                 if (oneCnt != 0) {\n!                     one.add(oneCnt);\n!                     oneCnt = 0;\n>                 }\n>             }\n>         }\n>         if (oneCnt != 0) {\n>             one.add(oneCnt);\n>         } else if (zeroCnt != 0) {\n!             zero.add(zeroCnt);\n!             one.add(0);\n>         }\n>         if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n!             System.out.println(s.length);\n!             return;\n>         }\n>         long oneSum = 0;\n>         long zeroSum = 0;\n>         for (int i = 0; i < k + 1; i++) {\n>             oneSum += one.get(i);\n>         }\n>         for (int i = 0; i < k; i++) {\n>             zeroSum += zero.get(i);\n>         }\n>         long ans = zeroSum + oneSum;\n>         for (int i = 1; i < zero.size() - k + 1; i++) {\n>             zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n>             oneSum += one.get(i + k) - one.get(i - 1);\n>             ans = Math.max(zeroSum + oneSum, ans);\n>         }\n>         System.out.println(ans);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n2\nabc123",
      "test_mutations": [
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n\"abc\" \n2",
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n\"abc\"\n2\n0",
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n5\n2\n12abc",
        "Test Case Input:\n5\n2\nabc123"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        char[] s = sc.next().toCharArray();\n        List<Integer> one = new ArrayList<>();\n        List<Integer> zero = new ArrayList<>();\n        int oneCnt = 0;\n        int zeroCnt = 0;\n        if (s[0] == '1') {\n            oneCnt++;\n        } else {\n            zeroCnt++;\n            one.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            if (s[i] == '1') {\n                oneCnt++;\n                if (zeroCnt != 0) {\n                    zero.add(zeroCnt);\n                    zeroCnt = 0;\n                }\n            } else {\n                zeroCnt++;\n                if (oneCnt != 0) {\n                    one.add(oneCnt);\n                    oneCnt = 0;\n                }\n            }\n        }\n        if (oneCnt != 0) {\n            one.add(oneCnt);\n        } else if (zeroCnt != 0) {\n            zero.add(zeroCnt);\n            one.add(0);\n        }\n        if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n            System.out.println(s.length);\n            return;\n        }\n        long oneSum = 0;\n        long zeroSum = 0;\n        for (int i = 0; i < k + 1; i++) {\n            oneSum += one.get(i);\n        }\n        for (int i = 0; i < k; i++) {\n            zeroSum += zero.get(i);\n        }\n        long ans = zeroSum + oneSum;\n        for (int i = 1; i < zero.size() - k + 1; i++) {\n            zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n            oneSum += one.get(i + k) - one.get(i - 1);\n            ans = Math.max(zeroSum + oneSum, ans);\n        }\n        System.out.println(ans);\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\", \"import java.util.Scanner;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int k = sc.nextInt();\", \"char[] s = sc.next().toCharArray();\" are covered. \n5. Initializing Lists and Variables : always executed. Statements \"List<Integer> one = new ArrayList<>();\", \"List<Integer> zero = new ArrayList<>();\", \"int oneCnt = 0;\", \"int zeroCnt = 0;\" are covered. \n6. If condition : Since s[0] is not equal to '1', the if condition 's[0] == '1'' is not satisfied. The else condition is satisfied so statements 'else {' and \"zero.add(0);\" are covered. \n7. For loop Execution : Since n is 5, the for loop condition (i < n) is true, and the loop block will be executed. Statement \"for (int i = 1; i < n; i++) {\" will be covered. \n8. For loop contents : Since s[1] is not equal to '1', the if condition 's[i] == '1'' is not satisfied. The else condition is satisfied so statements 'else {' and \"zeroCnt++;\" are covered. \n9. If condition within For loop : Since oneCnt is not equal to 0, the if condition 'oneCnt != 0' is satisfied. The else condition is not satisfied, so the statements within the if condition are covered. \n10. If - Else condition after the For loop : Since oneCnt is not equal to 0, the if condition 'oneCnt != 0' is satisfied. The else condition is not satisfied, so the statements within the if condition are covered. \n11. If condition after the If - Else condition : Since zero is not empty and zero size is not 1, the if condition 'zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0' is not satisfied. The else condition is satisfied so the statement \"System.out.println(ans);\" is covered. \n12. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> public class Main {\n>     public static void main(String[] args) {\n>         Scanner sc = new Scanner(System.in);\n>         int n = sc.nextInt();\n>         int k = sc.nextInt();\n>         char[] s = sc.next().toCharArray();\n>         List<Integer> one = new ArrayList<>();\n>         List<Integer> zero = new ArrayList<>();\n>         int oneCnt = 0;\n>         int zeroCnt = 0;\n>         if (s[0] == '1') {\n>         } else {\n>             zero.add(0);\n>         }\n>         for (int i = 1; i < n; i++) {\n>             if (s[i] == '1') {\n>             } else {\n>                 zeroCnt++;\n>                 if (oneCnt != 0) {\n>                     one.add(oneCnt);\n>                     oneCnt = 0;\n>                 }\n>             }\n>         }\n>         if (oneCnt != 0) {\n>             one.add(oneCnt);\n>         } else if (zeroCnt != 0) {\n>             zero.add(zeroCnt);\n>             one.add(0);\n>         }\n>         if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n>             System.out.println(s.length);\n>             return;\n>         }\n>         long oneSum = 0;\n>         long zeroSum = 0;\n>         for (int i = 0; i < k + 1; i++) {\n>             oneSum += one.get(i);\n>         }\n>         for (int i = 0; i < k; i++) {\n>             zeroSum += zero.get(i);\n>         }\n>         long ans = zeroSum + oneSum;\n>         for (int i = 1; i < zero.size() - k + 1; i++) {\n>             zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n>             oneSum += one.get(i + k) - one.get(i - 1);\n>             ans = Math.max(zeroSum + oneSum, ans);\n>         }\n>         System.out.println(ans);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-5\n2\nabc123",
      "test_mutations": [
        "Test Case Input:\n5\n2\nnull",
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n5\n2\nxyz123",
        "Test Case Input:\n\"5\"\n\"2\"\n\"abc123\"",
        "Test Case Input:\n5\n2\nabc123",
        "Test Case Input:\n3\n4\n123",
        "Test Case Input:\n3\n2\n101",
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n-5\n2\nnull",
        "Test Case Input:\n-5\n2\nabc123"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        char[] s = sc.next().toCharArray();\n        List<Integer> one = new ArrayList<>();\n        List<Integer> zero = new ArrayList<>();\n        int oneCnt = 0;\n        int zeroCnt = 0;\n        if (s[0] == '1') {\n            oneCnt++;\n        } else {\n            zeroCnt++;\n            one.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            if (s[i] == '1') {\n                oneCnt++;\n                if (zeroCnt != 0) {\n                    zero.add(zeroCnt);\n                    zeroCnt = 0;\n                }\n            } else {\n                zeroCnt++;\n                if (oneCnt != 0) {\n                    one.add(oneCnt);\n                    oneCnt = 0;\n                }\n            }\n        }\n        if (oneCnt != 0) {\n            one.add(oneCnt);\n        } else if (zeroCnt != 0) {\n            zero.add(zeroCnt);\n            one.add(0);\n        }\n        if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n            System.out.println(s.length);\n            return;\n        }\n        long oneSum = 0;\n        long zeroSum = 0;\n        for (int i = 0; i < k + 1; i++) {\n            oneSum += one.get(i);\n        }\n        for (int i = 0; i < k; i++) {\n            zeroSum += zero.get(i);\n        }\n        long ans = zeroSum + oneSum;\n        for (int i = 1; i < zero.size() - k + 1; i++) {\n            zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n            oneSum += one.get(i + k) - one.get(i - 1);\n            ans = Math.max(zeroSum + oneSum, ans);\n        }\n        System.out.println(ans);\n    }\n}",
      "covered_code": "The plan for step by step execution of the given Java program and test case is as follows:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\", and \"import java.util.Scanner;\" will be covered.\n2. Main class declaration: The main class declaration is always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: The main method declaration is always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User input and program output: The statement \"Scanner sc = new Scanner(System.in);\" is always executed. The statements \"int n = sc.nextInt();\", \"int k = sc.nextInt();\", and \"char[] s = sc.next().toCharArray();\" are covered.\n5. Variable and list initialization: The statements \"List<Integer> one = new ArrayList<>();\" and \"List<Integer> zero = new ArrayList<>();\" are always executed.\n6. Counter initialization: The statements \"int oneCnt = 0;\" and \"int zeroCnt = 0;\" are covered.\n7. If-else condition: Since the first character of the input string is 'a', the if condition 's[0] == '1'' is not satisfied. The else condition is executed. The statements \"zeroCnt++;\" and \"one.add(0);\" are covered.\n8. For loop execution: The for loop condition 'i < n' is true, and the loop block will be executed. The statement \"for (int i = 1; i < n; i++) {\" is covered.\n9. If-else condition inside the for loop: Since the character at index i is 'a', the if condition 's[i] == '1'' is not satisfied. The else condition is executed. The statements \"zeroCnt++;\" and \"one.add(oneCnt);\" are covered.\n10. If condition after the for loop: The if condition 'oneCnt != 0' is not satisfied. The else if condition 'zeroCnt != 0' is satisfied. The statements \"zero.add(zeroCnt);\" and \"one.add(0);\" are covered.\n11. If condition for empty or single zero list: The if condition 'zero.isEmpty() || (zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0)' is not satisfied. The program continues to the next statements.\n12. Calculation of oneSum and zeroSum: The for loop condition 'i < k + 1' is true, and the loop block will be executed. The statement \"for (int i = 0; i < k + 1; i++) {\" is covered. The statements \"oneSum += one.get(i);\" and \"zeroSum += zero.get(i);\" are covered.\n13. Calculation of ans: The for loop condition 'i < k' is true, and the loop block will be executed. The statement \"for (int i = 0; i < k; i++) {\" is covered. The statement \"ans = zeroSum + oneSum;\" is covered.\n14. Calculation of ans inside the second for loop: The for loop condition 'i < zero.size() - k + 1' is true, and the loop block will be executed. The statement \"for (int i = 1; i < zero.size() - k + 1; i++) {\" is covered. The statement \"ans = Math.max(zeroSum + oneSum, ans);\" is covered.\n15. Program output: The statement \"System.out.println(ans);\" is covered.\n16. Closing brackets: The closing brackets for the main method and main class are always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> public class Main {\n>     public static void main(String[] args) {\n>         Scanner sc = new Scanner(System.in);\n>         int n = sc.nextInt();\n>         int k = sc.nextInt();\n>         char[] s = sc.next().toCharArray();\n>         List<Integer> one = new ArrayList<>();\n>         List<Integer> zero = new ArrayList<>();\n>         int oneCnt = 0;\n>         int zeroCnt = 0;\n>         if (s[0] == '1') {\n>         } else {\n>             zeroCnt++;\n>             one.add(0);\n>         }\n>         for (int i = 1; i < n; i++) {\n>             if (s[i] == '1') {\n>                 if (zeroCnt != 0) {\n>                     zero.add(zeroCnt);\n>                     zeroCnt = 0;\n>                 }\n>             } else {\n>                 zeroCnt++;\n>                 if (oneCnt != 0) {\n>                     one.add(oneCnt);\n>                     oneCnt = 0;\n>                 }\n>             }\n>         }\n>         if (oneCnt != 0) {\n>             one.add(oneCnt);\n>         } else if (zeroCnt != 0) {\n>             zero.add(zeroCnt);\n>             one.add(0);\n>         }\n>         if (zero.isEmpty() || (zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0)) {\n>             System.out.println(s.length);\n>             return;\n>         }\n>         long oneSum = 0;\n>         long zeroSum = 0;\n>         for (int i = 0; i < k + 1; i++) {\n>             oneSum += one.get(i);\n>         }\n>         for (int i = 0; i < k; i++) {\n>             zeroSum += zero.get(i);\n>         }\n>         long ans = zeroSum + oneSum;\n>         for (int i = 1; i < zero.size() - k + 1; i++) {\n>             zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n>             oneSum += one.get(i + k) - one.get(i - 1);\n>             ans = Math.max(zeroSum + oneSum, ans);\n>         }\n>         System.out.println(ans);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\na\n2\n11001",
      "test_mutations": [
        "Test Case Input:\n-5\n2\nnull",
        "Test Case Input:\n5\n2\n-5",
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n-5\n2\nabc123",
        "Test Case Input:\n10\n0\n1111111111",
        "Test Case Input:\n-5\n2\nnull",
        "Test Case Input:\n5\n0\nabc123",
        "Test Case Input:\n5\n2\n11001",
        "Test Case Input:\na\n2\n11001"
      ],
      "initial_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        char[] s = sc.next().toCharArray();\n        List<Integer> one = new ArrayList<>();\n        List<Integer> zero = new ArrayList<>();\n        int oneCnt = 0;\n        int zeroCnt = 0;\n        if (s[0] == '1') {\n            oneCnt++;\n        } else {\n            zeroCnt++;\n            one.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            if (s[i] == '1') {\n                oneCnt++;\n                if (zeroCnt != 0) {\n                    zero.add(zeroCnt);\n                    zeroCnt = 0;\n                }\n            } else {\n                zeroCnt++;\n                if (oneCnt != 0) {\n                    one.add(oneCnt);\n                    oneCnt = 0;\n                }\n            }\n        }\n        if (oneCnt != 0) {\n            one.add(oneCnt);\n        } else if (zeroCnt != 0) {\n            zero.add(zeroCnt);\n            one.add(0);\n        }\n        if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n            System.out.println(s.length);\n            return;\n        }\n        long oneSum = 0;\n        long zeroSum = 0;\n        for (int i = 0; i < k + 1; i++) {\n            oneSum += one.get(i);\n        }\n        for (int i = 0; i < k; i++) {\n            zeroSum += zero.get(i);\n        }\n        long ans = zeroSum + oneSum;\n        for (int i = 1; i < zero.size() - k + 1; i++) {\n            zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n            oneSum += one.get(i + k) - one.get(i - 1);\n            ans = Math.max(zeroSum + oneSum, ans);\n        }\n        System.out.println(ans);\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.ArrayList;\", \"import java.util.List;\", \"import java.util.Scanner;\" will be covered. \n2. NumberDivision Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int k = sc.nextInt();\", \"char[] s = sc.next().toCharArray();\" are covered. \n5. List and variable initializations : always executed. Statements \"List<Integer> one = new ArrayList<>();\", \"List<Integer> zero = new ArrayList<>();\", \"int oneCnt = 0;\", \"int zeroCnt = 0;\" are covered.\n6. If condition : since the value of s[0] is not 1, the else block is executed. Statements \"zeroCnt++;\", \"one.add(0);\" are covered. \n7. For loop Execution : The for loop will execute n-1 times. Since n is 5, the loop will iterate 4 times. Statement \"for (int i = 1; i < n; i++) {\" is covered. \n8. If - Else condition : The if condition 's[i] == '1'' is not satisfied for any iteration of the loop. The else condition 's[i] != '1'' is satisfied for all iterations. Statements \"zeroCnt++;\", \"one.add(oneCnt);\", \"oneCnt = 0;\" are covered. \n9. If condition : The if condition 'oneCnt != 0' is false for all iterations. Statements \"one.add(oneCnt);\" is not covered. \n10. If - Else condition : The if condition 'zeroCnt != 0' is true for some iterations. Statements \"zero.add(zeroCnt);\", \"zeroCnt = 0;\" are covered. \n11. If condition : The if condition 'oneCnt != 0' is false for all iterations. Statements \"one.add(oneCnt);\" is not covered. \n12. If - Else condition : The if condition 'zero.isEmpty()' is true for some iterations. Statements \"System.out.println(s.length);\", \"return;\" are covered. \n13. For loop Execution : The for loop will execute k+1 times. Since k is 2, the loop will iterate 3 times. Statement \"for (int i = 0; i < k + 1; i++) {\" is covered. \n14. For loop Execution : The for loop will execute k times. Since k is 2, the loop will iterate 2 times. Statement \"for (int i = 0; i < k; i++) {\" is covered. \n15. Calculation and assignment : Statements \"oneSum += one.get(i);\", \"zeroSum += zero.get(i);\" are covered. \n16. Calculation and assignment : Statements \"ans = zeroSum + oneSum;\" is covered. \n17. For loop Execution : The for loop will execute zero.size() - k + 1 times. Since zero.size() is 1 and k is 2, the loop will not execute. Statement \"for (int i = 1; i < zero.size() - k + 1; i++) {\" is not covered. \n18. Calculation and assignment : Statements \"zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\", \"oneSum += one.get(i + k) - one.get(i - 1);\", \"ans = Math.max(zeroSum + oneSum, ans);\" are not covered. \n19. Program Output : Statement \"System.out.println(ans);\" is covered. \n20. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.ArrayList;\n> import java.util.List;\n> import java.util.Scanner;\n> public class Main {\n>     public static void main(String[] args) {\n>         Scanner sc = new Scanner(System.in);\n>         int n = sc.nextInt();\n>         int k = sc.nextInt();\n>         char[] s = sc.next().toCharArray();\n>         List<Integer> one = new ArrayList<>();\n>         List<Integer> zero = new ArrayList<>();\n>         int oneCnt = 0;\n>         int zeroCnt = 0;\n>         if (s[0] == '1') {\n>         } else {\n>             zeroCnt++;\n>             one.add(0);\n>         }\n>         for (int i = 1; i < n; i++) {\n>             if (s[i] == '1') {\n>                 if (zeroCnt != 0) {\n>                     zero.add(zeroCnt);\n>                     zeroCnt = 0;\n>                 }\n>             } else {\n>                 zeroCnt++;\n>                 if (oneCnt != 0) {\n>                     one.add(oneCnt);\n>                     oneCnt = 0;\n>                 }\n>             }\n>         }\n>         if (oneCnt != 0) {\n>             one.add(oneCnt);\n>         } else if (zeroCnt != 0) {\n>             zero.add(zeroCnt);\n>             one.add(0);\n>         }\n>         if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n>             System.out.println(s.length);\n>             return;\n>         }\n>         long oneSum = 0;\n>         long zeroSum = 0;\n>         for (int i = 0; i < k + 1; i++) {\n>             oneSum += one.get(i);\n>         }\n>         for (int i = 0; i < k; i++) {\n>             zeroSum += zero.get(i);\n>         }\n>         long ans = zeroSum + oneSum;\n>         for (int i = 1; i < zero.size() - k + 1; i++) {\n>         }\n>         System.out.println(ans);\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}