{
  "submission_id": "s346794332",
  "cycles": [
    {
      "test_case": "Test Case Input:\n5\n3\n1\n2\n3\n4\n5",
      "test_mutations": [
        "Test Case Input:\n3\n2\n-1\n0\n1",
        "Test Case Input:\n5\n3\n1\n-2\n3\n-4\n0",
        "Test Case Input:\n5\n2\n1\n2\n3\n4\n5",
        "Test Case Input:\n3\n2\n1\n-2\n3",
        "Test Case Input:\n5\n3\n-2\n0\n1\n-3\n2",
        "Test Case Input:\n3\n2\n1\n-2\n3",
        "Test Case Input:\n5\n3\n2 4 -3 5 0",
        "Test Case Input:\n5\n3\n2 5 -3 0 1",
        "Test Case Input:\n5\n3\n1 -2 3 -4 5",
        "Test Case Input:\n5\n3\n1\n2\n3\n4\n5"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements : Import statements are always executed. Statements \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. solve method declaration and execution : always executed. Statements \"void solve() throws IOException {\", \"Main main = new Main();\", \"main.solve();\", \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\", \"positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\", \"for(int i=0;i<n;i++){\", \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\", \"}\", \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\", \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1){\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\", \"System.out.println(lo);\", \"}\" are covered.\n\n5. legal method declaration and execution : always executed. Statements \"boolean legal(long guess){\", \"long ans = 0;\", \"if(guess>0){\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\", \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\", \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\", \"}\", \"return ans >= k;\", \"}\" are covered.\n\n6. helperPosList method declaration and execution : always executed. Statements \"long helperPosList(ArrayList<Long> pos, long lower){\", \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\", \"}\" are covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\\n3\\n1\\n2\\n3\\n4\\n5",
      "test_mutations": [
        "Test Case Input:\n5\n0\n1\n2\n3\n4\n5",
        "Test Case Input:\n-3\n2\n-5\n-7",
        "Test Case Input:\n\"a\"\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n-3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n-2\n3\n4\n5",
        "Test Case Input:\n\"5\" \n\"3\" \n\"1\" \n\"2\" \n\"3\" \n\"4\" \n\"5\"",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n5\n0\n-1\n2\n3\n-4\n5",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\""
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "The plan for step by step execution of the given code snippet is as follows:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. solve method declaration: always executed. Statement \"void solve() throws IOException {\" is covered.\n\n5. User Input and Program Output: always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered.\n\n6. Variables Initialization: always executed. Statements \"k = n*(n-1)/2+1-k;\", \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\", \"long zeros = 0;\" are covered.\n\n7. For loop Execution: Since n=5, the for loop condition (i<n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" will be covered.\n\n8. For loop contents: user input statements are always executed. Statement \"long a = sc.nextLong();\" within the for loop will be executed.\n\n9. if-else conditions: The if condition 'a>0' is satisfied for the given test case, so statements within the if block \"positive.add(a);\", \"maxi = Math.max(maxi,a*a);\" are covered. The else if condition 'a==0' is not satisfied for the given test case, so the statement within the else if block \"zeros += 1;\" is not covered. The else condition is not satisfied for the given test case, so statements within the else block \"negative.add(a);\", \"minus_nega.add(-a);\" are not covered.\n\n10. Collections sorting: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n11. While loop execution: Since hi-lo>1, the while loop condition is true, and the loop block will be executed. Statement \"while(hi-lo>1){\" will be covered.\n\n12. legal method call: always executed. Statement \"if(legal(mid)) lo = mid;\" is covered.\n\n13. legal method declaration and execution: method declaration is always executed. \"boolean legal(long guess) {\" is covered. The if condition 'guess>0' is not satisfied for the given test case, so statements within the if block are not covered. The if condition 'guess<=0' is satisfied for the given test case, so statements within the if block are covered. The if condition 'guess < 0' is not satisfied for the given test case, so statements within the if block are not covered. The return statement \"return ans >= k;\" is covered.\n\n14. System.out.println statement: always executed. Statement \"System.out.println(lo);\" is covered.\n\n15. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\\n3\\n1\\n2\\n3\\n4\\n5",
      "test_mutations": [
        "Test Case Input:\n1\n2\n3\n4\n5\n6\n7",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n5\n0\n1\n2\n3\n4\n5",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n-5\n0\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n-4\\n5\"",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\""
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main class declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Create an object of Main class and call the solve method: always executed. Statement \"Main main = new Main();\", \"main.solve();\" is covered.\n\n5. Solve method: always executed. Statement \"void solve() throws IOException {\" is covered.\n\n6. Read input values: always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" is covered.\n\n7. Calculate the value of k: always executed. Statement \"k = n*(n-1)/2+1-k;\" is covered.\n\n8. Create ArrayLists: always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" is covered.\n\n9. Initialize variables: always executed. Statements \"long maxi = Long.MIN_VALUE;\", \"zeros = 0;\" is covered.\n\n10. For loop to read input values and perform operations: always executed. Statements \"for(int i=0;i<n;i++) {\", \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else {\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\" is covered.\n\n11. Sort the ArrayLists: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" is covered.\n\n12. Calculate the range for binary search: always executed. Statements \"long lo = -maxi;\", \"long hi = maxi+1;\" is covered.\n\n13. Perform binary search: always executed. Statements \"while(hi-lo>1) {\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\" is covered.\n\n14. Print the result: always executed. Statement \"System.out.println(lo);\" is covered.\n\n15. Check if guess is positive: executed if guess > 0. Statements \"if(guess>0) {\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\" is covered.\n\n16. Check if guess is less than or equal to 0: executed if guess <= 0. Statements \"if(guess<=0) {\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\" is covered.\n\n17. Check if guess is less than 0: executed if guess < 0. Statements \"if(guess < 0) {\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0) {\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++) {\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\" is covered.\n\n18. Return false if ans < k: always executed. Statement \"return ans >= k;\" is covered.\n\n19. helperPosList method: always executed. Statements \"long helperPosList(ArrayList<Long> pos, long lower) {\", \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--) {\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len) {\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\" is covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\\n3\\n1\\n2\\n3\\n4\\n5",
      "test_mutations": [
        "Test Case Input:\n-5\n3\n1\n-2\n-3\n4\n5",
        "Test Case Input:\n1\n-1",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n4\n2\n-1\n0\n2\n3",
        "Test Case Input:\nabc\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n-1\n2\n-3\n4\n-5",
        "Test Case Input:\n5\n0\n1\n2\n3\n4\n5",
        "Test Case Input:\n\"abc\"\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n\"abc\"\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\""
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and tets case-\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. Object creation and method call : always executed. Statement \"Main main = new Main();\", \"main.solve();\" are covered. \n5. solve method Declaration and Execution : method declaration is always executed. \"void solve() throws IOException {\" is covered. But, since the value of n and k is given as 5 and 3, the following statements are covered - \n- n = sc.nextInt(); (n = 5)\n- k = sc.nextInt(); (k = 3)\n- k = n*(n-1)/2+1-k; (k = 5*(5-1)/2+1-3 = 10-3 = 7)\n6. Object variable initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\" are covered. \n7. For loop Execution : Since n is 5, the for loop condition (i < n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++) {\" will be covered. \n8. For loop contents : user input statements are always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\" will be executed. \n9. If - Else condition : Since a is not zero, the if condition 'a == 0' is not satisfies. The else condition is satisfied so statements \"else {\", \"negative.add(a);\", \"minus_nega.add(-a);\" are covered. \n10. Collections sort method calls : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered. \n11. While loop condition : Since hi - lo > 1 (maxi + 1 - -maxi = maxi + 1 + maxi = 2 * maxi + 1 > 1), the loop block will be executed. Statement \"while(hi-lo>1) {\" will be covered. \n12. While loop contents : always executed. Statements \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\" are covered. \n13. legal method Declaration and Execution : method declaration is always executed. \"boolean legal(long guess) {\" is covered. But, since the value of guess is not given, the following statements are not covered - \n- long ans = 0;\n- if(guess>0) {\n- ans += helperPosList(positive,guess);\n- ans += helperPosList(minus_nega,guess);\n- if(ans>=k) return true;\n- }\n- if(guess<=0) {\n- ans += zeros*(n-zeros);\n- ans += positive.size()*(positive.size()-1)/2;\n- ans += negative.size()*(negative.size()-1)/2;\n- if(ans>=k) return true;\n- }\n- if(guess < 0) {\n- int lenPos = positive.size(), lenNeg = negative.size();\n- if(lenNeg*lenPos>0) {\n- int right = 0;\n- for(int i=0;i<lenPos;i++) {\n- long cur = positive.get(i);\n- while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n- ans += lenNeg-right;\n- }\n- }\n- }\n- return ans >= k;\n14. Print statement : always executed. Statement \"System.out.println(lo);\" is covered. \n15. Statements after solve method in Main method : no statements after the solve method will be executed since the solve method is the last method called in the main method. \n16. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++) {\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else {\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1) {\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess) {\n>         long ans = 0;\n>         if(guess>0) {\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0) {\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0) {\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0) {\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++) {\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower) {\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--) {\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len) {\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-5\\n3\\n1\\n2\\n3\\n4\\n5",
      "test_mutations": [
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n-3\n4\n5",
        "Test Case Input:\na\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n0\n1\n-2\n3\n4\n5",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n-5\n3\n2\n-3\n4\n-5\n-6",
        "Test Case Input:\n-5\\n3\\n1\\n2\\n3\\n4\\n5"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statements \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered. \n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n\n3. Global Variable Declarations : always executed. Statements \"static PrintWriter out = new PrintWriter(System.out);\", \"static Scanner sc = new Scanner(System.in);\", \"static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\", \"ArrayList<Long> positive, negative, minus_nega;\", \"long zeros = 0, k = 0, n = 0;\" are covered. \n\n4. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n5. solve method declaration and execution : solve method is executed in the main method. Statement \"Main main = new Main();\", \"main.solve();\" are covered.\n\n6. User Input and Program Output : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered. \n\n7. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered. \n\n8. Loop Execution : Since n is 5, the for loop condition (i<n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++) {\" will be covered. \n\n9. Loop contents : user input statements are always executed. Statement \"long a = sc.nextLong();\" will be executed. \n\n10. if-else condition : The if-else condition checks the value of a. Since a>0, the if condition 'a>0' is true, and the if block will be executed. Statement \"if(a>0) positive.add(a);\" is covered. \n\n11. else if condition : The else if condition checks the value of a. Since a==0, the else if condition 'a==0' is true, and the else if block will be executed. Statement \"else if(a==0) zeros += 1;\" is covered. \n\n12. else condition : Since the previous conditions were true, the else condition will not be executed. \n\n13. Loop Increment : always executed. Statement \"}\" is covered. \n\n14. ArrayList Sorting : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered. \n\n15. Variable Initialization : always executed. Statements \"long lo = -maxi, hi = maxi+1;\" are covered. \n\n16. while loop execution : The while loop condition (hi-lo>1) is true, and the loop block will be executed. Statement \"while(hi-lo>1) {\" is covered. \n\n17. while loop contents : The legal method is called within the while loop. Statement \"if(legal(mid)) lo = mid;\" is covered. \n\n18. legal method declaration and execution : method declaration is always executed. \"boolean legal(long guess) {\" is covered. \n\n19. legal method contents : The if condition (guess>0) is true, and the if block will be executed. Statement \"if(guess>0) {\" is covered. \n\n20. helperPosList method call : The helperPosList method is called within the legal method. Statement \"ans += helperPosList(positive,guess);\" is covered. \n\n21. helperPosList method declaration and execution : method declaration is always executed. \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered. \n\n22. helperPosList method contents : The for loop condition (right>=0) is true, and the loop block will be executed. Statement \"for(int right=len-1;right>=0;right--) {\" is covered. \n\n23. helperPosList loop contents : always executed. Statement \"long cur = pos.get(right);\" will be executed. \n\n24. helperPosList if condition : The if condition (left<=right) is true, and the if block will be executed. Statement \"if(left<=right) ans += len-left-1;\" is covered. \n\n25. helperPosList loop increment : always executed. Statement \"ans /= 2;\" is covered. \n\n26. helperPosList loop increment : always covered. Statement \"}\" is covered. \n\n27. helperPosList method return : always executed. Statement \"return ans;\" is covered. \n\n28. legal method return : always executed. Statement \"return ans >= k;\" is covered. \n\n29. while loop increment : always executed. Statement \"}\" is covered. \n\n30. Program Output : always executed. Statement \"System.out.println(lo);\" is covered. \n\n31. Closing Brackets : always executed. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\\n3\\n1\\n2\\n3\\n4\\n5",
      "test_mutations": [
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n-3\\n4\\n5\"",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n1\n2\n3\n4\n5\n6\n7",
        "Test Case Input:\n\"5\\n3\\n1\\n-2\\n3\\n4\\n5\"",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\""
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statements \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", and \"import java.util.*;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Create an instance of the Main class: always executed. Statement \"Main main = new Main();\" is covered.\n\n5. Call the solve() method: always executed. Statement \"main.solve();\" is covered.\n\n6. solve() method declaration: always executed. Statement \"void solve() throws IOException {\" is covered.\n\n7. Read input values for n and k: always executed. Statements \"n = sc.nextInt();\" and \"k = sc.nextInt();\" are covered.\n\n8. Calculate the value of k: always executed. Statement \"k = n*(n-1)/2+1-k;\" is covered.\n\n9. Create ArrayLists for positive, negative, and minus_nega: always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", and \"minus_nega = new ArrayList<>();\" are covered.\n\n10. Initialize maxi variable: always executed. Statement \"long maxi = Long.MIN_VALUE;\" is covered.\n\n11. For loop execution: Since the value of n is 5, the for loop will iterate 5 times. Statements inside the for loop will be executed 5 times. Statements \"for(int i=0;i<n;i++){\" and \"long a = sc.nextLong();\" are covered.\n\n12. Check if a is positive, negative, or zero: always executed. Statements \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", and \"else{ negative.add(a); minus_nega.add(-a); }\" are covered.\n\n13. Sort the ArrayLists: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", and \"Collections.sort(minus_nega);\" are covered.\n\n14. Calculate the range for binary search: always executed. Statements \"long lo = -maxi, hi = maxi+1;\" are covered.\n\n15. Perform binary search: always executed. Statements \"while(hi-lo>1){\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\" are covered.\n\n16. Print the result: always executed. Statement \"System.out.println(lo);\" is covered.\n\n17. legal() method declaration and execution: always executed. Statement \"boolean legal(long guess){\" is covered.\n\n18. Check if guess is positive: always executed. Statements \"long ans = 0;\", \"if(guess>0){\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\" are covered.\n\n19. Check if guess is zero or negative: always executed. Statements \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\" are covered.\n\n20. Check if guess is negative: always executed. Statements \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\", \"}\" are covered.\n\n21. Return false if ans is less than k: always executed. Statement \"return ans >= k;\" is covered.\n\n22. helperPosList() method declaration and execution: always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower){\" is covered.\n\n23. Calculate the length and left index: always executed. Statements \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\" are covered.\n\n24. Calculate the answer using two pointers: always executed. Statements \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\" are covered.\n\n25. Closing Brackets: always executed. Closing brackets for all the opened blocks are covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\n0\n1\n2\n3",
      "test_mutations": [
        "Test Case Input:\n0\n0",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n10\n5\n-2\n4\n0\n-5\n3\n1\n2\n-3\n-1",
        "Test Case Input:\nabc\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n1\n0",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n3\n0\n1\n2\n3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. All the import statements are covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. Initialize variables : always executed. Statements \"Main main = new Main();\", \"main.solve();\" are covered. \n5. solve method declaration : always executed. Statement \"void solve() throws IOException {\" is covered. \n6. User Input : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered. \n7. Calculation of k : always executed. Statement \"k = n*(n-1)/2+1-k;\" is covered. \n8. Initialize ArrayLists : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered. \n9. Initialize maxi : always executed. Statement \"long maxi = Long.MIN_VALUE;\" is covered. \n10. For loop : always executed. Statements \"for(int i=0;i<n;i++){\" and \"long a = sc.nextLong();\" are covered. \n11. Calculate maxi : always executed. Statement \"maxi = Math.max(maxi,a*a);\" is covered. \n12. Add elements to ArrayLists : always executed. Statements \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a); }\" are covered. \n13. Sort ArrayLists : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered. \n14. Calculate lo and hi : always executed. Statements \"long lo = -maxi, hi = maxi+1;\" are covered. \n15. While loop : always executed. Statement \"while(hi-lo>1){\" is covered. \n16. Calculate mid : always executed. Statement \"long mid = (hi+lo)/2;\" is covered. \n17. Call legal method : always executed. Statement \"if(legal(mid)) lo = mid;\" is covered. \n18. Else condition inside legal method : always executed. Statement \"else hi = mid;\" is covered. \n19. Print lo : always executed. Statement \"System.out.println(lo);\" is covered. \n20. legal method declaration : always executed. Statement \"boolean legal(long guess) {\" is covered. \n21. Calculate ans : always executed. Statement \"long ans = 0;\" is covered. \n22. if condition inside legal method : always executed. Statement \"if(guess>0){\" is covered. \n23. Call helperPosList method twice : always executed. Statements \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\" are covered. \n24. if condition inside if condition : always executed. Statement \"if(ans>=k) return true;\" is covered. \n25. if condition outside if condition : always executed. Statement \"if(guess<=0){\" is covered. \n26. Calculate ans : always executed. Statements \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\" are covered. \n27. if condition inside if condition : always executed. Statement \"if(ans>=k) return true;\" is covered. \n28. if condition outside if condition : always executed. Statement \"if(guess < 0){\" is covered. \n29. Calculate lenPos and lenNeg : always executed. Statements \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\" are covered. \n30. For loop : always executed. Statement \"for(int i=0;i<lenPos;i++){\" is covered. \n31. Calculate cur : always executed. Statement \"long cur = positive.get(i);\" is covered. \n32. while loop : always executed. Statement \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\" is covered. \n33. calculate ans : always executed. Statement \"ans += lenNeg-right;\" is covered. \n34. return statement : always executed. Statement \"return ans >= k;\" is covered. \n35. helperPosList method declaration : always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered. \n36. Calculate len : always executed. Statement \"int len = pos.size(), left=0;\" is covered. \n37. calculate ans : always executed. Statement \"long ans = 0;\" is covered. \n38. if condition : always executed. Statement \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\" is covered. \n39. For loop : always executed. Statement \"for(int right=len-1;right>=0;right--){\" is covered. \n40. Calculate cur : always executed. Statement \"long cur = pos.get(right);\" is covered. \n41. while loop : always executed. Statement \"while(left<len&&pos.get(left)*cur<lower) left++;\" is covered. \n42. if condition inside while loop : always executed. Statement \"if(left!=len){\" is covered. \n43. if condition inside if condition : always executed. Statement \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\" are covered. \n44. ans calculation : always executed. Statement \"ans += len-left-1;\", \"else ans += len-left;\" are covered. \n45. ans calculation : always executed. Statement \"ans /= 2;\" is covered. \n46. return statement : always executed. Statement \"return ans;\" is covered. \n47. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\\n3\\n1\\n2\\n3\\n4\\n5",
      "test_mutations": [
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\"",
        "Test Case Input:\n1\n0",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n1\n0",
        "Test Case Input:\n\"abc\"\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n5\n0\n1\n2\n3\n4\n5",
        "Test Case Input:\n\"abc\"\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n3\\n4\\n5\""
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. solve method declaration : always executed. Statement \"void solve() throws IOException {\" is covered.\n5. User Input and Program Output : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered. \n6. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered. \n7. For loop Execution : Since n is 5, the for loop condition (i < n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" will be covered. \n8. For loop contents : user input statements are always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\" will be executed. \n9. If - Else conditions : Since a = 5, the else if condition 'a==0' is not satisfied. Statement 'if(a==0) zeros += 1;' is not covered. The else condition is satisfied so statements 'else{' and \"negative.add(a); minus_nega.add(-a);\" are covered. \n10. Collections.sort : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered. \n11. While loop Execution : The while loop condition (hi-lo>1) is true, and the loop block will be executed. Statement \"while(hi-lo>1){\" will be covered. \n12. helperPosList method call within legal method : always executed. Statement \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\" are covered. \n13. legal method Declaration and Execution : method declaration is always executed. \"boolean legal(long guess){\" is covered. \n14. helperPosList method Declaration and Execution : always executed. \"long helperPosList(ArrayList<Long> pos, long lower){\" is covered. \n15. Statements after while loop in solve method : Statement \"System.out.println(lo);\" is covered. \n16. Statements after for loop in Main method : no statements after the for loop will be executed since the for loop completed execution without any exceptions. \n17. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n2\n1\n2\n3\n4\n5",
      "test_mutations": [
        "Test Case Input:\n5\n-3\n-1\n-2\n-3\n-4\n-5",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n\"abc\"\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n1.5\n5\n3\n1.2\n2\n3\n4\n5",
        "Test Case Input:\n5\n0\n1\n2\n3\n4\n5",
        "Test Case Input:\n10\n5\n-3\n2\n0\n-5\n4\n1\n-2\n3\n-1\n5\n\nTest Case Input:\n3\n0\n1\n2\n3\n\nTest Case Input:\n5\n3\n1\n2\n3\n4\n5\n\nTest Case Input:\n-5\n3\n1\n2\n3\n4\n5\n\nTest Case Input:\n5\n3\n1\n2\n3\n4\n5\n\nTest Case Input:\n5\n3\n1\n2\n3\n4\n5\n\nTest Case Input:\n5\n3\n1\n2\n3\n4\n5\n\nTest Case Input:\n5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n5\n2\n1\n2\n3\n4\n5"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", and \"import java.util.*;\" will be covered.\n\n2. NumberDivision Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. User Input and Program Output: always executed. Statements \"Main main = new Main();\", \"main.solve();\", \"n = sc.nextInt();\", and \"k = sc.nextInt();\" are covered.\n\n5. solve() method execution: always executed. Statement \"void solve() throws IOException {\" is covered.\n\n6. Variable Initialization: always executed. Statements \"k = n*(n-1)/2+1-k;\", \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", and \"minus_nega = new ArrayList<>();\" are covered.\n\n7. For loop Execution: Since n is 5, the for loop condition (i < n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" will be covered.\n\n8. For loop contents: user input statements are always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a); }\" will be executed.\n\n9. Collections sort method calls: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n10. Calculation of lo and hi variables: always executed. Statements \"long lo = -maxi;\", \"hi = maxi+1;\" are covered.\n\n11. While loop execution: Since the condition (hi-lo>1) is true, the loop block will be executed. Statement \"while(hi-lo>1){\" will be covered.\n\n12. Conditional statement execution: Since the condition legal(mid) is true, the if block will be executed. Statements \"if(legal(mid)) lo = mid;\", \"else hi = mid;\" will be covered.\n\n13. System.out.println statement: always executed. Statement \"System.out.println(lo);\" is covered.\n\n14. legal method declaration and execution: always executed. Statement \"boolean legal(long guess){\" is covered.\n\n15. Calculation of ans variable: always executed. Statements \"long ans = 0;\", \"if(guess>0){\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true; }\" are covered.\n\n16. Calculation of ans variable: always executed. Statements \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true; }\" are covered.\n\n17. Calculation of ans variable: always executed. Statements \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right; }\" are covered.\n\n18. Return statement: always executed. Statement \"return ans >= k;\" is covered.\n\n19. helperPosList method declaration and execution: always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower){\" is covered.\n\n20. Calculation of ans variable: always executed. Statements \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left; }\" are covered.\n\n21. Return statement: always executed. Statement \"return ans;\" is covered.\n\n22. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k;\n>         positive = new ArrayList<>();\n>         negative = new ArrayList<>();\n>         minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi;\n>         long hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2;\n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}