[
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03072",
    "code_tokens": "package beans;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint N=sc.nextInt();\n\t\tint[]H=new int[N];\n\t\tfor(int i=0;i<H.length;i++){\n\t\t\tH[i]=sc.nextInt();\n\t}\n\t\tsc.close();\n\t\tint ans=1;\n\t\tint max=H[0];\n\t\tfor(int i=1;i<H.length;i++){\n\t\t\tif(max<=H[i]){\n\t\t\t\tmax=H[i];\n\t\t\t\tans++;\n\t\t\t}\n\t\t}System.out.println(ans);\n\t}\n}",
    "submission_id": "s483254034",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 21,
    "if_count": 0,
    "else_count": 0,
    "for_count": 0,
    "jazzer_code": {
      "main": "import java.util.Arrays;\nimport com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint N=sc.nextInt();\n\t\tint[]H=new int[N];\n\t\tfor(int i=0;i<H.length;i++){\n\t\t\tH[i]=sc.nextInt();\n\t}\n\t\tsc.close();\n\t\tint ans=1;\n\t\tint max=H[0];\n\t\tfor(int i=1;i<H.length;i++){\n\t\t\tif(max<=H[i]){\n\t\t\t\tmax=H[i];\n\t\t\t\tans++;\n\t\t\t}\n\t\t}System.out.println(ans);\n\t}\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            // Generate fuzzed input using FuzzedDataProvider\n            int N = data.consumeInt();\n            int[] H = new int[N];\n            for (int i = 0; i < H.length; i++) {\n                H[i] = data.consumeInt();\n            }\n\n            // Call the function under test with the fuzzed input\n            testInputOnMain(N, H);\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }",
      "testInputOnMain": "public static void testInputOnMain(int N, int[] H) {\n        try {\n            // Testing input on the main function\n            System.out.println(\"Testing input on main function: N=\" + N + \", H=\" + Arrays.toString(H));\n\n            int ans = 1;\n            int max = H[0];\n            for (int i = 1; i < H.length; i++) {\n                if (max <= H[i]) {\n                    max = H[i];\n                    ans++;\n                }\n            }\n            System.out.println(ans);\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03473",
    "code_tokens": "import java.io.IOException;\nimport java.util.Scanner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner in = new Scanner(System.in);\n\t\tint A, B;\n\t\tA = in.nextInt();\n\t\tB = in.nextInt();\n\t\tString S = in.next();\n\t\tPattern p = Pattern.compile(\"^.{\" + A + \"}-[0-9]{\" + B + \"}$\");\n\t\tMatcher m = p.matcher(S);\n\t\tSystem.err.println(S);\n\t\tif(m.find()) {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}else {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}",
    "submission_id": "s638236423",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 21,
    "if_count": 0,
    "else_count": 0,
    "for_count": 0,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.io.IOException;\nimport java.util.Scanner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner in = new Scanner(System.in);\n\t\tint A, B;\n\t\tA = in.nextInt();\n\t\tB = in.nextInt();\n\t\tString S = in.next();\n\t\tPattern p = Pattern.compile(\"^.{\" + A + \"}-[0-9]{\" + B + \"}$\");\n\t\tMatcher m = p.matcher(S);\n\t\tSystem.err.println(S);\n\t\tif(m.find()) {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}else {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            // Generate fuzzed input using FuzzedDataProvider\n            int A = data.consumeInt();\n            int B = data.consumeInt();\n            String S = data.consumeRemainingAsString();\n\n            // Call the function under test with the fuzzed input\n            testInputOnMain(A, B, S);\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }",
      "testInputOnMain": "public static void testInputOnMain(int A, int B, String S) {\n        try {\n            // Testing input on the main function\n            System.out.println(\"Testing input on main function: A=\" + A + \", B=\" + B + \", S=\" + S);\n\n            Pattern p = Pattern.compile(\"^.{\" + A + \"}-[0-9]{\" + B + \"}$\");\n            Matcher m = p.matcher(S);\n\n            if (m.find()) {\n                System.out.println(\"Yes\");\n            } else {\n                System.out.println(\"No\");\n            }\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02880",
    "code_tokens": "import java.util.*;\npublic class Main{\n  public static void main(String[]args){\n  \tScanner sc = new Scanner(System.in);\n    int a = sc.nextInt();\n    String ans = \"No\";\n    int []kuku = new int [81];\n    int b=0;\n  \tfor(int x=1; x<=9; x++){\n    \tfor(int y=1; y<=9; y++){\n          kuku[b]=x*y;\n          b++;\n        }\n    }\n    for(int i=0; i<=81; i++){\n    \tif(a==kuku[i])\n    \tans=\"Yes\";\n    }\n    System.out.println(ans);\n  }\n}",
    "submission_id": "s712779211",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 21,
    "if_count": 0,
    "else_count": 0,
    "for_count": 0,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.*;\npublic class Main{\n  public static void main(String[]args){\n  \tScanner sc = new Scanner(System.in);\n    int a = sc.nextInt();\n    String ans = \"No\";\n    int []kuku = new int [81];\n    int b=0;\n  \tfor(int x=1; x<=9; x++){\n    \tfor(int y=1; y<=9; y++){\n          kuku[b]=x*y;\n          b++;\n        }\n    }\n    for(int i=0; i<=81; i++){\n    \tif(a==kuku[i])\n    \tans=\"Yes\";\n    }\n    System.out.println(ans);\n  }\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            // Generate fuzzed input using FuzzedDataProvider\n            int a = data.consumeInt();\n            String ans = \"No\";\n            int[] kuku = new int[81];\n            int b = 0;\n            for (int x = 1; x <= 9; x++) {\n                for (int y = 1; y <= 9; y++) {\n                    kuku[b] = x * y;\n                    b++;\n                }\n            }\n\n            for (int i = 0; i < 81; i++) {\n                if (a == kuku[i])\n                    ans = \"Yes\";\n            }\n\n            // Call the function under test with the fuzzed input\n            testInputOnMain(a, ans);\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }",
      "testInputOnMain": "public static void testInputOnMain(int a, String ans) {\n        try {\n            // Testing input on the main function\n            System.out.println(\"Testing input on main function: a=\" + a + \", ans=\" + ans);\n\n            Scanner sc = new Scanner(System.in);\n            int inputA = sc.nextInt();\n            String inputAns = \"No\";\n            int[] kuku = new int[81];\n            int b = 0;\n            for (int x = 1; x <= 9; x++) {\n                for (int y = 1; y <= 9; y++) {\n                    kuku[b] = x * y;\n                    b++;\n                }\n            }\n\n            for (int i = 0; i < 81; i++) {\n                if (inputA == kuku[i])\n                    inputAns = \"Yes\";\n            }\n\n            // Compare the results of the original and tested code\n            if (!ans.equals(inputAns)) {\n                System.err.println(\"Mismatch between original and tested code results.\");\n            }\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03013",
    "code_tokens": "import java.util.*;\npublic class Main {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int mod = (int)1e9 + 7;\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int block[] = new int[m];\n        for (int i=0; i<m; i++){\n            block[i] = sc.nextInt();\n        }\n        int sums[] = new int[n+1];\n        boolean stone[] = new boolean[n+1];\n        for (int i=0; i<m; i++) {\n            stone[block[i]] = true;\n        }\n        if (block[0]==0) {System.out.println(0);}\n        else if (block[0]==1) {\n            sums[0] = 1;\n            sums[1] = 0;\n            for (int i = 0; i < n - 1; i++) {\n                if (stone[i + 2] == false) {\n                    sums[i + 2] = (sums[i + 1] + sums[i]) % mod;\n                } else if (stone[i + 2] == true) {\n                    sums[i + 2] = 0;\n                }\n            }\n            System.out.println(sums[n] % mod);\n        }\n        else{\n            sums[0] = 1;\n            sums[1] = 1;\n            for (int i = 0; i < n - 1; i++) {\n                if (stone[i + 2] == false) {\n                    sums[i + 2] = (sums[i + 1] + sums[i]) % mod;\n                } else if (stone[i + 2] == true) {\n                    sums[i + 2] = 0;\n                }\n            }\n            System.out.println(sums[n] % mod);\n        }\n    }\n}",
    "submission_id": "s858273878",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 43,
    "if_count": 6,
    "else_count": 3,
    "for_count": 4,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int mod = (int)1e9 + 7;\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int block[] = new int[m];\n        for (int i=0; i<m; i++){\n            block[i] = sc.nextInt();\n        }\n        int sums[] = new int[n+1];\n        boolean stone[] = new boolean[n+1];\n        for (int i=0; i<m; i++) {\n            stone[block[i]] = true;\n        }\n        if (block[0]==0) {System.out.println(0);}\n        else if (block[0]==1) {\n            sums[0] = 1;\n            sums[1] = 0;\n            for (int i = 0; i < n - 1; i++) {\n                if (stone[i + 2] == false) {\n                    sums[i + 2] = (sums[i + 1] + sums[i]) % mod;\n                } else if (stone[i + 2] == true) {\n                    sums[i + 2] = 0;\n                }\n            }\n            System.out.println(sums[n] % mod);\n        }\n        else{\n            sums[0] = 1;\n            sums[1] = 1;\n            for (int i = 0; i < n - 1; i++) {\n                if (stone[i + 2] == false) {\n                    sums[i + 2] = (sums[i + 1] + sums[i]) % mod;\n                } else if (stone[i + 2] == true) {\n                    sums[i + 2] = 0;\n                }\n            }\n            System.out.println(sums[n] % mod);\n        }\n    }\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            // Generate fuzzed input using FuzzedDataProvider\n            int mod = (int) 1e9 + 7;\n            int n = data.consumeInt();\n            int m = data.consumeInt();\n            int[] block = new int[m];\n            for (int i = 0; i < m; i++) {\n                block[i] = data.consumeInt();\n            }\n            int[] sums = new int[n + 1];\n            boolean[] stone = new boolean[n + 1];\n            for (int i = 0; i < m; i++) {\n                stone[block[i]] = true;\n            }\n\n            // Call the function under test with the fuzzed input\n            testInputOnMain(mod, n, m, block, sums, stone);\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }",
      "testInputOnMain": "public static void testInputOnMain(int mod, int n, int m, int[] block, int[] sums, boolean[] stone) {\n        try {\n            // Testing input on the main function\n            System.out.println(\"Testing input on main function: mod=\" + mod + \", n=\" + n + \", m=\" + m);\n\n            if (block[0] == 0) {\n                System.out.println(0);\n            } else if (block[0] == 1) {\n                sums[0] = 1;\n                sums[1] = 0;\n                for (int i = 0; i < n - 1; i++) {\n                    if (stone[i + 2] == false) {\n                        sums[i + 2] = (sums[i + 1] + sums[i]) % mod;\n                    } else if (stone[i + 2] == true) {\n                        sums[i + 2] = 0;\n                    }\n                }\n                System.out.println(sums[n] % mod);\n            } else {\n                sums[0] = 1;\n                sums[1] = 1;\n                for (int i = 0; i < n - 1; i++) {\n                    if (stone[i + 2] == false) {\n                        sums[i + 2] = (sums[i + 1] + sums[i]) % mod;\n                    } else if (stone[i + 2] == true) {\n                        sums[i + 2] = 0;\n                    }\n                }\n                System.out.println(sums[n] % mod);\n            }\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02916",
    "code_tokens": "import java.util.*;\npublic class Main{\n  public static void main(String[]args){\n      Scanner sc = new Scanner(System.in);\n      int n = sc.nextInt();\n      int[] adata = new int[n];\n      int[] bdata = new int[n];\n      int[] cdata = new int[n-1];\n      int sum = 0;\n      for (int i =0 ;i<n ;i++ ) {\n        adata[i] = sc.nextInt();\n      }\n      for (int i =0 ;i<n ;i++ ) {\n        bdata[i] = sc.nextInt();\n      }\n      for (int i =0 ;i<n-1 ;i++ ) {\n        cdata[i] = sc.nextInt();\n      }\n      for (int i =0 ;i<n ;i++ ) {\n        sum = sum + bdata[i];\n      }\n      if (n>3) {\n        for (int i =0 ;i<n-1 ;i++ ) {\n          if (adata[i]==adata[i+1]-1) {\n            sum = sum + cdata[i+1];\n          }\n        }\n      }else if(n==2){\n        for (int i =0 ;i<n-1 ;i++ ) {\n          if (adata[i]==adata[i+1]-1) {\n            sum = sum + cdata[i];\n          }\n        }\n      }else{\n        for (int i =0 ;i<n-1 ;i++ ) {\n          if (adata[i]==adata[i+1]-1) {\n            sum = sum + cdata[i-1];\n          }\n        }\n      }\n      System.out.println(sum);\n}\n}",
    "submission_id": "s006308236",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 43,
    "if_count": 4,
    "else_count": 0,
    "for_count": 7,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.*;\npublic class Main{\n  public static void main(String[]args){\n      Scanner sc = new Scanner(System.in);\n      int n = sc.nextInt();\n      int[] adata = new int[n];\n      int[] bdata = new int[n];\n      int[] cdata = new int[n-1];\n      int sum = 0;\n      for (int i =0 ;i<n ;i++ ) {\n        adata[i] = sc.nextInt();\n      }\n      for (int i =0 ;i<n ;i++ ) {\n        bdata[i] = sc.nextInt();\n      }\n      for (int i =0 ;i<n-1 ;i++ ) {\n        cdata[i] = sc.nextInt();\n      }\n      for (int i =0 ;i<n ;i++ ) {\n        sum = sum + bdata[i];\n      }\n      if (n>3) {\n        for (int i =0 ;i<n-1 ;i++ ) {\n          if (adata[i]==adata[i+1]-1) {\n            sum = sum + cdata[i+1];\n          }\n        }\n      }else if(n==2){\n        for (int i =0 ;i<n-1 ;i++ ) {\n          if (adata[i]==adata[i+1]-1) {\n            sum = sum + cdata[i];\n          }\n        }\n      }else{\n        for (int i =0 ;i<n-1 ;i++ ) {\n          if (adata[i]==adata[i+1]-1) {\n            sum = sum + cdata[i-1];\n          }\n        }\n      }\n      System.out.println(sum);\n}\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            // Generate fuzzed input using FuzzedDataProvider\n            int n = data.consumeInt();\n            int[] adata = new int[n];\n            int[] bdata = new int[n];\n            int[] cdata = new int[n - 1];\n            int sum = 0;\n            for (int i = 0; i < n; i++) {\n                adata[i] = data.consumeInt();\n            }\n            for (int i = 0; i < n; i++) {\n                bdata[i] = data.consumeInt();\n            }\n            for (int i = 0; i < n - 1; i++) {\n                cdata[i] = data.consumeInt();\n            }\n\n            // Call the function under test with the fuzzed input\n            testInputOnMain(n, adata, bdata, cdata);\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }",
      "testInputOnMain": "public static void testInputOnMain(int n, int[] adata, int[] bdata, int[] cdata) {\n        try {\n            // Testing input on the main function\n            System.out.println(\"Testing input on main function: n=\" + n);\n\n            int sum = 0;\n            for (int i = 0; i < n; i++) {\n                sum = sum + bdata[i];\n            }\n            if (n > 3) {\n                for (int i = 0; i < n - 1; i++) {\n                    if (adata[i] == adata[i + 1] - 1) {\n                        sum = sum + cdata[i + 1];\n                    }\n                }\n            } else if (n == 2) {\n                for (int i = 0; i < n - 1; i++) {\n                    if (adata[i] == adata[i + 1] - 1) {\n                        sum = sum + cdata[i];\n                    }\n                }\n            } else {\n                for (int i = 0; i < n - 1; i++) {\n                    if (adata[i] == adata[i + 1] - 1) {\n                        sum = sum + cdata[i - 1];\n                    }\n                }\n            }\n            System.out.println(sum);\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02603",
    "code_tokens": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int[] A = new int[N];\n        for (int i = 0; i < N; i++) {\n            A[i] = sc.nextInt();\n        }\n        int[][] dp = new int[8000+5][80+5];\n        for (int i = 0; i < dp.length; i++ ) {\n            for (int j = 0; j < dp[0].length; j++) {\n                dp[i][j] = -1;\n            }\n        }\n        dp[1000][0] = 0;\n        for (int j = 0; j < dp[0].length; j++ ) {\n            for (int i = 0; i < dp.length; i++) {\n                if (dp[i][j] == -1 || j >= N) continue;\n                int price = A[j];\n                int num = i/price;\n                int remain = i - num*price;\n                if (num > 0) {\n                    dp[remain][j+1] = Math.max(dp[remain][j+1], dp[i][j]+num);\n                }\n                if (dp[i][j] > 0) {\n                    remain = i + dp[i][j]*price;\n                    dp[remain][j+1] = Math.max(dp[remain][j+1], 0);\n                }\n                dp[i][j+1] = Math.max(dp[i][j+1], dp[i][j]);\n            }\n        }\n        int ans = -1;\n        for (int i = 0; i < dp.length; i++) {\n            if (dp[i][N] == -1) continue;\n            ans = i;\n        }\n        System.out.println(ans);\n    }\n}",
    "submission_id": "s390425931",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 40,
    "if_count": 4,
    "else_count": 0,
    "for_count": 6,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int[] A = new int[N];\n        for (int i = 0; i < N; i++) {\n            A[i] = sc.nextInt();\n        }\n        int[][] dp = new int[8000+5][80+5];\n        for (int i = 0; i < dp.length; i++ ) {\n            for (int j = 0; j < dp[0].length; j++) {\n                dp[i][j] = -1;\n            }\n        }\n        dp[1000][0] = 0;\n        for (int j = 0; j < dp[0].length; j++ ) {\n            for (int i = 0; i < dp.length; i++) {\n                if (dp[i][j] == -1 || j >= N) continue;\n                int price = A[j];\n                int num = i/price;\n                int remain = i - num*price;\n                if (num > 0) {\n                    dp[remain][j+1] = Math.max(dp[remain][j+1], dp[i][j]+num);\n                }\n                if (dp[i][j] > 0) {\n                    remain = i + dp[i][j]*price;\n                    dp[remain][j+1] = Math.max(dp[remain][j+1], 0);\n                }\n                dp[i][j+1] = Math.max(dp[i][j+1], dp[i][j]);\n            }\n        }\n        int ans = -1;\n        for (int i = 0; i < dp.length; i++) {\n            if (dp[i][N] == -1) continue;\n            ans = i;\n        }\n        System.out.println(ans);\n    }\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            // Generate fuzzed input using FuzzedDataProvider\n            int N = data.consumeInt();\n            int[] A = new int[N];\n            for (int i = 0; i < N; i++) {\n                A[i] = data.consumeInt();\n            }\n\n            // Call the function under test with the fuzzed input\n            testInputOnMain(N, A);\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }",
      "testInputOnMain": "public static void testInputOnMain(int N, int[] A) {\n        try {\n            // Testing input on the main function\n            System.out.println(\"Testing input on main function: N=\" + N);\n\n            int[][] dp = new int[8000 + 5][80 + 5];\n            for (int i = 0; i < dp.length; i++) {\n                for (int j = 0; j < dp[0].length; j++) {\n                    dp[i][j] = -1;\n                }\n            }\n            dp[1000][0] = 0;\n            for (int j = 0; j < dp[0].length; j++) {\n                for (int i = 0; i < dp.length; i++) {\n                    if (dp[i][j] == -1 || j >= N) continue;\n                    int price = A[j];\n                    int num = i / price;\n                    int remain = i - num * price;\n                    if (num > 0) {\n                        dp[remain][j + 1] = Math.max(dp[remain][j + 1], dp[i][j] + num);\n                    }\n                    if (dp[i][j] > 0) {\n                        remain = i + dp[i][j] * price;\n                        dp[remain][j + 1] = Math.max(dp[remain][j + 1], 0);\n                    }\n                    dp[i][j + 1] = Math.max(dp[i][j + 1], dp[i][j]);\n                }\n            }\n            int ans = -1;\n            for (int i = 0; i < dp.length; i++) {\n                if (dp[i][N] == -1) continue;\n                ans = i;\n            }\n            System.out.println(ans);\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02392",
    "code_tokens": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
    "submission_id": "s502305175",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 31,
    "if_count": 0,
    "else_count": 0,
    "for_count": 0,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            String str = data.consumeString(10);\n            StringTokenizer st = new StringTokenizer(str, \" \");\n            int[] a = new int[3];\n            int i = 0;\n\n            while (st.hasMoreTokens() && i < 3) {\n                a[i] = Integer.parseInt(st.nextToken());\n                i++;\n            }\n\n            if (i == 3) {\n                testInputOnMain(a);\n            }\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }",
      "testInputOnMain": "public static void testInputOnMain(int[] a) {\n        try {\n            // Testing input on the main function\n            System.out.print(\"Testing input on main function: \");\n            for (int i = 0; i < a.length; i++) {\n                System.out.print(a[i] + \" \");\n            }\n\n            if (a[0] < a[1] && a[1] < a[2]) {\n                System.out.println(\" => YES\");\n            } else {\n                System.out.println(\" => NO\");\n            }\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02408",
    "code_tokens": "import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            String type = sc.next();\n            if (type.equals(\"S\")) {\n                a[i] = sc.nextInt() + 100;\n            } else if (type.equals(\"H\")) {\n                a[i] = sc.nextInt() + 200;\n            } else if (type.equals(\"C\")) {\n                a[i] = sc.nextInt() + 300;\n            } else if (type.equals(\"D\")) {\n                a[i] = sc.nextInt() + 400;\n            }\n        }\n        Arrays.sort(a);\n        for (int i = 1, j = 0; i <= 52; i++) {\n            if (i <= 13) { \n                if (a[j] == 100 + i) {\n                    j++;\n                } else {\n                    System.out.println(\"S \" + i);\n                }\n            } else if (i <= 26) { \n                if (a[j] == 200 + i - 13) {\n                    j++;\n                } else {\n                    System.out.println(\"H \" + (i - 13));\n                }\n            } else if (i <= 39) { \n                if (a[j] == 300 + i - 26) {\n                    j++;\n                } else {\n                    System.out.println(\"C \" + (i - 26));\n                }\n            } else { \n                if (a[j] == 400 + i - 39) {\n                    j++;\n                } else {\n                    System.out.println(\"D \" + (i - 39));\n                }\n            }\n        }\n    }\n}",
    "submission_id": "s741249232",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 49,
    "if_count": 11,
    "else_count": 10,
    "for_count": 2,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            String type = sc.next();\n            if (type.equals(\"S\")) {\n                a[i] = sc.nextInt() + 100;\n            } else if (type.equals(\"H\")) {\n                a[i] = sc.nextInt() + 200;\n            } else if (type.equals(\"C\")) {\n                a[i] = sc.nextInt() + 300;\n            } else if (type.equals(\"D\")) {\n                a[i] = sc.nextInt() + 400;\n            }\n        }\n        Arrays.sort(a);\n        for (int i = 1, j = 0; i <= 52; i++) {\n            if (i <= 13) { \n                if (a[j] == 100 + i) {\n                    j++;\n                } else {\n                    System.out.println(\"S \" + i);\n                }\n            } else if (i <= 26) { \n                if (a[j] == 200 + i - 13) {\n                    j++;\n                } else {\n                    System.out.println(\"H \" + (i - 13));\n                }\n            } else if (i <= 39) { \n                if (a[j] == 300 + i - 26) {\n                    j++;\n                } else {\n                    System.out.println(\"C \" + (i - 26));\n                }\n            } else { \n                if (a[j] == 400 + i - 39) {\n                    j++;\n                } else {\n                    System.out.println(\"D \" + (i - 39));\n                }\n            }\n        }\n    }\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int n = data.consumeInt();\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++) {\n                String type = data.consumeString(10);\n                if (type.equals(\"S\")) {\n                    a[i] = data.consumeInt() + 100;\n                } else if (type.equals(\"H\")) {\n                    a[i] = data.consumeInt() + 200;\n                } else if (type.equals(\"C\")) {\n                    a[i] = data.consumeInt() + 300;\n                } else if (type.equals(\"D\")) {\n                    a[i] = data.consumeInt() + 400;\n                }\n            }\n            Arrays.sort(a);\n            for (int i = 1, j = 0; i <= 52; i++) {\n                if (i <= 13) {\n                    if (a[j] == 100 + i) {\n                        j++;\n                    } else {\n                        System.out.println(\"S \" + i);\n                    }\n                } else if (i <= 26) {\n                    if (a[j] == 200 + i - 13) {\n                        j++;\n                    } else {\n                        System.out.println(\"H \" + (i - 13));\n                    }\n                } else if (i <= 39) {\n                    if (a[j] == 300 + i - 26) {\n                        j++;\n                    } else {\n                        System.out.println(\"C \" + (i - 26));\n                    }\n                } else {\n                    if (a[j] == 400 + i - 39) {\n                        j++;\n                    } else {\n                        System.out.println(\"D \" + (i - 39));\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02616",
    "code_tokens": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    int n = scanner.nextInt();\n    int k = scanner.nextInt();\n    int[] A = new int[n];\n    for (int i = 0; i < n; i++) {\n      A[i] = scanner.nextInt();\n    }\n    List<Integer> pos = new ArrayList<>();\n    List<Integer> neg = new ArrayList<>();\n    for (int i : A) {\n      if (i >= 0) {\n        pos.add(i);\n      } else {\n        neg.add(i);\n      }\n    }\n    pos.sort(Comparator.reverseOrder());\n    neg.sort(Comparator.reverseOrder());\n    long[] posMul = new long[pos.size() + 1];\n    long[] negMul = new long[neg.size() + 1];\n    posMul[0] = 1;\n    negMul[0] = 1;\n    int mod = 1000000007;\n    for (int i = 1; i < posMul.length; i++) {\n      posMul[i] = posMul[i - 1] * pos.get(i - 1);\n      posMul[i] %= mod;\n    }\n    for (int i = 1; i < negMul.length; i++) {\n      negMul[i] = negMul[i - 1] * neg.get(i - 1);\n      negMul[i] %= mod;\n    }\n    long res = Integer.MIN_VALUE;\n    if (neg.size() == 0) {\n      res = posMul[k];\n      System.out.println(res < 0 ? res + mod : res % mod);\n      return;\n    }\n    if (pos.size() == 0) {\n      res = negMul[k];\n      System.out.println(res < 0 ? res + mod : res % mod);\n      return;\n    }\n    for (int i = 1; i <= Math.min(k, posMul.length); i++) {\n      res = Math.max(res, posMul[k] * negMul[k - i]);\n    }\n    System.out.println(res < 0 ? res + mod : res % mod);\n  }\n  private static final Scanner scanner = new Scanner(System.in);\n}",
    "submission_id": "s109776224",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 51,
    "if_count": 3,
    "else_count": 1,
    "for_count": 5,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    int n = scanner.nextInt();\n    int k = scanner.nextInt();\n    int[] A = new int[n];\n    for (int i = 0; i < n; i++) {\n      A[i] = scanner.nextInt();\n    }\n    List<Integer> pos = new ArrayList<>();\n    List<Integer> neg = new ArrayList<>();\n    for (int i : A) {\n      if (i >= 0) {\n        pos.add(i);\n      } else {\n        neg.add(i);\n      }\n    }\n    pos.sort(Comparator.reverseOrder());\n    neg.sort(Comparator.reverseOrder());\n    long[] posMul = new long[pos.size() + 1];\n    long[] negMul = new long[neg.size() + 1];\n    posMul[0] = 1;\n    negMul[0] = 1;\n    int mod = 1000000007;\n    for (int i = 1; i < posMul.length; i++) {\n      posMul[i] = posMul[i - 1] * pos.get(i - 1);\n      posMul[i] %= mod;\n    }\n    for (int i = 1; i < negMul.length; i++) {\n      negMul[i] = negMul[i - 1] * neg.get(i - 1);\n      negMul[i] %= mod;\n    }\n    long res = Integer.MIN_VALUE;\n    if (neg.size() == 0) {\n      res = posMul[k];\n      System.out.println(res < 0 ? res + mod : res % mod);\n      return;\n    }\n    if (pos.size() == 0) {\n      res = negMul[k];\n      System.out.println(res < 0 ? res + mod : res % mod);\n      return;\n    }\n    for (int i = 1; i <= Math.min(k, posMul.length); i++) {\n      res = Math.max(res, posMul[k] * negMul[k - i]);\n    }\n    System.out.println(res < 0 ? res + mod : res % mod);\n  }\n  private static final Scanner scanner = new Scanner(System.in);\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int n = data.consumeInt();\n            int k = data.consumeInt();\n            int[] A = new int[n];\n            for (int i = 0; i < n; i++) {\n                A[i] = data.consumeInt();\n            }\n            List<Integer> pos = new ArrayList<>();\n            List<Integer> neg = new ArrayList<>();\n            for (int i : A) {\n                if (i >= 0) {\n                    pos.add(i);\n                } else {\n                    neg.add(i);\n                }\n            }\n            pos.sort(Comparator.reverseOrder());\n            neg.sort(Comparator.reverseOrder());\n            long[] posMul = new long[pos.size() + 1];\n            long[] negMul = new long[neg.size() + 1];\n            posMul[0] = 1;\n            negMul[0] = 1;\n            int mod = 1000000007;\n            for (int i = 1; i < posMul.length; i++) {\n                posMul[i] = posMul[i - 1] * pos.get(i - 1);\n                posMul[i] %= mod;\n            }\n            for (int i = 1; i < negMul.length; i++) {\n                negMul[i] = negMul[i - 1] * neg.get(i - 1);\n                negMul[i] %= mod;\n            }\n            long res = Integer.MIN_VALUE;\n            if (neg.size() == 0) {\n                res = posMul[k];\n                System.out.println(res < 0 ? res + mod : res % mod);\n                return;\n            }\n            if (pos.size() == 0) {\n                res = negMul[k];\n                System.out.println(res < 0 ? res + mod : res % mod);\n                return;\n            }\n            for (int i = 1; i <= Math.min(k, posMul.length); i++) {\n                res = Math.max(res, posMul[k] * negMul[k - i]);\n            }\n            System.out.println(res < 0 ? res + mod : res % mod);\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p00606",
    "code_tokens": "import java.math.BigDecimal;\nimport java.util.*;\nimport static java.util.Arrays.*;\nimport static java.lang.Math.*;\nclass Main {\n\tstatic Scanner sc = new Scanner(System.in);\n\tstatic int n;\n\tstatic char s, t, b;\n\tstatic int[] dx = {-1, 0, 1, 0}, dy = {0, -1, 0, 1};\n\tpublic static void main(String[] args) {\n\t\twhile (read()) {\n\t\t\tsolve();\n\t\t}\n\t}\n\tstatic boolean read() {\n\t\tn = sc.nextInt();\n\t\tif (n == 0) return false;\n\t\ts = sc.next().charAt(0);\n\t\tt = sc.next().charAt(0);\n\t\tb = sc.next().charAt(0);\n\t\treturn true;\n\t}\n\tstatic void solve() {\n\t\tBigDecimal[][][] dp = new BigDecimal[n + 1][5][5];\n\t\tfor (int i = 0; i <= n; i++) { \n\t\t\tfor (int j = 0; j < 5; j++) {\n\t\t\t\tfor (int k = 0; k < 5; k++) {\n\t\t\t\t\tdp[i][j][k] = new BigDecimal(0.0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint pos_s = s - 'A', pos_t = t - 'A', pos_b = b - 'A';\n\t\tint sx = pos_s % 3 + 1, sy = pos_s / 3 + 1;\n\t\tint gx = pos_t % 3 + 1, gy = pos_t / 3 + 1;\n\t\tint bx = pos_b % 3 + 1, by = pos_b / 3 + 1;\n\t\tdp[0][sy][sx] = new BigDecimal(1.0);\n\t\tBigDecimal bf = new BigDecimal(0.25);\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int y = 1; y <= 3; y++) {\n\t\t\t\tfor (int x = 1; x <= 3; x++) {\n\t\t\t\t\tfor (int l = 0; l < 4; l++) {\n\t\t\t\t\t\tint ty = y + dy[l], tx = x + dx[l];\n\t\t\t\t\t\tif ((y == by) && (x == bx)){\n\t\t\t\t\t\t\tty = y; tx = x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdp[i][ty][tx] = dp[i][ty][tx].add(dp[i - 1][y][x].multiply(bf));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.printf(\"%.8f\", dp[n][gy][gx]);\n\t\tSystem.out.println();\n\t}\n}",
    "submission_id": "s657908154",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 54,
    "if_count": 2,
    "else_count": 0,
    "for_count": 7,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.math.BigDecimal;\nimport java.util.*;\nimport static java.util.Arrays.*;\nimport static java.lang.Math.*;\nclass Main {\n\tstatic Scanner sc = new Scanner(System.in);\n\tstatic int n;\n\tstatic char s, t, b;\n\tstatic int[] dx = {-1, 0, 1, 0}, dy = {0, -1, 0, 1};\n\tpublic static void main(String[] args) {\n\t\twhile (read()) {\n\t\t\tsolve();\n\t\t}\n\t}\n\tstatic boolean read() {\n\t\tn = sc.nextInt();\n\t\tif (n == 0) return false;\n\t\ts = sc.next().charAt(0);\n\t\tt = sc.next().charAt(0);\n\t\tb = sc.next().charAt(0);\n\t\treturn true;\n\t}\n\tstatic void solve() {\n\t\tBigDecimal[][][] dp = new BigDecimal[n + 1][5][5];\n\t\tfor (int i = 0; i <= n; i++) { \n\t\t\tfor (int j = 0; j < 5; j++) {\n\t\t\t\tfor (int k = 0; k < 5; k++) {\n\t\t\t\t\tdp[i][j][k] = new BigDecimal(0.0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint pos_s = s - 'A', pos_t = t - 'A', pos_b = b - 'A';\n\t\tint sx = pos_s % 3 + 1, sy = pos_s / 3 + 1;\n\t\tint gx = pos_t % 3 + 1, gy = pos_t / 3 + 1;\n\t\tint bx = pos_b % 3 + 1, by = pos_b / 3 + 1;\n\t\tdp[0][sy][sx] = new BigDecimal(1.0);\n\t\tBigDecimal bf = new BigDecimal(0.25);\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int y = 1; y <= 3; y++) {\n\t\t\t\tfor (int x = 1; x <= 3; x++) {\n\t\t\t\t\tfor (int l = 0; l < 4; l++) {\n\t\t\t\t\t\tint ty = y + dy[l], tx = x + dx[l];\n\t\t\t\t\t\tif ((y == by) && (x == bx)){\n\t\t\t\t\t\t\tty = y; tx = x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdp[i][ty][tx] = dp[i][ty][tx].add(dp[i - 1][y][x].multiply(bf));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.printf(\"%.8f\", dp[n][gy][gx]);\n\t\tSystem.out.println();\n\t}\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int n = data.consumeInt();\n            char s = data.consumeChar();\n            char t = data.consumeChar();\n            char b = data.consumeChar();\n\n            BigDecimal[][][] dp = new BigDecimal[n + 1][5][5];\n            for (int i = 0; i <= n; i++) {\n                for (int j = 0; j < 5; j++) {\n                    for (int k = 0; k < 5; k++) {\n                        dp[i][j][k] = new BigDecimal(0.0);\n                    }\n                }\n            }\n\n            int pos_s = s - 'A', pos_t = t - 'A', pos_b = b - 'A';\n            int sx = pos_s % 3 + 1, sy = pos_s / 3 + 1;\n            int gx = pos_t % 3 + 1, gy = pos_t / 3 + 1;\n            int bx = pos_b % 3 + 1, by = pos_b / 3 + 1;\n            dp[0][sy][sx] = new BigDecimal(1.0);\n            BigDecimal bf = new BigDecimal(0.25);\n\n            for (int i = 1; i <= n; i++) {\n                for (int y = 1; y <= 3; y++) {\n                    for (int x = 1; x <= 3; x++) {\n                        for (int l = 0; l < 4; l++) {\n                            int ty = y + Main.dy[l], tx = x + Main.dx[l];\n                            if ((y == by) && (x == bx)) {\n                                ty = y;\n                                tx = x;\n                            }\n                            dp[i][ty][tx] = dp[i][ty][tx].add(dp[i - 1][y][x].multiply(bf));\n                        }\n                    }\n                }\n            }\n\n            System.out.printf(\"%.8f\", dp[n][gy][gx]);\n            System.out.println();\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03402",
    "code_tokens": "\nimport java.util.Scanner;\nimport java.util.Arrays;\npublic class Main {\n    public static void main(String[] args) {\n        new Main().solve();\n    }\n    void solve() {\n        Scanner sc = new Scanner(System.in);\n        int A = sc.nextInt();\n        int B = sc.nextInt();\n        int t = 1, y = 1;\n        String S[][] = new String[500][500];\n        for (int i = 0; i < 250; i++) {\n            for (int j = 0; j < 500; j++) {\n                S[i][j] = \"#\";\n            }\n        }\n        for (int i = 250; i < 500; i++) {\n            for (int j = 0; j < 500; j++) {\n                S[i][j] = \".\";\n            }\n        }\n        while (A-- > 0) {\n            S[t][y] = \".\";\n            y += 2;\n            if (y > 500) {\n                t += 2;\n                y = 1;\n            }\n        }\n        t=250;\n        while (B-- > 0) {\n            S[t][y] = \"#\";\n            y += 2;\n            if (y > 500) {\n                t += 2;\n                y = 1;\n            }\n        }\n        for (int i = 0; i < 500; i++) {\n            for (int j = 0; j < 500; j++) {\n                System.out.print(S[i][j]);\n            }\n            System.out.println();\n        }\n    }\n}",
    "submission_id": "s346794332",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 48,
    "if_count": 2,
    "else_count": 0,
    "for_count": 6,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\npublic class Main {\n    public static void main(String[] args) {\n        new Main().solve();\n    }\n    void solve() {\n        Scanner sc = new Scanner(System.in);\n        int A = sc.nextInt();\n        int B = sc.nextInt();\n        int t = 1, y = 1;\n        String S[][] = new String[500][500];\n        for (int i = 0; i < 250; i++) {\n            for (int j = 0; j < 500; j++) {\n                S[i][j] = \"#\";\n            }\n        }\n        for (int i = 250; i < 500; i++) {\n            for (int j = 0; j < 500; j++) {\n                S[i][j] = \".\";\n            }\n        }\n        while (A-- > 0) {\n            S[t][y] = \".\";\n            y += 2;\n            if (y > 500) {\n                t += 2;\n                y = 1;\n            }\n        }\n        t=250;\n        while (B-- > 0) {\n            S[t][y] = \"#\";\n            y += 2;\n            if (y > 500) {\n                t += 2;\n                y = 1;\n            }\n        }\n        for (int i = 0; i < 500; i++) {\n            for (int j = 0; j < 500; j++) {\n                System.out.print(S[i][j]);\n            }\n            System.out.println();\n        }\n    }\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int A = data.consumeInt();\n            int B = data.consumeInt();\n            int t = 1, y = 1;\n            String S[][] = new String[500][500];\n            for (int i = 0; i < 250; i++) {\n                for (int j = 0; j < 500; j++) {\n                    S[i][j] = \"#\";\n                }\n            }\n            for (int i = 250; i < 500; i++) {\n                for (int j = 0; j < 500; j++) {\n                    S[i][j] = \".\";\n                }\n            }\n            while (A-- > 0) {\n                S[t][y] = \".\";\n                y += 2;\n                if (y > 500) {\n                    t += 2;\n                    y = 1;\n                }\n            }\n            t = 250;\n            while (B-- > 0) {\n                S[t][y] = \"#\";\n                y += 2;\n                if (y > 500) {\n                    t += 2;\n                    y = 1;\n                }\n            }\n            for (int i = 0; i < 500; i++) {\n                for (int j = 0; j < 500; j++) {\n                    System.out.print(S[i][j]);\n                }\n                System.out.println();\n            }\n\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p04015",
    "code_tokens": "import java.util.*;\n\tpublic class Main{\n\t\tpublic static void main(String[] args){\n            Scanner sc = new Scanner(System.in);\n            int n = Integer.parseInt(sc.next());\n            int a = Integer.parseInt(sc.next());\n            int[] nums = new int[n];\n            int max = 1;\n            for(int i=0; i<n; i++){\n            \tnums[i] = Integer.parseInt(sc.next());\n            \tif(max<nums[i]){\n            \t\tmax = nums[i];\n            \t}\n            }\n            long[][][] dp = new long[n+1][n+1][n*max+1];\n            for(int i=0; i<n+1; i++){\n            \tfor(int j=0; j<n*max+1; j++){\n            \t\tdp[0][i][j] = 0;\n            \t\tdp[i][0][j] = 0;\n            \t}\n            }\n            for(int i=0; i<n+1; i++){\n            \tdp[i][0][0] = 1;\n            }\n            for(int k=0; k<n*max+1; k++){\n            \tfor(int j=1; j<n+1; j++){\n            \t\tfor(int i=1; i<n+1; i++){\n            \t\t\tif(i<j){\n            \t\t\t\tdp[i][j][k] = 0;\n            \t\t\t}else{\n            \t\t\t\tdp[i][j][k] = dp[i-1][j][k];\n            \t\t\t\tif(k-nums[i-1] >= 0){\n            \t\t\t\t\tdp[i][j][k] += dp[i-1][j-1][k-nums[i-1]];\n            \t\t\t\t}\n            \t\t\t}\n            \t\t}\n            \t}\n            }\n            long ret = 0;\n            for(int i=1; i*a<n*max+1; i++){\n            \tret += dp[n][i][i*a];\n            }\n            System.out.println(ret);\n            sc.close();\n        }\n    }",
    "submission_id": "s820572542",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 46,
    "if_count": 0,
    "else_count": 0,
    "for_count": 0,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.*;\n\tpublic class Main{\n\t\tpublic static void main(String[] args){\n            Scanner sc = new Scanner(System.in);\n            int n = Integer.parseInt(sc.next());\n            int a = Integer.parseInt(sc.next());\n            int[] nums = new int[n];\n            int max = 1;\n            for(int i=0; i<n; i++){\n            \tnums[i] = Integer.parseInt(sc.next());\n            \tif(max<nums[i]){\n            \t\tmax = nums[i];\n            \t}\n            }\n            long[][][] dp = new long[n+1][n+1][n*max+1];\n            for(int i=0; i<n+1; i++){\n            \tfor(int j=0; j<n*max+1; j++){\n            \t\tdp[0][i][j] = 0;\n            \t\tdp[i][0][j] = 0;\n            \t}\n            }\n            for(int i=0; i<n+1; i++){\n            \tdp[i][0][0] = 1;\n            }\n            for(int k=0; k<n*max+1; k++){\n            \tfor(int j=1; j<n+1; j++){\n            \t\tfor(int i=1; i<n+1; i++){\n            \t\t\tif(i<j){\n            \t\t\t\tdp[i][j][k] = 0;\n            \t\t\t}else{\n            \t\t\t\tdp[i][j][k] = dp[i-1][j][k];\n            \t\t\t\tif(k-nums[i-1] >= 0){\n            \t\t\t\t\tdp[i][j][k] += dp[i-1][j-1][k-nums[i-1]];\n            \t\t\t\t}\n            \t\t\t}\n            \t\t}\n            \t}\n            }\n            long ret = 0;\n            for(int i=1; i*a<n*max+1; i++){\n            \tret += dp[n][i][i*a];\n            }\n            System.out.println(ret);\n            sc.close();\n        }\n    }",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int n = data.consumeInt();\n            int a = data.consumeInt();\n            int[] nums = new int[n];\n            int max = 1;\n            for (int i = 0; i < n; i++) {\n                nums[i] = data.consumeInt();\n                if (max < nums[i]) {\n                    max = nums[i];\n                }\n            }\n            long[][][] dp = new long[n + 1][n + 1][n * max + 1];\n            for (int i = 0; i < n + 1; i++) {\n                for (int j = 0; j < n * max + 1; j++) {\n                    dp[0][i][j] = 0;\n                    dp[i][0][j] = 0;\n                }\n            }\n            for (int i = 0; i < n + 1; i++) {\n                dp[i][0][0] = 1;\n            }\n            for (int k = 0; k < n * max + 1; k++) {\n                for (int j = 1; j < n + 1; j++) {\n                    for (int i = 1; i < n + 1; i++) {\n                        if (i < j) {\n                            dp[i][j][k] = 0;\n                        } else {\n                            dp[i][j][k] = dp[i - 1][j][k];\n                            if (k - nums[i - 1] >= 0) {\n                                dp[i][j][k] += dp[i - 1][j - 1][k - nums[i - 1]];\n                            }\n                        }\n                    }\n                }\n            }\n            long ret = 0;\n            for (int i = 1; i * a < n * max + 1; i++) {\n                ret += dp[n][i][i * a];\n            }\n            System.out.println(ret);\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03404",
    "code_tokens": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
    "submission_id": "s016834584",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 46,
    "if_count": 0,
    "else_count": 1,
    "for_count": 0,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int n = data.consumeInt();\n            int a = data.consumeInt();\n            int b = data.consumeInt();\n\n            System.out.println(100 + \" \" + 100);\n            String[][] grid = new String[100][100];\n\n            for (int i = 0; i < 100; i++) {\n                for (int j = 0; j < 100; j++) {\n                    if (i < 50) {\n                        grid[i][j] = \"*\";\n                    } else {\n                        grid[i][j] = \".\";\n                    }\n                }\n            }\n\n            a--;\n            b--;\n\n            for (int i = 0; i < 50; i++) {\n                for (int j = 0; j < 100; j++) {\n                    if (a == 0) break;\n                    if ((i % 2 == 0) && (j % 2 == 0)) {\n                        grid[i][j] = \".\";\n                        a--;\n                    }\n                }\n            }\n\n            for (int i = 99; i > 50; i--) {\n                for (int j = 0; j < 100; j++) {\n                    if (b == 0) break;\n                    if ((i % 2 == 1) && (j % 2 == 0)) {\n                        grid[i][j] = \"*\";\n                        b--;\n                    }\n                }\n            }\n\n            for (int i = 0; i < 100; i++) {\n                for (int j = 0; j < 100; j++) {\n                    System.out.print(grid[i][j]);\n                }\n                System.out.println();\n            }\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03274",
    "code_tokens": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        final Scanner sc = new Scanner(System.in);\n        final int N = sc.nextInt();\n        final int K = sc.nextInt();\n        final List<Long> posiArray = new ArrayList<Long>();\n        final List<Long> negaArray = new ArrayList<Long>();\n        long input;\n        int count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            input = sc.nextInt();\n            if (input < 0)\n            {\n                negaArray.add(input);\n            } else if (input > 0)\n            {\n                posiArray.add(input);\n            } else\n            {\n                count++;\n            }\n        }\n        int posiIndex = 0;\n        int negaIndex = negaArray.size() - 1;\n        long distance = 0;\n        for (int i = 0; i < N; i++)\n        {\n            if (posiArray.size() == 0 && negaArray.size() == 0)\n            {\n                distance = 0;\n                break;\n            } else if (posiArray.size() == 0)\n            {\n                distance = -negaArray.get(K - 1);\n                break;\n            } else if (negaArray.size() == 0)\n            {\n                distance = posiArray.get(K - 1);\n                break;\n            } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n            {\n                posiIndex++;\n            } else\n            {\n                negaIndex--;\n            }\n            count++;\n            if (count == K)\n            {\n                final long posiDis = posiArray.get(posiIndex - 1);\n                final long negaDis = negaArray.get(negaIndex + 1);\n                if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n                {\n                    distance = 2 * posiDis - negaDis;\n                } else\n                {\n                    distance = posiDis - 2 * negaDis;\n                }\n                break;\n            }\n        }\n        System.out.println(distance);\n    }\n}",
    "submission_id": "s304518563",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 70,
    "if_count": 8,
    "else_count": 7,
    "for_count": 2,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        // Main function, not directly used for fuzz testing\n    }\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n    try {\n        // Generate fuzzed input using FuzzedDataProvider\n        int N = data.consumeInt();\n        int K = data.consumeInt();\n        List<Long> posiArray = new ArrayList<Long>();\n        List<Long> negaArray = new ArrayList<Long>();\n        long input;\n        int count = 0;\n\n        for (int i = 0; i < N; i++) {\n            input = data.consumeLong();\n            if (input < 0) {\n                negaArray.add(input);\n            } else if (input > 0) {\n                posiArray.add(input);\n            } else {\n                count++;\n            }\n        }\n\n        int posiIndex = 0;\n        int negaIndex = negaArray.size() - 1;\n        long distance = 0;\n\n        for (int i = 0; i < N; i++) {\n            if (posiArray.size() == 0 && negaArray.size() == 0) {\n                distance = 0;\n                break;\n            } else if (posiArray.size() == 0) {\n                distance = -negaArray.get(K - 1);\n                break;\n            } else if (negaArray.size() == 0) {\n                distance = posiArray.get(K - 1);\n                break;\n            } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex)) {\n                posiIndex++;\n            } else {\n                negaIndex--;\n            }\n            count++;\n\n            if (count == K) {\n                long posiDis = posiArray.get(posiIndex - 1);\n                long negaDis = negaArray.get(negaIndex + 1);\n                if (posiDis - 2 * negaDis > 2 * posiDis - negaDis) {\n                    distance = 2 * posiDis - negaDis;\n                } else {\n                    distance = posiDis - 2 * negaDis;\n                }\n                break;\n            }\n        }\n\n        System.out.println(distance);\n\n    } catch (Exception e) {\n        // Catch and report any exceptions as errors\n        e.printStackTrace();\n    }\n}"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03090",
    "code_tokens": "import java.util.*;\npublic class Main {\n    void run() {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int sum = n * (n + 1) / 2;\n        if (sum % 2 == 0) {\n            int[] dp = new int[sum + 1];\n            Arrays.fill(dp, 1 << 20);\n            dp[0] = 0;\n            for (int i = 1; i <= n; i++) for (int j = sum - i; j >= 0; j--) if (dp[j] >= 0) {\n                dp[j + i] = Math.min(dp[j + i], i);\n            }\n            debug(dp);\n            HashSet<Integer> a = new HashSet<>();\n            HashSet<Integer> b = new HashSet<>();\n            int p = sum / 2;\n            while (p != 0) {\n                a.add(dp[p]);\n                p = p - dp[p];\n                debug(p);\n            }\n            for (int i = 1; i <= n; i++) if (!a.contains(i)) {\n                b.add(i);\n            }\n            int m = a.size() * b.size();\n            System.out.println(m);\n            for (int i: a) for (int j: b) {\n                System.out.println(i + \" \" + j);\n            }\n        } else {\n            int[] dp = new int[sum + 1];\n            Arrays.fill(dp, 1 << 20);\n            dp[0] = 0;\n            for (int i = 2; i <= n; i++) for (int j = sum - i; j >= 0; j--) if (dp[j] >= 0) {\n                dp[j + i] = Math.min(dp[j + i], i);\n            }\n            debug(dp);\n            HashSet<Integer> a = new HashSet<>();\n            HashSet<Integer> b = new HashSet<>();\n            int p = sum / 2;\n            while (p != 0) {\n                a.add(dp[p]);\n                p = p - dp[p];\n                debug(p);\n            }\n            for (int i = 1; i <= n; i++) if (!a.contains(i)) {\n                b.add(i);\n            }\n            a.add(1);\n            int m = a.size() * b.size() - 1;\n            System.out.println(m);\n            for (int i: a) for (int j: b) {\n                if (i == j) continue;\n                System.out.println(i + \" \" + j);\n            }\n        }\n    }\n    void debug(Object...os) {\n        System.err.println(Arrays.deepToString(os));\n    }\n    public static void main(String[] args) {\n        new Main().run();\n    }\n}",
    "submission_id": "s673186504",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 65,
    "if_count": 6,
    "else_count": 1,
    "for_count": 10,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.Arrays;\nimport java.util.HashSet;import java.util.*;\npublic class Main {\n    void run() {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int sum = n * (n + 1) / 2;\n        if (sum % 2 == 0) {\n            int[] dp = new int[sum + 1];\n            Arrays.fill(dp, 1 << 20);\n            dp[0] = 0;\n            for (int i = 1; i <= n; i++) for (int j = sum - i; j >= 0; j--) if (dp[j] >= 0) {\n                dp[j + i] = Math.min(dp[j + i], i);\n            }\n            debug(dp);\n            HashSet<Integer> a = new HashSet<>();\n            HashSet<Integer> b = new HashSet<>();\n            int p = sum / 2;\n            while (p != 0) {\n                a.add(dp[p]);\n                p = p - dp[p];\n                debug(p);\n            }\n            for (int i = 1; i <= n; i++) if (!a.contains(i)) {\n                b.add(i);\n            }\n            int m = a.size() * b.size();\n            System.out.println(m);\n            for (int i: a) for (int j: b) {\n                System.out.println(i + \" \" + j);\n            }\n        } else {\n            int[] dp = new int[sum + 1];\n            Arrays.fill(dp, 1 << 20);\n            dp[0] = 0;\n            for (int i = 2; i <= n; i++) for (int j = sum - i; j >= 0; j--) if (dp[j] >= 0) {\n                dp[j + i] = Math.min(dp[j + i], i);\n            }\n            debug(dp);\n            HashSet<Integer> a = new HashSet<>();\n            HashSet<Integer> b = new HashSet<>();\n            int p = sum / 2;\n            while (p != 0) {\n                a.add(dp[p]);\n                p = p - dp[p];\n                debug(p);\n            }\n            for (int i = 1; i <= n; i++) if (!a.contains(i)) {\n                b.add(i);\n            }\n            a.add(1);\n            int m = a.size() * b.size() - 1;\n            System.out.println(m);\n            for (int i: a) for (int j: b) {\n                if (i == j) continue;\n                System.out.println(i + \" \" + j);\n            }\n        }\n    }\n    void debug(Object...os) {\n        System.err.println(Arrays.deepToString(os));\n    }\n    public static void main(String[] args) {\n        new Main().run();\n    }\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int n = data.consumeInt();\n            int sum = n * (n + 1) / 2;\n            if (sum % 2 == 0) {\n                int[] dp = new int[sum + 1];\n                Arrays.fill(dp, 1 << 20);\n                dp[0] = 0;\n                for (int i = 1; i <= n; i++) for (int j = sum - i; j >= 0; j--) if (dp[j] >= 0) {\n                    dp[j + i] = Math.min(dp[j + i], i);\n                }\n                HashSet<Integer> a = new HashSet<>();\n                HashSet<Integer> b = new HashSet<>();\n                int p = sum / 2;\n                while (p != 0) {\n                    a.add(dp[p]);\n                    p = p - dp[p];\n                }\n                for (int i = 1; i <= n; i++) if (!a.contains(i)) {\n                    b.add(i);\n                }\n                int m = a.size() * b.size();\n                System.out.println(m);\n                for (int i: a) for (int j: b) {\n                    System.out.println(i + \" \" + j);\n                }\n            } else {\n                int[] dp = new int[sum + 1];\n                Arrays.fill(dp, 1 << 20);\n                dp[0] = 0;\n                for (int i = 2; i <= n; i++) for (int j = sum - i; j >= 0; j--) if (dp[j] >= 0) {\n                    dp[j + i] = Math.min(dp[j + i], i);\n                }\n                HashSet<Integer> a = new HashSet<>();\n                HashSet<Integer> b = new HashSet<>();\n                int p = sum / 2;\n                while (p != 0) {\n                    a.add(dp[p]);\n                    p = p - dp[p];\n                }\n                for (int i = 1; i <= n; i++) if (!a.contains(i)) {\n                    b.add(i);\n                }\n                a.add(1);\n                int m = a.size() * b.size() - 1;\n                System.out.println(m);\n                for (int i: a) for (int j: b) {\n                    if (i == j) continue;\n                    System.out.println(i + \" \" + j);\n                }\n            }\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }\n"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02760",
    "code_tokens": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint[][] array = new int[3][3];\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tarray[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint N = sc.nextInt();\n\t\tfor (int h = 0; h < N; h++) {\n\t\t\tint number = sc.nextInt();\n\t\t\tfor (int i = 0; i < 3; i++) {\n\t\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\t\tif (array[i][j] == number) {\n\t\t\t\t\t\tarray[i][j] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsc.close();\n\t\tboolean flag = false;\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[i][j];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[j][i];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\t\tint sum1 = array[0][0] + array[1][1] + array[2][2];\n\t\t\tif (sum1==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tint sum2 = array[0][3] + array[1][1] + array[3][0];\n\t\t\tif (sum2==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[2-i][i];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\tif(flag) {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}else {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}",
    "submission_id": "s188777614",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 68,
    "if_count": 6,
    "else_count": 0,
    "for_count": 11,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint[][] array = new int[3][3];\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tarray[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint N = sc.nextInt();\n\t\tfor (int h = 0; h < N; h++) {\n\t\t\tint number = sc.nextInt();\n\t\t\tfor (int i = 0; i < 3; i++) {\n\t\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\t\tif (array[i][j] == number) {\n\t\t\t\t\t\tarray[i][j] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsc.close();\n\t\tboolean flag = false;\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[i][j];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[j][i];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\t\tint sum1 = array[0][0] + array[1][1] + array[2][2];\n\t\t\tif (sum1==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tint sum2 = array[0][3] + array[1][1] + array[3][0];\n\t\t\tif (sum2==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[2-i][i];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\tif(flag) {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}else {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int[][] array = new int[3][3];\n            for (int i = 0; i < 3; i++) {\n                for (int j = 0; j < 3; j++) {\n                    array[i][j] = data.consumeInt();\n                }\n            }\n            int N = data.consumeInt();\n            for (int h = 0; h < N; h++) {\n                int number = data.consumeInt();\n                for (int i = 0; i < 3; i++) {\n                    for (int j = 0; j < 3; j++) {\n                        if (array[i][j] == number) {\n                            array[i][j] = 0;\n                        }\n                    }\n                }\n            }\n\n            boolean flag = false;\n            for (int i = 0; i < 3; i++) {\n                int sum = 0;\n                for (int j = 0; j < 3; j++) {\n                    sum = sum + array[i][j];\n                }\n                if (sum == 0) {\n                    flag = true;\n                }\n            }\n            for (int i = 0; i < 3; i++) {\n                int sum = 0;\n                for (int j = 0; j < 3; j++) {\n                    sum = sum + array[j][i];\n                }\n                if (sum == 0) {\n                    flag = true;\n                }\n            }\n            int sum1 = array[0][0] + array[1][1] + array[2][2];\n            if (sum1 == 0) {\n                flag = true;\n            }\n            int sum2 = array[0][2] + array[1][1] + array[2][0];\n            if (sum2 == 0) {\n                flag = true;\n            }\n            for (int i = 0; i < 3; i++) {\n                int sum = 0;\n                for (int j = 0; j < 3; j++) {\n                    sum = sum + array[2 - i][j];\n                }\n                if (sum == 0) {\n                    flag = true;\n                }\n            }\n\n            if (flag) {\n                System.out.println(\"Yes\");\n            } else {\n                System.out.println(\"No\");\n            }\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }\n"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02616",
    "code_tokens": "import java.math.BigInteger;\nimport java.util.*;\npublic class Main {\n  private static final int MOD = 1_000_000_007;\n  public static void main(String[] args) {\n    int n = scanner.nextInt();\n    int k = scanner.nextInt();\n    int[] A = new int[n];\n    for (int i = 0; i < n; i++) {\n      A[i] = scanner.nextInt();\n    }\n    List<Integer> pos = new ArrayList<>();\n    List<Integer> neg = new ArrayList<>();\n    int zero = 0;\n    for (int i : A) {\n      if (i > 0) {\n        pos.add(i);\n      } else if (i < 0) {\n        neg.add(i);\n      } else {\n        zero++;\n      }\n    }\n    if (pos.size() + neg.size() < k || (n == k && zero > 0)) {\n      System.out.println(0);\n      return;\n    }\n    if (n == k) {\n      long res = 1;\n      for (int i : A) {\n        res = (res * i) % MOD;\n      }\n      System.out.println(Math.floorMod(res, MOD));\n      return;\n    }\n    pos.sort(Comparator.reverseOrder());\n    neg.sort(Comparator.reverseOrder());\n    BigInteger[] posMulLft = new BigInteger[pos.size() + 1];\n    BigInteger[] negMulLft = new BigInteger[neg.size() + 1];\n    BigInteger[] negMulRgt = new BigInteger[neg.size() + 1];\n    posMulLft[0] = BigInteger.ONE;\n    negMulLft[0] = BigInteger.ONE;\n    negMulRgt[negMulRgt.length - 1] = BigInteger.ONE;\n    for (int i = 1; i < Math.min(k + 1, posMulLft.length); i++) {\n      posMulLft[i] = posMulLft[i - 1].multiply(BigInteger.valueOf(pos.get(i - 1)));\n    }\n    for (int i = 1; i < Math.min(k + 1, negMulLft.length); i++) {\n      negMulLft[i] = negMulLft[i - 1].multiply(BigInteger.valueOf(neg.get(i - 1)));\n    }\n    for (int i = negMulRgt.length - 2, j = k; i >= 0 && j > 0; i--, j--) {\n      negMulRgt[i] = negMulRgt[i + 1].multiply(BigInteger.valueOf(neg.get(i)));\n    }\n    BigInteger res = BigInteger.valueOf(Long.MIN_VALUE);\n    for (int i = 0; i < Math.min(k + 1, posMulLft.length); i++) {\n      if (k - i < negMulLft.length) {\n        res = posMulLft[i].multiply(negMulLft[k - i]).max(res);\n      }\n    }\n    for (int i = 0; i < Math.min(k + 1, negMulRgt.length); i++) {\n      if (k - i < posMulLft.length) {\n        res = negMulRgt[negMulRgt.length - 1 - i].multiply(posMulLft[k - i]).max(res);\n      }\n    }\n    System.out.println(res.mod(BigInteger.valueOf(MOD)));\n  }\n  private static final Scanner scanner = new Scanner(System.in);\n}",
    "submission_id": "s211375304",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 67,
    "if_count": 6,
    "else_count": 2,
    "for_count": 8,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.math.BigInteger;\nimport java.util.*;\npublic class Main {\n  private static final int MOD = 1_000_000_007;\n  public static void main(String[] args) {\n    int n = scanner.nextInt();\n    int k = scanner.nextInt();\n    int[] A = new int[n];\n    for (int i = 0; i < n; i++) {\n      A[i] = scanner.nextInt();\n    }\n    List<Integer> pos = new ArrayList<>();\n    List<Integer> neg = new ArrayList<>();\n    int zero = 0;\n    for (int i : A) {\n      if (i > 0) {\n        pos.add(i);\n      } else if (i < 0) {\n        neg.add(i);\n      } else {\n        zero++;\n      }\n    }\n    if (pos.size() + neg.size() < k || (n == k && zero > 0)) {\n      System.out.println(0);\n      return;\n    }\n    if (n == k) {\n      long res = 1;\n      for (int i : A) {\n        res = (res * i) % MOD;\n      }\n      System.out.println(Math.floorMod(res, MOD));\n      return;\n    }\n    pos.sort(Comparator.reverseOrder());\n    neg.sort(Comparator.reverseOrder());\n    BigInteger[] posMulLft = new BigInteger[pos.size() + 1];\n    BigInteger[] negMulLft = new BigInteger[neg.size() + 1];\n    BigInteger[] negMulRgt = new BigInteger[neg.size() + 1];\n    posMulLft[0] = BigInteger.ONE;\n    negMulLft[0] = BigInteger.ONE;\n    negMulRgt[negMulRgt.length - 1] = BigInteger.ONE;\n    for (int i = 1; i < Math.min(k + 1, posMulLft.length); i++) {\n      posMulLft[i] = posMulLft[i - 1].multiply(BigInteger.valueOf(pos.get(i - 1)));\n    }\n    for (int i = 1; i < Math.min(k + 1, negMulLft.length); i++) {\n      negMulLft[i] = negMulLft[i - 1].multiply(BigInteger.valueOf(neg.get(i - 1)));\n    }\n    for (int i = negMulRgt.length - 2, j = k; i >= 0 && j > 0; i--, j--) {\n      negMulRgt[i] = negMulRgt[i + 1].multiply(BigInteger.valueOf(neg.get(i)));\n    }\n    BigInteger res = BigInteger.valueOf(Long.MIN_VALUE);\n    for (int i = 0; i < Math.min(k + 1, posMulLft.length); i++) {\n      if (k - i < negMulLft.length) {\n        res = posMulLft[i].multiply(negMulLft[k - i]).max(res);\n      }\n    }\n    for (int i = 0; i < Math.min(k + 1, negMulRgt.length); i++) {\n      if (k - i < posMulLft.length) {\n        res = negMulRgt[negMulRgt.length - 1 - i].multiply(posMulLft[k - i]).max(res);\n      }\n    }\n    System.out.println(res.mod(BigInteger.valueOf(MOD)));\n  }\n  private static final Scanner scanner = new Scanner(System.in);\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int n = data.consumeInt();\n            int k = data.consumeInt();\n            int[] A = new int[n];\n            for (int i = 0; i < n; i++) {\n                A[i] = data.consumeInt();\n            }\n            List<Integer> pos = new ArrayList<>();\n            List<Integer> neg = new ArrayList<>();\n            int zero = 0;\n            for (int i : A) {\n                if (i > 0) {\n                    pos.add(i);\n                } else if (i < 0) {\n                    neg.add(i);\n                } else {\n                    zero++;\n                }\n            }\n            if (pos.size() + neg.size() < k || (n == k && zero > 0)) {\n                System.out.println(0);\n                return;\n            }\n            if (n == k) {\n                BigInteger res = BigInteger.ONE;\n                for (int i : A) {\n                    res = res.multiply(BigInteger.valueOf(i)).mod(BigInteger.valueOf(MOD));\n                }\n                System.out.println(res);\n                return;\n            }\n            pos.sort(Comparator.reverseOrder());\n            neg.sort(Comparator.reverseOrder());\n            BigInteger[] posMulLft = new BigInteger[pos.size() + 1];\n            BigInteger[] negMulLft = new BigInteger[neg.size() + 1];\n            BigInteger[] negMulRgt = new BigInteger[neg.size() + 1];\n            posMulLft[0] = BigInteger.ONE;\n            negMulLft[0] = BigInteger.ONE;\n            negMulRgt[negMulRgt.length - 1] = BigInteger.ONE;\n            for (int i = 1; i < Math.min(k + 1, posMulLft.length); i++) {\n                posMulLft[i] = posMulLft[i - 1].multiply(BigInteger.valueOf(pos.get(i - 1)));\n            }\n            for (int i = 1; i < Math.min(k + 1, negMulLft.length); i++) {\n                negMulLft[i] = negMulLft[i - 1].multiply(BigInteger.valueOf(neg.get(i - 1)));\n            }\n            for (int i = negMulRgt.length - 2, j = k; i >= 0 && j > 0; i--, j--) {\n                negMulRgt[i] = negMulRgt[i + 1].multiply(BigInteger.valueOf(neg.get(i)));\n            }\n            BigInteger res = BigInteger.valueOf(Long.MIN_VALUE);\n            for (int i = 0; i < Math.min(k + 1, posMulLft.length); i++) {\n                if (k - i < negMulLft.length) {\n                    res = posMulLft[i].multiply(negMulLft[k - i]).max(res);\n                }\n            }\n            for (int i = 0; i < Math.min(k + 1, negMulRgt.length); i++) {\n                if (k - i < posMulLft.length) {\n                    res = negMulRgt[negMulRgt.length - 1 - i].multiply(posMulLft[k - i]).max(res);\n                }\n            }\n            System.out.println(res.mod(BigInteger.valueOf(MOD)));\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }\n"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02618",
    "code_tokens": "import java.util.*;\npublic class Main {\n    public static void sort(int array[], int array2[], int left, int right){\n        if(left <= right){\n            int p = array[(left + right) >>> 1];\n            int l = left;\n            int r = right;\n            while(l <= r){\n                while (array[l] < p){\n                    l++;\n                }\n                while (array[r] > p){\n                    r--;\n                }\n                if (l <= r){\n                    int tmp = array[l];\n                    array[l] = array[r];\n                    array[r] = tmp;\n                    int tmp2 = array2[l];\n                    array2[l] = array2[r];\n                    array2[r] = tmp2;\n                    l++;\n                    r--;\n                }\n            }\n            Main.sort(array, array2, left, r);\n            Main.sort(array, array2, l, right);\n        }\n    }\n    public static void main(String args[]){\n        Scanner stdIn = new Scanner(System.in);\n        int n = stdIn.nextInt();\n        int c[] = new int[26];\n        int s[][] = new int[n][26];\n        int ind[] = new int[26];\n        for(int i = 0; i < 26; i++){\n            c[i] = stdIn.nextInt();\n            ind[i] = i;\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < 26; j++){\n                s[i][j] = stdIn.nextInt();\n            }\n        }\n        for(int i = 0; i < n - 26; i++){\n            int max = 0;\n            int index = 0;\n            for(int j = 0; j < 26; j++){\n                if(s[i][j] > max){\n                    max = s[i][j];\n                    index = j;\n                }\n            }\n            System.out.println(index + 1);\n        }\n        Main.sort(c, ind, 0, n - 1);\n        for(int i = 26; i < 0; i--){\n            System.out.println(ind[i]);\n        }\n    }\n}",
    "submission_id": "s612236725",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 61,
    "if_count": 1,
    "else_count": 0,
    "for_count": 0,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.*;\npublic class Main {\n    public static void sort(int array[], int array2[], int left, int right){\n        if(left <= right){\n            int p = array[(left + right) >>> 1];\n            int l = left;\n            int r = right;\n            while(l <= r){\n                while (array[l] < p){\n                    l++;\n                }\n                while (array[r] > p){\n                    r--;\n                }\n                if (l <= r){\n                    int tmp = array[l];\n                    array[l] = array[r];\n                    array[r] = tmp;\n                    int tmp2 = array2[l];\n                    array2[l] = array2[r];\n                    array2[r] = tmp2;\n                    l++;\n                    r--;\n                }\n            }\n            Main.sort(array, array2, left, r);\n            Main.sort(array, array2, l, right);\n        }\n    }\n    public static void main(String args[]){\n        Scanner stdIn = new Scanner(System.in);\n        int n = stdIn.nextInt();\n        int c[] = new int[26];\n        int s[][] = new int[n][26];\n        int ind[] = new int[26];\n        for(int i = 0; i < 26; i++){\n            c[i] = stdIn.nextInt();\n            ind[i] = i;\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < 26; j++){\n                s[i][j] = stdIn.nextInt();\n            }\n        }\n        for(int i = 0; i < n - 26; i++){\n            int max = 0;\n            int index = 0;\n            for(int j = 0; j < 26; j++){\n                if(s[i][j] > max){\n                    max = s[i][j];\n                    index = j;\n                }\n            }\n            System.out.println(index + 1);\n        }\n        Main.sort(c, ind, 0, n - 1);\n        for(int i = 26; i < 0; i--){\n            System.out.println(ind[i]);\n        }\n    }\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int n = data.consumeInt();\n            int[] c = new int[26];\n            int[][] s = new int[n][26];\n            int[] ind = new int[26];\n            for (int i = 0; i < 26; i++) {\n                c[i] = data.consumeInt();\n                ind[i] = i;\n            }\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < 26; j++) {\n                    s[i][j] = data.consumeInt();\n                }\n            }\n            for (int i = 0; i < n - 26; i++) {\n                int max = 0;\n                int index = 0;\n                for (int j = 0; j < 26; j++) {\n                    if (s[i][j] > max) {\n                        max = s[i][j];\n                        index = j;\n                    }\n                }\n                System.out.println(index + 1);\n            }\n            sort(c, ind, 0, n - 1);\n            for (int i = 26; i < 0; i--) {\n                System.out.println(ind[i]);\n            }\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }",
      "sort": "public static void sort(int array[], int array2[], int left, int right) {\n        if (left <= right) {\n            int p = array[(left + right) >>> 1];\n            int l = left;\n            int r = right;\n            while (l <= r) {\n                while (array[l] < p) {\n                    l++;\n                }\n                while (array[r] > p) {\n                    r--;\n                }\n                if (l <= r) {\n                    int tmp = array[l];\n                    array[l] = array[r];\n                    array[r] = tmp;\n                    int tmp2 = array2[l];\n                    array2[l] = array2[r];\n                    array2[r] = tmp2;\n                    l++;\n                    r--;\n                }\n            }\n            sort(array, array2, left, r);\n            sort(array, array2, l, right);\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03660",
    "code_tokens": "import java.util.*;\nclass Main{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        HashSet<Integer>[] map = new HashSet[N+1];\n        for(int i=0;i<=N;i++) map[i]=new HashSet<>();\n        for(int i=1;i<=N-1;i++){\n            int a = sc.nextInt();\n            int b = sc.nextInt();\n            map[a].add(b);\n            map[b].add(a);\n        }\n        int[] color = new int[N+1];\n        color[1]=1; \n        color[N]=-1; \n        boolean isBlack = true;\n        LinkedList<Integer> bCur = new LinkedList<>();\n        LinkedList<Integer> bNext = new LinkedList<>();\n        LinkedList<Integer> wCur = new LinkedList<>();\n        LinkedList<Integer> wNext = new LinkedList<>();\n        bCur.add(1);\n        wCur.add(N);\n        while(bCur.size()>0||wCur.size()>0){\n            if(isBlack){\n                int cur = bCur.poll();\n                for(Integer w:map[cur]){\n                    if(color[w]==0){\n                        color[w]=1;\n                        bNext.add(w);\n                    }\n                }\n                if(bCur.size()==0){\n                    bCur = bNext;\n                    bNext = new LinkedList<>();\n                    isBlack = !isBlack;\n                }\n            } else{\n                int cur = wCur.poll();\n                for(Integer w:map[cur]){\n                    if(color[w]==0){\n                        color[w]=-1;\n                        wNext.add(w);\n                    }\n                }\n                if(wCur.size()==0){\n                    wCur = wNext;\n                    wNext = new LinkedList<>();\n                    isBlack = !isBlack;\n                }\n            }\n        }\n        int bCnt = 0;\n        for(int i=1;i<=N;i++){\n            if(color[i]==1) bCnt++;\n        }\n        String ans = \"Snuke\";\n        if(bCnt>N-bCnt) ans = \"Fennec\";\n        System.out.println(ans);\n    }\n}",
    "submission_id": "s536612154",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 61,
    "if_count": 0,
    "else_count": 0,
    "for_count": 0,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.*;\nclass Main{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        HashSet<Integer>[] map = new HashSet[N+1];\n        for(int i=0;i<=N;i++) map[i]=new HashSet<>();\n        for(int i=1;i<=N-1;i++){\n            int a = sc.nextInt();\n            int b = sc.nextInt();\n            map[a].add(b);\n            map[b].add(a);\n        }\n        int[] color = new int[N+1];\n        color[1]=1; \n        color[N]=-1; \n        boolean isBlack = true;\n        LinkedList<Integer> bCur = new LinkedList<>();\n        LinkedList<Integer> bNext = new LinkedList<>();\n        LinkedList<Integer> wCur = new LinkedList<>();\n        LinkedList<Integer> wNext = new LinkedList<>();\n        bCur.add(1);\n        wCur.add(N);\n        while(bCur.size()>0||wCur.size()>0){\n            if(isBlack){\n                int cur = bCur.poll();\n                for(Integer w:map[cur]){\n                    if(color[w]==0){\n                        color[w]=1;\n                        bNext.add(w);\n                    }\n                }\n                if(bCur.size()==0){\n                    bCur = bNext;\n                    bNext = new LinkedList<>();\n                    isBlack = !isBlack;\n                }\n            } else{\n                int cur = wCur.poll();\n                for(Integer w:map[cur]){\n                    if(color[w]==0){\n                        color[w]=-1;\n                        wNext.add(w);\n                    }\n                }\n                if(wCur.size()==0){\n                    wCur = wNext;\n                    wNext = new LinkedList<>();\n                    isBlack = !isBlack;\n                }\n            }\n        }\n        int bCnt = 0;\n        for(int i=1;i<=N;i++){\n            if(color[i]==1) bCnt++;\n        }\n        String ans = \"Snuke\";\n        if(bCnt>N-bCnt) ans = \"Fennec\";\n        System.out.println(ans);\n    }\n}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int N = data.consumeInt();\n            HashSet<Integer>[] map = new HashSet[N + 1];\n            for (int i = 0; i <= N; i++)\n                map[i] = new HashSet<>();\n            for (int i = 1; i <= N - 1; i++) {\n                int a = data.consumeInt();\n                int b = data.consumeInt();\n                map[a].add(b);\n                map[b].add(a);\n            }\n\n            int[] color = new int[N + 1];\n            color[1] = 1;\n            color[N] = -1;\n            boolean isBlack = true;\n            LinkedList<Integer> bCur = new LinkedList<>();\n            LinkedList<Integer> bNext = new LinkedList<>();\n            LinkedList<Integer> wCur = new LinkedList<>();\n            LinkedList<Integer> wNext = new LinkedList<>();\n            bCur.add(1);\n            wCur.add(N);\n            while (bCur.size() > 0 || wCur.size() > 0) {\n                if (isBlack) {\n                    int cur = bCur.poll();\n                    for (Integer w : map[cur]) {\n                        if (color[w] == 0) {\n                            color[w] = 1;\n                            bNext.add(w);\n                        }\n                    }\n                    if (bCur.size() == 0) {\n                        bCur = bNext;\n                        bNext = new LinkedList<>();\n                        isBlack = !isBlack;\n                    }\n                } else {\n                    int cur = wCur.poll();\n                    for (Integer w : map[cur]) {\n                        if (color[w] == 0) {\n                            color[w] = -1;\n                            wNext.add(w);\n                        }\n                    }\n                    if (wCur.size() == 0) {\n                        wCur = wNext;\n                        wNext = new LinkedList<>();\n                        isBlack = !isBlack;\n                    }\n                }\n            }\n            int bCnt = 0;\n            for (int i = 1; i <= N; i++) {\n                if (color[i] == 1)\n                    bCnt++;\n            }\n            String ans = \"Snuke\";\n            if (bCnt > N - bCnt)\n                ans = \"Fennec\";\n            System.out.println(ans);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03074",
    "code_tokens": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        char[] s = sc.next().toCharArray();\n        List<Integer> one = new ArrayList<>();\n        List<Integer> zero = new ArrayList<>();\n        int oneCnt = 0;\n        int zeroCnt = 0;\n        if (s[0] == '1') {\n            oneCnt++;\n        } else {\n            zeroCnt++;\n            one.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            if (s[i] == '1') {\n                oneCnt++;\n                if (zeroCnt != 0) {\n                    zero.add(zeroCnt);\n                    zeroCnt = 0;\n                }\n            } else {\n                zeroCnt++;\n                if (oneCnt != 0) {\n                    one.add(oneCnt);\n                    oneCnt = 0;\n                }\n            }\n        }\n        if (oneCnt != 0) {\n            one.add(oneCnt);\n        } else if (zeroCnt != 0) {\n            zero.add(zeroCnt);\n            one.add(0);\n        }\n        if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n            System.out.println(s.length);\n            return;\n        }\n        long oneSum = 0;\n        long zeroSum = 0;\n        for (int i = 0; i < k + 1; i++) {\n            oneSum += one.get(i);\n        }\n        for (int i = 0; i < k; i++) {\n            zeroSum += zero.get(i);\n        }\n        long ans = zeroSum + oneSum;\n        for (int i = 1; i < zero.size() - k + 1; i++) {\n            zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n            oneSum += one.get(i + k) - one.get(i - 1);\n            ans = Math.max(zeroSum + oneSum, ans);\n        }\n        System.out.println(ans);\n    }\n}",
    "submission_id": "s994136192",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 61,
    "if_count": 7,
    "else_count": 3,
    "for_count": 4,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        char[] s = sc.next().toCharArray();\n        List<Integer> one = new ArrayList<>();\n        List<Integer> zero = new ArrayList<>();\n        int oneCnt = 0;\n        int zeroCnt = 0;\n        if (s[0] == '1') {\n            oneCnt++;\n        } else {\n            zeroCnt++;\n            one.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            if (s[i] == '1') {\n                oneCnt++;\n                if (zeroCnt != 0) {\n                    zero.add(zeroCnt);\n                    zeroCnt = 0;\n                }\n            } else {\n                zeroCnt++;\n                if (oneCnt != 0) {\n                    one.add(oneCnt);\n                    oneCnt = 0;\n                }\n            }\n        }\n        if (oneCnt != 0) {\n            one.add(oneCnt);\n        } else if (zeroCnt != 0) {\n            zero.add(zeroCnt);\n            one.add(0);\n        }\n        if (zero.isEmpty() || (zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0)) {\n            System.out.println(s.length);\n            return;\n        }\n        long oneSum = 0;\n        long zeroSum = 0;\n        for (int i = 0; i < k + 1 && i < one.size(); i++) {\n            oneSum += one.get(i);\n        }\n        for (int i = 0; i < k && i < zero.size(); i++) {\n            zeroSum += zero.get(i);\n        }\n        long ans = zeroSum + oneSum;\n        for (int i = 1; i < zero.size() - k + 1 && i + k < one.size(); i++) {\n            zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n            oneSum += one.get(i + k) - one.get(i - 1);\n            ans = Math.max(zeroSum + oneSum, ans);\n        }\n        System.out.println(ans);\n    }}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int n = data.consumeInt();\n            int k = data.consumeInt();\n            String inputString = data.consumeString(10);\n            char[] s = inputString.toCharArray();\n            List<Integer> one = new ArrayList<>();\n            List<Integer> zero = new ArrayList<>();\n            int oneCnt = 0;\n            int zeroCnt = 0;\n            if (s.length > 0 && s[0] == '1') {\n                oneCnt++;\n            } else {\n                zeroCnt++;\n                one.add(0);\n            }\n            for (int i = 1; i < s.length; i++) {\n                if (s[i] == '1') {\n                    oneCnt++;\n                    if (zeroCnt != 0) {\n                        zero.add(zeroCnt);\n                        zeroCnt = 0;\n                    }\n                } else {\n                    zeroCnt++;\n                    if (oneCnt != 0) {\n                        one.add(oneCnt);\n                        oneCnt = 0;\n                    }\n                }\n            }\n            if (oneCnt != 0) {\n                one.add(oneCnt);\n            } else if (zeroCnt != 0) {\n                zero.add(zeroCnt);\n                one.add(0);\n            }\n            if (zero.isEmpty() || (zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0)) {\n                System.out.println(s.length);\n                return;\n            }\n            long oneSum = 0;\n            long zeroSum = 0;\n            for (int i = 0; i < k + 1 && i < one.size(); i++) {\n                oneSum += one.get(i);\n            }\n            for (int i = 0; i < k && i < zero.size(); i++) {\n                zeroSum += zero.get(i);\n            }\n            long ans = zeroSum + oneSum;\n            for (int i = 1; i < zero.size() - k + 1 && i + k < one.size(); i++) {\n                zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n                oneSum += one.get(i + k) - one.get(i - 1);\n                ans = Math.max(zeroSum + oneSum, ans);\n            }\n            System.out.println(ans);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03612",
    "code_tokens": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tint count = 0;\n\t\tint[] input = new int[N];\n\t\tboolean[] flag = new boolean[N];\n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tinput[i] = sc.nextInt();\n\t\t\tflag[i] = checkEqual(i, input[i]);\n\t\t}\n\t\twhile(checker(flag)) {\n\t\t\tfor(int i = 0; i < N; i++) {\n\t\t\t\tif(flag[i]) {\n\t\t\t\t\tif(i != 0) {\n\t\t\t\t\t\tif(checkEqual(i, input[i+1])){\n\t\t\t\t\t\t\tint c = input[i];\n\t\t\t\t\t\t\tinput[i] = input[i + 1];\n\t\t\t\t\t\t\tinput[i+1] = c;\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tflag[i] = checkEqual(i, input[i]);\n\t\t\t\t\t\t\tflag[i+1] = checkEqual(i+1, input[i+1]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tint c = input[i];\n\t\t\t\t\t\t\tinput[i] = input[i-1];\n\t\t\t\t\t\t\tinput[i-1] = c;\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tflag[i] = checkEqual(i, input[i]);\n\t\t\t\t\t\t\tflag[i-1] = checkEqual(i-1, input[i-1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tint c = input[i];\n\t\t\t\t\t\tinput[i] = input[i + 1];\n\t\t\t\t\t\tinput[i+1] = c;\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tflag[i] = checkEqual(i, input[i]);\n\t\t\t\t\t\tflag[i+1] = checkEqual(i+1, input[i+1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n\tpublic static boolean checkEqual(int index, int input) {\n\t\tindex += 1;\n\t\tif(index == input) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tpublic static boolean checker(boolean[] flag) {\n\t\tfor(int i = 0; i < flag.length; i++) {\n\t\t\tif(flag[i]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}",
    "submission_id": "s789610965",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 61,
    "if_count": 0,
    "else_count": 3,
    "for_count": 0,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int count = 0;\n        int[] input = new int[N];\n        boolean[] flag = new boolean[N];\n        for (int i = 0; i < N; i++) {\n            input[i] = sc.nextInt();\n            flag[i] = checkEqual(i, input[i]);\n        }\n        while (checker(flag)) {\n            for (int i = 0; i < N; i++) {\n                if (flag[i]) {\n                    if (i != 0) {\n                        if (checkEqual(i, input[i + 1])) {\n                            int c = input[i];\n                            input[i] = input[i + 1];\n                            input[i + 1] = c;\n                            count++;\n                            flag[i] = checkEqual(i, input[i]);\n                            flag[i + 1] = checkEqual(i + 1, input[i + 1]);\n                        } else {\n                            int c = input[i];\n                            input[i] = input[i - 1];\n                            input[i - 1] = c;\n                            count++;\n                            flag[i] = checkEqual(i, input[i]);\n                            flag[i - 1] = checkEqual(i - 1, input[i - 1]);\n                        }\n                    } else {\n                        int c = input[i];\n                        input[i] = input[i + 1];\n                        input[i + 1] = c;\n                        count++;\n                        flag[i] = checkEqual(i, input[i]);\n                        flag[i + 1] = checkEqual(i + 1, input[i + 1]);\n                    }\n                }\n            }\n\n        System.out.println(count);        }}\npublic static boolean checkEqual(int index, int input) {\n        index += 1;\n        return index == input;\n    }   public static boolean checker(boolean[] flag) {\n        for (int i = 0; i < flag.length; i++) {\n            if (flag[i]) {\n                return true;\n            }\n        }\n        return false;\n    } }",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int N = data.consumeInt();\n            int count = 0;\n            int[] input = new int[N];\n            boolean[] flag = new boolean[N];\n            for (int i = 0; i < N; i++) {\n                input[i] = data.consumeInt();\n                flag[i] = checkEqual(i, input[i]);\n            }\n            while (checker(flag)) {\n                for (int i = 0; i < N; i++) {\n                    if (flag[i]) {\n                        if (i != 0) {\n                            if (checkEqual(i, input[i + 1])) {\n                                int c = input[i];\n                                input[i] = input[i + 1];\n                                input[i + 1] = c;\n                                count++;\n                                flag[i] = checkEqual(i, input[i]);\n                                flag[i + 1] = checkEqual(i + 1, input[i + 1]);\n                            } else {\n                                int c = input[i];\n                                input[i] = input[i - 1];\n                                input[i - 1] = c;\n                                count++;\n                                flag[i] = checkEqual(i, input[i]);\n                                flag[i - 1] = checkEqual(i - 1, input[i - 1]);\n                            }\n                        } else {\n                            int c = input[i];\n                            input[i] = input[i + 1];\n                            input[i + 1] = c;\n                            count++;\n                            flag[i] = checkEqual(i, input[i]);\n                            flag[i + 1] = checkEqual(i + 1, input[i + 1]);\n                        }\n                    }\n                }\n            }\n            System.out.println(count);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p04030",
    "code_tokens": "import java.util.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tchar[] c = in.next().toCharArray();\n\t\tint index = 0;\n\t\tchar[] answer = new char[10];\n\t\tfor (int i = 0; i < c.length; i++) {\n\t\t\tif (c[i] == '0' || c[i] == '1') {\n\t\t\t\tanswer[index] = c[i];\n\t\t\t\tindex++;\n\t\t\t} else if (index > 0) {\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i <= index; i++) {\n\t\t\tSystem.out.printf(\"%c\", answer[i]);\n\t\t}\n\t}\n}",
    "submission_id": "s788209959",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 20,
    "if_count": 2,
    "else_count": 1,
    "for_count": 2,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        char[] c = in.next().toCharArray();\n        int index = 0;\n        char[] answer = new char[10];\n        for (int i = 0; i < c.length; i++) {\n            if (c[i] == '0' || c[i] == '1') {\n                answer[index] = c[i];\n                index++;\n            } else if (index > 0) {\n                index--;\n            }\n        }\n        for (int i = 0; i <= index; i++) {\n            System.out.printf(\"%c\", answer[i]);\n        }\n    }}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            char[] c = data.consumeString(10).toCharArray();\n            int index = 0;\n            char[] answer = new char[10];\n            for (int i = 0; i < c.length; i++) {\n                if (c[i] == '0' || c[i] == '1') {\n                    answer[index] = c[i];\n                    index++;\n                } else if (index > 0) {\n                    index--;\n                }\n            }\n            for (int i = 0; i <= index; i++) {\n                System.out.printf(\"%c\", answer[i]);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03264",
    "code_tokens": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String args[]){\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n = sc.nextLong();\n\t\tlong k = sc.nextLong();\n\t\tint a,b,c;\n\t\tlong total =0;\n\t\tif (k%2 == 1){\n\t\t\ttotal = (n/k)*(n/k)*(n/k);\n\t\t}\n\t\telse {\n\t\t\tif ((n/(k/2))%2 == 1){\n\t\t\t\ttotal = (n/(k/2))*(n/(k/2))*(n/(k/2)) + (n/(k/2)+1)*(n/(k/2)+1)*(n/(k/2)+1);\n\t\t\t}\n\t\t\telse total =(n/(k/2))*(n/(k/2))*(n/(k/2))*2;\n\t\t}\n\t\tSystem.out.println(total);\n\t}\n}",
    "submission_id": "s941266503",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 20,
    "if_count": 2,
    "else_count": 2,
    "for_count": 0,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong();\n        long k = sc.nextLong();\n        long total = 0;\n\n        if (k % 2 == 1) {\n            total = (n / k) * (n / k) * (n / k);\n        } else {\n            if ((n / (k / 2)) % 2 == 1) {\n                total = (n / (k / 2)) * (n / (k / 2)) * (n / (k / 2)) +\n                        (n / (k / 2) + 1) * (n / (k / 2) + 1) * (n / (k / 2) + 1);\n            } else {\n                total = (n / (k / 2)) * (n / (k / 2)) * (n / (k / 2)) * 2;\n            }\n        }\n        System.out.println(total);\n    }}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            long n = data.consumeLong();\n            long k = data.consumeLong();\n            long total = 0;\n\n            if (k % 2 == 1) {\n                total = (n / k) * (n / k) * (n / k);\n            } else {\n                if ((n / (k / 2)) % 2 == 1) {\n                    total = (n / (k / 2)) * (n / (k / 2)) * (n / (k / 2)) +\n                            (n / (k / 2) + 1) * (n / (k / 2) + 1) * (n / (k / 2) + 1);\n                } else {\n                    total = (n / (k / 2)) * (n / (k / 2)) * (n / (k / 2)) * 2;\n                }\n            }\n            System.out.println(total);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02527",
    "code_tokens": "import java.util.Scanner;\nimport java.util.Arrays;\nclass AOJ10029 {\n\tpublic static void main(String[] args){\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\ta[i] = scanner.nextInt();\n\t\t}\n\t\tArrays.sort(a);\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (i != 0) System.out.print(\" \");\n\t\t\tSystem.out.print(a[i]);\n\t\t}\n\t\tSystem.out.println(\"\");\n\t}\n}",
    "submission_id": "s045667758",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 18,
    "if_count": 1,
    "else_count": 0,
    "for_count": 2,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = scanner.nextInt();\n        }\n        Arrays.sort(a);\n        for (int i = 0; i < n; i++) {\n            if (i != 0)\n                System.out.print(\" \");\n            System.out.print(a[i]);\n        }\n        System.out.println(\"\");\n    }}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int n = data.consumeInt();\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = data.consumeInt();\n            }\n            Arrays.sort(a);\n            for (int i = 0; i < n; i++) {\n                if (i != 0)\n                    System.out.print(\" \");\n                System.out.print(a[i]);\n            }\n            System.out.println(\"\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03607",
    "code_tokens": "import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tint[] a = new int[1000000001];\n\t\tArrays.fill(a, -1);\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint t = sc.nextInt();\n\t\t\ta[t] = a[t]*(-1);\n\t\t}\n\t\tint count = 0;\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tif (a[i] > 0) count++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}",
    "submission_id": "s726121335",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 19,
    "if_count": 1,
    "else_count": 0,
    "for_count": 2,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] a = new int[1000000001];\n        Arrays.fill(a, -1);\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        for (int i = 0; i < n; i++) {\n            int t = sc.nextInt();\n            a[t] = a[t] * (-1);\n        }\n        int count = 0;\n        for (int i = 0; i < a.length; i++) {\n            if (a[i] > 0)\n                count++;\n        }\n        System.out.println(count);\n    }}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int[] a = new int[1000000001];\n            Arrays.fill(a, -1);\n            int n = data.consumeInt();\n            for (int i = 0; i < n; i++) {\n                int t = data.consumeInt();\n                a[t] = a[t] * (-1);\n            }\n            int count = 0;\n            for (int i = 0; i < a.length; i++) {\n                if (a[i] > 0)\n                    count++;\n            }\n            System.out.println(count);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02830",
    "code_tokens": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    long A = sc.nextLong();\n    long B = sc.nextLong();\n    long K = sc.nextLong();\n    if (A > K) {\n      A -= K;\n    } else if (A < K) {\n      K -= A;\n      A = 0;\n      B -= K;\n    }\n    System.out.print(A + \" \" + B);\n  }\n}",
    "submission_id": "s353056894",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 17,
    "if_count": 2,
    "else_count": 1,
    "for_count": 0,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long A = sc.nextLong();\n        long B = sc.nextLong();\n        long K = sc.nextLong();\n        if (A > K) {\n            A -= K;\n        } else if (A < K) {\n            K -= A;\n            A = 0;\n            B -= K;\n        }\n        System.out.print(A + \" \" + B);\n    }}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            long A = data.consumeLong();\n            long B = data.consumeLong();\n            long K = data.consumeLong();\n            if (A > K) {\n                A -= K;\n            } else if (A < K) {\n                K -= A;\n                A = 0;\n                B -= K;\n            }\n            System.out.print(A + \" \" + B);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02723",
    "code_tokens": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint x = in.nextInt();\n      \tint numberof500 = x/500;\n        int remainder = x%500;\n        int numberof5 = remainder/5;\n      System.out.println(1000*numberof500+5*numberof5);\n\t}\n}",
    "submission_id": "s632307817",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 11,
    "if_count": 0,
    "else_count": 0,
    "for_count": 0,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]) {\n        Scanner in = new Scanner(System.in);\n        int x = in.nextInt();\n        int numberof500 = x / 500;\n        int remainder = x % 500;\n        int numberof5 = remainder / 5;\n        System.out.println(1000 * numberof500 + 5 * numberof5);\n    }}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int x = data.consumeInt();\n            int numberof500 = x / 500;\n            int remainder = x % 500;\n            int numberof5 = remainder / 5;\n            System.out.println(1000 * numberof500 + 5 * numberof5);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02408",
    "code_tokens": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tint[] intMarkS = new int[13];\n\t\tint[] intMarkH = new int[13];\n\t\tint[] intMarkC = new int[13];\n\t\tint[] intMarkD = new int[13];\n\t\tint intNum = 0;\n\t\ttry {\n\t\t\tBufferedReader insBR = new BufferedReader(new InputStreamReader(\n\t\t\t\t\tSystem.in));\n\t\t\tinsBR.readLine();\n\t\t\twhile (true) {\n\t\t\t\tString strLine = insBR.readLine();\n\t\t\t\tif (strLine.equals(\"\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tString[] strAry = strLine.split(\" \");\n\t\t\t\tif (strAry[0].equals(\"S\")) {\n\t\t\t\t\tintNum = Integer.parseInt(strAry[1]);\n\t\t\t\t\tintMarkS[intNum - 1] = 1;\n\t\t\t\t} else if (strAry[0].equals(\"H\")) {\n\t\t\t\t\tintNum = Integer.parseInt(strAry[1]);\n\t\t\t\t\tintMarkH[intNum - 1] = 1;\n\t\t\t\t} else if (strAry[0].equals(\"C\")) {\n\t\t\t\t\tintNum = Integer.parseInt(strAry[1]);\n\t\t\t\t\tintMarkC[intNum - 1] = 1;\n\t\t\t\t} else if (strAry[0].equals(\"D\")) {\n\t\t\t\t\tintNum = Integer.parseInt(strAry[1]);\n\t\t\t\t\tintMarkD[intNum - 1] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < intMarkS.length; i++) {\n\t\t\t\tif (intMarkS[i] == 0) {\n\t\t\t\t\tSystem.out.println(\"S \" + (i + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < intMarkH.length; i++) {\n\t\t\t\tif (intMarkH[i] == 0) {\n\t\t\t\t\tSystem.out.println(\"H \" + (i + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < intMarkC.length; i++) {\n\t\t\t\tif (intMarkC[i] == 0) {\n\t\t\t\t\tSystem.out.println(\"C \" + (i + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < intMarkD.length; i++) {\n\t\t\t\tif (intMarkD[i] == 0) {\n\t\t\t\t\tSystem.out.println(\"D \" + (i + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(e);\n\t\t} catch (NumberFormatException e) {\n\t\t\tSystem.out.println(\"\u6570\u5b57\u3067\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044\");\n\t\t}\n\t}\n}",
    "submission_id": "s078818526",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 61,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] intMarkS = new int[13];\n        int[] intMarkH = new int[13];\n        int[] intMarkC = new int[13];\n        int[] intMarkD = new int[13];\n        int intNum = 0;\n\n        try {\n            BufferedReader insBR = new BufferedReader(new InputStreamReader(System.in));\n            insBR.readLine();\n            while (true) {\n                String strLine = insBR.readLine();\n                if (strLine.equals(\"\")) {\n                    break;\n                }\n                String[] strAry = strLine.split(\" \");\n                if (strAry[0].equals(\"S\")) {\n                    intNum = Integer.parseInt(strAry[1]);\n                    intMarkS[intNum - 1] = 1;\n                } else if (strAry[0].equals(\"H\")) {\n                    intNum = Integer.parseInt(strAry[1]);\n                    intMarkH[intNum - 1] = 1;\n                } else if (strAry[0].equals(\"C\")) {\n                    intNum = Integer.parseInt(strAry[1]);\n                    intMarkC[intNum - 1] = 1;\n                } else if (strAry[0].equals(\"D\")) {\n                    intNum = Integer.parseInt(strAry[1]);\n                    intMarkD[intNum - 1] = 1;\n                }\n            }\n            for (int i = 0; i < intMarkS.length; i++) {\n                if (intMarkS[i] == 0) {\n                    System.out.println(\"S \" + (i + 1));\n                }\n            }\n            for (int i = 0; i < intMarkH.length; i++) {\n                if (intMarkH[i] == 0) {\n                    System.out.println(\"H \" + (i + 1));\n                }\n            }\n            for (int i = 0; i < intMarkC.length; i++) {\n                if (intMarkC[i] == 0) {\n                    System.out.println(\"C \" + (i + 1));\n                }\n            }\n            for (int i = 0; i < intMarkD.length; i++) {\n                if (intMarkD[i] == 0) {\n                    System.out.println(\"D \" + (i + 1));\n                }\n            }\n        } catch (IOException e) {\n            System.out.println(e);\n        } catch (NumberFormatException e) {\n            System.out.println(\"\u6570\u5b57\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\");\n        }\n    }}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            int[] intMarkS = new int[13];\n            int[] intMarkH = new int[13];\n            int[] intMarkC = new int[13];\n            int[] intMarkD = new int[13];\n            int intNum = 0;\n\n            while (true) {\n                String strLine = data.consumeRemainingAsString();\n                if (strLine.equals(\"\")) {\n                    break;\n                }\n                String[] strAry = strLine.split(\" \");\n                if (strAry[0].equals(\"S\")) {\n                    intNum = Integer.parseInt(strAry[1]);\n                    intMarkS[intNum - 1] = 1;\n                } else if (strAry[0].equals(\"H\")) {\n                    intNum = Integer.parseInt(strAry[1]);\n                    intMarkH[intNum - 1] = 1;\n                } else if (strAry[0].equals(\"C\")) {\n                    intNum = Integer.parseInt(strAry[1]);\n                    intMarkC[intNum - 1] = 1;\n                } else if (strAry[0].equals(\"D\")) {\n                    intNum = Integer.parseInt(strAry[1]);\n                    intMarkD[intNum - 1] = 1;\n                }\n            }\n            for (int i = 0; i < intMarkS.length; i++) {\n                if (intMarkS[i] == 0) {\n                    System.out.println(\"S \" + (i + 1));\n                }\n            }\n            for (int i = 0; i < intMarkH.length; i++) {\n                if (intMarkH[i] == 0) {\n                    System.out.println(\"H \" + (i + 1));\n                }\n            }\n            for (int i = 0; i < intMarkC.length; i++) {\n                if (intMarkC[i] == 0) {\n                    System.out.println(\"C \" + (i + 1));\n                }\n            }\n            for (int i = 0; i < intMarkD.length; i++) {\n                if (intMarkD[i] == 0) {\n                    System.out.println(\"D \" + (i + 1));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02760",
    "code_tokens": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint[][] array = new int[3][3];\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tarray[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint N = sc.nextInt();\n\t\tfor (int h = 0; h < N; h++) {\n\t\t\tint number = sc.nextInt();\n\t\t\tfor (int i = 0; i < 3; i++) {\n\t\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\t\tif (array[i][j] == number) {\n\t\t\t\t\t\tarray[i][j] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsc.close();\n\t\tboolean flag = false;\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[i][j];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[j][i];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\t\tint sum1 = array[0][0] + array[1][1] + array[2][2];\n\t\t\tif (sum1==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tint sum2 = array[0][3] + array[1][1] + array[3][0];\n\t\t\tif (sum2==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[2-i][i];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\tif(flag) {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}else {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}",
    "submission_id": "s188777614",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 68,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int[][] array = new int[3][3];\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                array[i][j] = sc.nextInt();\n            }\n        }\n        int N = sc.nextInt();\n        for (int h = 0; h < N; h++) {\n            int number = sc.nextInt();\n            for (int i = 0; i < 3; i++) {\n                for (int j = 0; j < 3; j++) {\n                    if (array[i][j] == number) {\n                        array[i][j] = 0;\n                    }\n                }\n            }\n        }\n        sc.close();\n        boolean flag = checkArray(array);\n        if (flag) {\n            System.out.println(\"Yes\");\n        } else {\n            System.out.println(\"No\");\n        }\n    }\n\n    public static boolean checkArray(int[][] array) {\n        boolean flag = false;\n        for (int i = 0; i < 3; i++) {\n            int sum = 0;\n            for (int j = 0; j < 3; j++) {\n                sum = sum + array[i][j];\n            }\n            if (sum == 0) {\n                flag = true;\n            }\n        }\n        for (int i = 0; i < 3; i++) {\n            int sum = 0;\n            for (int j = 0; j < 3; j++) {\n                sum = sum + array[j][i];\n            }\n            if (sum == 0) {\n                flag = true;\n            }\n        }\n        int sum1 = array[0][0] + array[1][1] + array[2][2];\n        if (sum1 == 0) {\n            flag = true;\n        }\n        int sum2 = array[0][2] + array[1][1] + array[2][0];\n        if (sum2 == 0) {\n            flag = true;\n        }\n        for (int i = 0; i < 3; i++) {\n            int sum = 0;\n            for (int j = 0; j < 3; j++) {\n                sum = sum + array[2 - i][i];\n            }\n            if (sum == 0) {\n                flag = true;\n            }\n        }\n        return flag;\n    }}",
      "fuzzerTestOneInput": "import java.util.Scanner;\n\npublic class Fuzzer {\n    public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            Scanner sc = new Scanner(data.consumeRemainingAsString());\n            int[][] array = new int[3][3];\n            for (int i = 0; i < 3; i++) {\n                for (int j = 0; j < 3; j++) {\n                    array[i][j] = sc.nextInt();\n                }\n            }\n            int N = sc.nextInt();\n            for (int h = 0; h < N; h++) {\n                int number = sc.nextInt();\n                for (int i = 0; i < 3; i++) {\n                    for (int j = 0; j < 3; j++) {\n                        if (array[i][j] == number) {\n                            array[i][j] = 0;\n                        }\n                    }\n                }\n            }\n            sc.close();\n            boolean flag = checkArray(array);\n            if (flag) {\n                System.out.println(\"Yes\");\n            } else {\n                System.out.println(\"No\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p00578",
    "code_tokens": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.TreeSet;\nclass Main {\n\tstatic long[] orthometric;  \n\tstatic Long[] sea;  \n\tstatic int num = 0;  \n\tpublic static void main(String[] args) {\n\t\ttry (Scanner sc = new Scanner(System.in)){\n\t\t\tint len = sc.nextInt();\n\t\t\torthometric = new long[len];  \n\t\t\tTreeSet<Long> seas = new TreeSet<Long>();\n\t\t\tlong now = 0l;\n\t\t\tseas.add(0l);  \n\t\t\tfor (int i=0; i<len; i++) {\n\t\t\t\tlong a = sc.nextLong();  \n\t\t\t\tif (a != now) {  \n\t\t\t\t\torthometric[num] = a;  \n\t\t\t\t\tseas.add(a);  \n\t\t\t\t\tnow = a;\n\t\t\t\t\tnum++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsea = new Long[seas.size()];\n\t\t\tseas.toArray(sea);  \n\t\t\tList<int[]> land = new ArrayList<int[]>();\n\t\t\tland.add(new int[]{0,num});  \n\t\t\tint max = findLand(0, land, 0);\n\t\t\tSystem.out.println(max);\n\t\t}\n\t}\n\tpublic static int findLand(int max, List<int[]> land, int pointer) {\n\t\tif (pointer>=sea.length) {\n\t\t\treturn max;\n\t\t} else {\n\t\t\tint count = 0;\n\t\t\tboolean landflag = false;\n\t\t\tList<int[]> l = new ArrayList<int[]>();\n\t\t\tint[] newLand = new int[2];\n\t\t\tfor (int[] j : land) {\n\t\t\t\tfor (int k=j[0]; k<j[1]; k++) {\n\t\t\t\t\tif (orthometric[k]>sea[pointer]) {  \n\t\t\t\t\t\tlandflag = true;  \n\t\t\t\t\t\tnewLand[0] = k;  \n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (landflag) {  \n\t\t\t\t\t\t\tlandflag = false;\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tnewLand[1] = k;  \n\t\t\t\t\t\t\tl.add(newLand);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (landflag) { \n\t\t\t\t\t count++;\n\t\t\t\t\t newLand[1] = num;\n\t\t\t\t\t l.add(newLand);\n\t\t\t\t}\n\t\t\t\tmax = Math.max(max, count);\n\t\t\t\tmax = findLand(max, land, pointer+1);\n\t\t\t}\t\t\t\n\t\t}\n\t\treturn max;\n\t}\n}",
    "submission_id": "s718125205",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 66,
    "jazzer_code": {
      "main": "import com.code_intelligence.jazzer.api.FuzzedDataProvider;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\nclass Main {\n    static long[] orthometric;\n    static Long[] sea;\n    static int num = 0;\n\n    public static void main(String[] args) {\n        try (Scanner sc = new Scanner(System.in)) {\n            int len = sc.nextInt();\n            orthometric = new long[len];\n            TreeSet<Long> seas = new TreeSet<Long>();\n            long now = 0L;\n            seas.add(0L);\n            for (int i = 0; i < len; i++) {\n                long a = sc.nextLong();\n                if (a != now) {\n                    orthometric[num] = a;\n                    seas.add(a);\n                    now = a;\n                    num++;\n                }\n            }\n            sea = new Long[seas.size()];\n            seas.toArray(sea);\n            List<int[]> land = new ArrayList<int[]>();\n            land.add(new int[]{0, num});\n            int max = findLand(0, land, 0);\n            System.out.println(max);\n        }\n    }\n\n    public static int findLand(int max, List<int[]> land, int pointer) {\n        if (pointer >= sea.length) {\n            return max;\n        } else {\n            int count = 0;\n            boolean landflag = false;\n            List<int[]> l = new ArrayList<int[]>();\n            int[] newLand = new int[2];\n            for (int[] j : land) {\n                for (int k = j[0]; k < j[1]; k++) {\n                    if (orthometric[k] > sea[pointer]) {\n                        landflag = true;\n                        newLand[0] = k;\n                    } else {\n                        if (landflag) {\n                            landflag = false;\n                            count++;\n                            newLand[1] = k;\n                            l.add(newLand);\n                            newLand = new int[2];\n                        }\n                    }\n                }\n                if (landflag) {\n                    count++;\n                    newLand[1] = num;\n                    l.add(newLand);\n                }\n                max = Math.max(max, count);\n                max = findLand(max, l, pointer + 1);\n            }\n        }\n        return max;\n    }}",
      "fuzzerTestOneInput": "public static void fuzzerTestOneInput(FuzzedDataProvider data) {\n        try {\n            // Generate fuzzed input using FuzzedDataProvider\n            int len = data.consumeInt();\n            orthometric = new long[len];\n            TreeSet<Long> seas = new TreeSet<Long>();\n            long now = 0L;\n            seas.add(0L);\n            for (int i = 0; i < len; i++) {\n                long a = data.consumeLong();\n                if (a != now) {\n                    orthometric[num] = a;\n                    seas.add(a);\n                    now = a;\n                    num++;\n                }\n            }\n            sea = new Long[seas.size()];\n            seas.toArray(sea);\n            List<int[]> land = new ArrayList<int[]>();\n            land.add(new int[]{0, num});\n            int max = findLand(0, land, 0);\n            System.out.println(max);\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }",
      "testInputOnMain": "public static void testInputOnMain(int len, long[] orthometric, Long[] sea) {\n        try {\n            // Testing input on the main function\n            orthometric = new long[len];\n            TreeSet<Long> seas = new TreeSet<Long>();\n            long now = 0L;\n            seas.add(0L);\n            for (int i = 0; i < len; i++) {\n                long a = sc.nextLong();\n                if (a != now) {\n                    orthometric[num] = a;\n                    seas.add(a);\n                    now = a;\n                    num++;\n                }\n            }\n            sea = new Long[seas.size()];\n            seas.toArray(sea);\n            List<int[]> land = new ArrayList<int[]>();\n            land.add(new int[]{0, num});\n            int max = findLand(0, land, 0);\n            System.out.println(max);\n        } catch (Exception e) {\n            // Catch and report any exceptions as errors\n            e.printStackTrace();\n        }\n    }"
    }
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02774",
    "code_tokens": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
    "submission_id": "s156006497",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 85
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02411",
    "code_tokens": "import java.util.Scanner;\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tint m, f, r;\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tboolean flag = true;\n\t\twhile (flag) {\n\t\t\tm = stdIn.nextInt();\n\t\t\tf = stdIn.nextInt();\n\t\t\tr = stdIn.nextInt();\n\t\t\tif (m == -1 || f == -1 && r != -1) {\n\t\t\t\tSystem.out.println(\"F\");\n\t\t\t} else if (m + f >= 80) {\n\t\t\t\tSystem.out.println(\"A\");\n\t\t\t} else if (m + f >= 65) {\n\t\t\t\tSystem.out.println(\"B\");\n\t\t\t} else if (m + f >= 50) {\n\t\t\t\tSystem.out.println(\"C\");\n\t\t\t} else if (m + f >= 30 || r >= 50) {\n\t\t\t\tSystem.out.println(\"D\");\n\t\t\t} else if (m + f + r <= -3) {\n\t\t\t\tflag = false;\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"F\");\n\t\t\t}\n\t\t}\n\t}\n}",
    "submission_id": "s159736783",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 28
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02866",
    "code_tokens": "import java.util.*;\nclass Main {\n    public static void main(String[] args) {\n        final int MOD = 998244353;\n        Scanner sc = new Scanner(System.in);\n        int N = Integer.parseInt(sc.next());\n        int D[] = new int[N];\n        for (int i=0; i<N; i++)\n            D[i] = Integer.parseInt(sc.next());\n        sc.close();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i=0; i<N; i++) {\n            if (map.containsKey(D[i])) {\n                map.put(D[i], map.get(D[i])+1);\n            } else {\n                map.put(D[i], 1);\n            } \n        }\n        int cnt = 1;\n        for (int i=0; i<map.size(); i++) {\n            if (i>0) {\n                cnt *= Math.pow(map.get(i-1) ,map.get(i)) % MOD;\n            } else if (!map.containsKey(0) || map.get(0)!=1) {\n                break;\n            }\n        }\n        System.out.println(cnt);\n    }\n}",
    "submission_id": "s618403331",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 29
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02413",
    "code_tokens": "import java.util.*;\npublic class Main {\npublic static void main(String[] args){\nScanner sc = new Scanner(System.in);\nint r=Integer.parseInt(sc.next());\nint c=Integer.parseInt(sc.next());\nint[][] rc=new int[r+1][c+1];\nfor(int i=0;i<r+1;i++){\n    for(int j=0;j<c+1;j++){\n    rc[i][j]=Integer.parseInt(sc.next());\n    rc[i][c]+=rc[i][j];\n    rc[r][j]+=rc[i][j];\n    }\n}\nfor(int i=0;i<r+1;i++){\n    for(int j=0;j<c+1;j++){\n    if(i!=c){System.out.print(\" \"+rc[i][j]+\" \");}else{System.out.println(\" \"+rc[i][j]+\" \");}\n    }\n}\n}\n}",
    "submission_id": "s193164751",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 21
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02935",
    "code_tokens": "import java.util.*;\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint a =    sc.nextInt();\n\t\tdouble num = 0;\n\t\tint arnum[] = new int[a];\n\t\tint num1 = 0;\n\t\tint num2 = 0;\n\t\tfor(int i = 0; i < a;i++) {\n\t\t\tint b =    sc.nextInt();\n\t\t\tarnum[i] = b;\n\t\t}\n\t\tArrays.sort(arnum);\n\t\tfor(int i = 0; i < arnum.length;i++) {\n\t\t\tarnum[i + 1] = arnum[i] + arnum[i + 1] / 2;\n\t\t}\n       System.out.println(arnum[arnum.length]);\n\t}\n}",
    "submission_id": "s032785761",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 20
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02577",
    "code_tokens": "import java.util.*;\nclass Main{\n\tpublic static void main(String[] args){\n\t  Scanner scan = new Scanner(System.in);\n\t  int N = scan.nextInt();\n      int num = 0;\n      while(N > 0){\n        num += N%10;\n        N /= 10;\n      }\n      if(num%9==0) System.out.println(\"Yes\");\n      else System.out.println(\"No\");\n\t}\n}",
    "submission_id": "s309698844",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 14
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02602",
    "code_tokens": "import java.util.*;\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n      \tint n = sc.nextInt();\n      \tint k = sc.nextInt();\n     \tint as[] = new int[n];\n      \tfor(int i = 0;i < n;i++) as[i] = sc.nextInt();\n      \tfor(int i = 0;i < k-1;i++){\n          \tif(as[k + i] > as[i]) System.out.println(\"Yes\");\n          \telse System.out.println(\"No\");\n        }\n\t}\n}",
    "submission_id": "s809643771",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 14
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02685",
    "code_tokens": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt(), m = sc.nextInt(), k = sc.nextInt();\n        long ans = m;\n        for (int i=1;i<n-k;i++){\n            ans *= m-1;\n            ans %= 998244353;\n        }\n        ans *= combination(n, k);\n        ans %= 998244353;\n        System.out.println(ans);\n    }\n    private static long combination(long n, long k){\n        return k == 0 ? 1 : factorial(n) / (factorial(k) * factorial(n - k));\n    }\n    private static long factorial(long l){\n        return l == 0 ? 1 : l * factorial(l-1);\n    }\n}",
    "submission_id": "s586173662",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 21
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02754",
    "code_tokens": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan = new Scanner(System.in);\n\t\tint N = Integer.parseInt(scan.next());\n\t\tint b = Integer.parseInt(scan.next());\n\t\tint r = Integer.parseInt(scan.next());\n\t\tif (b == 0) {\n\t\t\tSystem.out.println(0);\n\t\t}else{\n\t\t\tint shou = N / (b+ r);\n\t\t\tint amari = N % (b+ r);\n\t\t\tSystem.out.println(shou * b + amari);\n\t\t}\n\t}\n}",
    "submission_id": "s703686010",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 16
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02256",
    "code_tokens": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main (String [] args) {\n\t\tScanner scan = new Scanner (System.in);\n\t\tint x = scan.nextInt();\n\t\tint y = scan.nextInt();\n\t\tint gcd = 1;\n\t\tscan.close();\n\t\tif (x > y) {\n\t\t\tfor ( int i = 1; i <= (x % y); i++) {\n\t\t\t\tif ( (x % y) % i == 0) {\n\t\t\t\t\tif ( y % i == 0) {\n\t\t\t\t\t\tgcd = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (x < y){\n\t\t\tfor ( int i = 0; i <= (y % x); i++) {\n\t\t\t\tif ( (y % x) % i == 0) {\n\t\t\t\t\tif ( x % i == 0) {\n\t\t\t\t\t\tgcd = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tgcd = x;\n\t\t}\n\t\tSystem.out.println(gcd);\n\t}\n}",
    "submission_id": "s643161352",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 30
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03077",
    "code_tokens": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong();\n        long[] arr = new long[5];\n        long min = Long.MAX_VALUE;\n        for (int i = 0; i < 5; i++) {\n            arr[i] = sc.nextInt();\n            min = Math.min(arr[i], min);\n        }\n        long ans = n / min + 5;\n        System.out.println(ans);\n    }\n}",
    "submission_id": "s674975369",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 15
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03427",
    "code_tokens": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n\t\tint nLen = String.valueOf(n).length();\n\t\tfor (int i = 1; i < nLen; i++) {\n\t\t\tans = ans + 9;\n\t\t}\n\t\tif ( ans == -1) {\n\t\t\tans = 0;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
    "submission_id": "s433633528",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 16
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p00005",
    "code_tokens": "import java.util.*;\npublic class Main{\n    static Scanner kbd = new Scanner(System.in);\n    public static void main(String[] args){\n\twhile(kbd.hasNext()){\n\t    long a = kbd.nextLong();\n\t    long b = kbd.nextLong();\n\t    if(a>b) {\n\t\tlong w = a;\n\t\ta = b; \n\t\tb = w;\n\t    }\n\t    long gcd = a;\n\t    while(a%gcd!=0 || b%gcd!=0) gcd -= 2;\n\t    long lcm = a*b/gcd;\n\t    System.out.println(gcd+\" \"+lcm);\n\t}\n    }\n}",
    "submission_id": "s898978258",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 19
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02754",
    "code_tokens": "import java.util.*;\npublic class Main {\n\tpublic static void main(final String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextInt();\n        long a = sc.nextInt();\n        long b = sc.nextInt();\n        long num = (n / (a + b)) * a;\n        long rem = n % (a + b);\n        num += Math.max(a, rem);\n        System.out.println(num);\n    }\n}",
    "submission_id": "s151577872",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 13
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03447",
    "code_tokens": "package main;\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String[] args){\n        int x,a,b;\n        Scanner sc = new Scanner(System.in);\n        x = sc.nextInt();\n        a = sc.nextInt();\n        b = sc.nextInt();\n        System.out.println((x-a)%b);\n    }\n}",
    "submission_id": "s588633295",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 12
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p00189",
    "code_tokens": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
    "submission_id": "s181652696",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 70
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03282",
    "code_tokens": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tMain mainObj = new Main();\n\t\tmainObj.solve();\n\t}\n\tpublic void solve() throws IOException {\n\t\tFastScanner fs = new FastScanner();\n\t\tString s = fs.next();\n\t\tint k = fs.nextInt();\n\t\tfor(int i = 0; i < k; i++) {\n\t\t\tint charAt = s.charAt(i) - '0';\n\t\t\tif(charAt == 1) {\n\t\t\t\tif(i == k-1) {\n\t\t\t\t\tSystem.out.println(charAt);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tSystem.out.println(charAt);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tpublic class FastScanner {\n\t\tBufferedReader reader;\n\t\tprivate StringTokenizer st;\n\t\tpublic FastScanner() {\n\t\t\tst = null;\n\t\t\treader = new BufferedReader(new InputStreamReader(System.in));\n\t\t}\n\t\tpublic String next() throws IOException {\n\t\t\tif (st == null || !st.hasMoreElements()) {\n\t\t\t\tst = new StringTokenizer(reader.readLine());\n\t\t\t}\n\t\t\treturn st.nextToken();\n\t\t}\n\t\tpublic String nextLine() throws IOException {\n\t\t\tst = null;\n\t\t\tString readLine = null;\n\t\t\treadLine = reader.readLine();\n\t\t\treturn readLine;\n\t\t}\n\t\tpublic int nextInt() throws NumberFormatException, IOException {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\t\tpublic long nextLong() throws NumberFormatException, IOException {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\t\tpublic int[] nextIntArr(int n) throws NumberFormatException, IOException {\n\t\t\tint[] retArr = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tretArr[i] = nextInt();\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\t\tpublic long[] nextLongArr(int n) throws NumberFormatException, IOException {\n\t\t\tlong[] retArr = new long[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tretArr[i] = nextLong();\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\t\tpublic void close() throws IOException {\n\t\t\treader.close();\n\t\t}\n\t}\n}",
    "submission_id": "s516615317",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 70
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02678",
    "code_tokens": "import java.util.*;\nimport java.io.*;\npublic class Main {\n    static StringTokenizer st;\n    static BufferedReader br;  \n    static PrintWriter out;\n    static int parent[]; \n    public static void main(String[] args) throws IOException {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        int N = nextInt();\n        int M = nextInt();\n        parent = new int [N+1];\n        ArrayList<Integer> matrix [] = new ArrayList [M+1];\n        for (int x=1; x<=N; x++) {\n            matrix[x] = new ArrayList<Integer>();\n        }\n        for (int x=1; x<M; x++) {\n            int one = nextInt();\n            int two = nextInt();\n            matrix[one].add(two);\n            matrix[two].add(one);\n        }\n        bfs(matrix, 1);\n        boolean flag = true;\n        for (int x=1; x<=N; x++) {\n            if(parent[x] == 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            System.out.println(\"Yes\");\n            for (int x=2; x<=N; x++) {\n                System.out.println(parent[x]);\n            }\n        }\n        else{\n            System.out.println(\"No\");\n        }\n    }\n    public static boolean bfs (ArrayList [] matrix,  int start) {\n        Queue <Integer> queue = new LinkedList<Integer>();\n        queue.add(start);\n        while (!queue.isEmpty()) {\n            int cur = queue.poll();\n            for (int x=0; x<matrix[cur].size(); x++) {\n                int now = (int) matrix[cur].get(x);\n                if(parent[now]==0){\n                    parent[now] = cur;\n                    queue.add(now);\n                }\n            }\n        }\n        return false;\n    }\n    public static int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n    public static long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n    public static double nextDouble() throws IOException {\n        return Double.parseDouble(next());\n    }\n    static String next() throws IOException {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine().trim());\n        return st.nextToken();\n    }\n}",
    "submission_id": "s427438430",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 70
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p00748",
    "code_tokens": "import java.util.*;\nimport java.lang.*;\nimport java.math.*;\nimport java.io.*;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\npublic class Main{\n\tScanner sc=new Scanner(System.in);\n\tint INF=1<<28;\n\tdouble EPS=1e-9;\n\tint max=1000001;\n\tint[] dp1, a;\n\tint n;\n\tvoid run(){\n\t\tmax=10000;\n\t\tdp1=new int[max];\n\t\ta=new int[max];\n\t\tfill(dp1, INF);\n\t\tdp1[0]=0;\n\t\tfor(int j=0; j<5; j++){\n\t\t\tSystem.arraycopy(dp1, 0, a, 0, max);\n\t\t\tfor(int k=0; k*(k+1)*(k+2)/6<max; k++){\n\t\t\t\tint m=k*(k+1)*(k+2)/6;\n\t\t\t\tfor(int i=0; i+m<max; i++){\n\t\t\t\t\tdp1[i+m]=min(dp1[i+m], a[i]+1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(;;){\n\t\t\tn=sc.nextInt();\n\t\t\tif(n==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsolve();\n\t\t}\n\t}\n\tvoid solve(){\n\t\tint[] dp2=new int[n+1];\n\t\tfill(dp2, INF);\n\t\tdp2[0]=0;\n\t\tfor(int j=0;; j++){\n\t\t\tSystem.arraycopy(dp2, 0, a, 0, n+1);\n\t\t\tfor(int k=0; k*(k+1)*(k+2)/6<n+1; k++){\n\t\t\t\tint m=k*(k+1)*(k+2)/6;\n\t\t\t\tif(m%2==0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor(int i=0; i+m<n+1; i++){\n\t\t\t\t\tdp2[i+m]=min(dp2[i+m], a[i]+1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dp2[n]<INF){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintln(dp1[n]+\" \"+dp2[n]);\n\t}\n\tvoid debug(Object... os){\n\t\tSystem.err.println(Arrays.deepToString(os));\n\t}\n\tvoid print(String s){\n\t\tSystem.out.print(s);\n\t}\n\tvoid println(String s){\n\t\tSystem.out.println(s);\n\t}\n\tpublic static void main(String[] args){\n\t\tnew Main().run();\n\t}\n}",
    "submission_id": "s312899095",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 70
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02754",
    "code_tokens": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        if (a == 0) {\n            System.out.println(a);\n            return;\n        }\n        if (n - (a + b) >= 0) {\n            int c = n / (a + b);\n            int d = n % (a + b);\n            if (d - a > 0) {\n                System.out.println((c * a) + a);\n            } else {\n                System.out.println((c * a) + d);\n            }\n        } else {\n            if (n - a >= 0) {\n                System.out.println(a);\n            } else {\n                System.out.println(n);\n            }\n        }\n        sc.close();\n    }\n}",
    "submission_id": "s017045505",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 29
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p02400",
    "code_tokens": "import java.util.*;\npublic class Main{\n  public static void main(String[] args){\n    Scanner sc = new Scanner(System.in);\n\tint r = sc.nextInt();\n\tdouble area = Math.PI * (double)r * (double)r; \n        double cir = Math.PI * 2 * (double)r ;\n\tSystem.out.printf(\"%6f\",area);\n\tSystem.out.printf(\" \");\n\tSystem.out.printf(\"%6f\\n\",cir);\t\n  }\n}",
    "submission_id": "s244579818",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 12
  },
  {
    "source": "source",
    "lang": "java",
    "problem_id": "p03490",
    "code_tokens": "import java.util.Scanner;\nimport java.util.ArrayList;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tString s=sc.next();\n\t\tint x =sc.nextInt();\n\t\tint y =sc.nextInt();\n\t\tArrayList<Integer> xlist=new ArrayList<>();\n\t\tArrayList<Integer> ylist=new ArrayList<>();\n\t\tint count=0;\n\t\tboolean isX=true;\n\t\tfor(int i=0; i<s.length(); i++){\n\t\t\tif(s.charAt(i)=='T'){\n\t\t\t\tif(isX){\n\t\t\t\t\txlist.add(count);\n\t\t\t\t}else{\n\t\t\t\t\tylist.add(count);\n\t\t\t\t}\n\t\t\t\tisX=!isX;\n\t\t\t\tcount=0;\n\t\t\t}else{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(isX){\n\t\t\txlist.add(count);\n\t\t}else{\n\t\t\tylist.add(count);\n\t\t}\n\t\tint sumx=0;\n\t\tboolean[][] dpx=new boolean[xlist.size()][16000];\n\t\tboolean[][] dpy=new boolean[ylist.size()+1][16000];\n\t\tint nx=0;\n\t\tint ny=1;\n\t\tfor(int i:xlist){\n\t\t\tif(nx==0){\n\t\t\t\tsumx+=i;\n\t\t\t\tdpx[nx][sumx+7999]=true;\n\t\t\t\tnx++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor(int j=-sumx; j<=sumx; j++){\n\t\t\t\tif(dpx[nx-1][j+7999]){\n\t\t\t\t\tdpx[nx][j+7999+i]=true;\n\t\t\t\t\tdpx[nx][j+7999-i]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnx++;\n\t\t\tsumx+=i;\n\t\t}\n\t\tint sumy=0;\n\t\tdpy[0][7999]=true;\n\t\tfor(int i:ylist){\n\t\t\tfor(int j=-sumy; j<=sumy; j++){\n\t\t\t\tif(dpy[ny-1][j+7999]){\n\t\t\t\t\tdpy[ny][j+7999+i]=true;\n\t\t\t\t\tdpy[ny][j+7999-i]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tny++;\n\t\t\tsumy+=i;\n\t\t}\n\t\tif(dpx[xlist.size()-1][7999+x] && dpy[ylist.size()][7999+y]){\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}else{\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}",
    "submission_id": "s077483082",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 70
  },
  {
    "source": "source",
    "": "java",
    "problem_id": "p00606",
    "code_tokens": "import java.io.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\ttry {\n\t\t\tdouble dp[][][][] = new double[15][9][9][9];\n\t\t\tfor(int i=0;i<15;i++){\n\t\t\t\tfor(int j=0;j<9;j++){\n\t\t\t\t\tfor(int k=0;k<9;k++){\n\t\t\t\t\t\tfor(int l=0;l<9;l++){\n\t\t\t\t\t\t\tdp[i][j][k][l] = -1.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tString line;\n\t\t\twhile(true){\n\t\t\t\tline = br.readLine();\n\t\t\t\tint n = Integer.parseInt(line);\n\t\t\t\tif(n==0) break;\n\t\t\t\tline = br.readLine();\n\t\t\t\tchar s = line.split(\" \")[0].charAt(0), t = line.split(\" \")[1].charAt(0), b = line.split(\" \")[2].charAt(0);\n\t\t\t\tdouble ans = solve(dp, n,s-'A',t-'A',b-'A');\n\t\t\t\tSystem.out.println(ans);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tpublic static double solve(double[][][][] dp, int n, int s, int t, int b){\n\t\tif(dp[n][s][t][b]>=0) return dp[n][s][t][b];\n\t\tif(n==0){\n\t\t\tif(s==t){\n\t\t\t\tdp[n][s][t][b] = 1.0;\n\t\t\t\treturn 1.0;\n\t\t\t} else {\n\t\t\t\tdp[n][s][t][b] = 0.0;\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t} else {\n\t\t\tdouble ret = 0;\n\t\t\tif(dp[n-1][s>2&&b!=s-3?s-3:s][t][b]>=0){\n\t\t\t\tret += 0.25*dp[n-1][s>2&&b!=s-3?s-3:s][t][b];\n\t\t\t} else {\n\t\t\t\tdp[n-1][s>2&&b!=s-3?s-3:s][t][b] = solve(dp,n-1,s>2&&b!=s-3?s-3:s,t,b); \n\t\t\t\tret += 0.25*dp[n-1][s>2&&b!=s-3?s-3:s][t][b];\n\t\t\t}\n\t\t\tif(dp[n-1][s%3!=2&&b!=s+1?s+1:s][t][b]>=0){\n\t\t\t\tret += 0.25*dp[n-1][s%3!=2&&b!=s+1?s+1:s][t][b];\n\t\t\t} else {\n\t\t\t\tdp[n-1][s%3!=2&&b!=s+1?s+1:s][t][b] = solve(dp,n-1,s%3!=2&&b!=s+1?s+1:s,t,b); \n\t\t\t\tret += 0.25*dp[n-1][s%3!=2&&b!=s+1?s+1:s][t][b];\n\t\t\t}\n\t\t\tif(dp[n-1][s<6&&b!=s+3?s+3:s][t][b]>=0){\n\t\t\t\tret += 0.25*dp[n-1][s<6&&b!=s+3?s+3:s][t][b];\n\t\t\t} else {\n\t\t\t\tdp[n-1][s<6&&b!=s+3?s+3:s][t][b] = solve(dp,n-1,s<6&&b!=s+3?s+3:s,t,b);\n\t\t\t\tret += 0.25*dp[n-1][s<6&&b!=s+3?s+3:s][t][b];\n\t\t\t}\n\t\t\tif(dp[n-1][s%3!=0&&b!=s-1?s-1:s][t][b]>=0){\n\t\t\t\tret += 0.25*dp[n-1][s%3!=0&&b!=s-1?s-1:s][t][b];\n\t\t\t} else {\n\t\t\t\tdp[n-1][s%3!=0&&b!=s-1?s-1:s][t][b] =solve(dp,n-1,s%3!=0&&b!=s-1?s-1:s,t,b);\n\t\t\t\tret += 0.25*dp[n-1][s%3!=0&&b!=s-1?s-1:s][t][b];\n\t\t\t}\n\t\t\tdp[n][s][t][b] = ret;\n\t\t\treturn ret;\n\t\t}\n\t}\n}",
    "submission_id": "s867545148",
    "functions_standalone": [],
    "functions_class": [],
    "verdict": "Runtime Error",
    "lines_of_code": 70
  }
]