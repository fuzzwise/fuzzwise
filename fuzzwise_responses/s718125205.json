{
  "submission_id": "s718125205",
  "cycles": [
    {
      "test_case": "Test Case Input:\n5\n3\n1\n2\n3\n4\n5",
      "test_mutations": [
        "Test Case Input:\n3\n2\n1\n-1\n0",
        "Test Case Input:\n5\n3\n1\n-2\n3\n-4\n5",
        "Test Case Input:\n3\n2\n-1\n0\n1",
        "Test Case Input:\n3\n2\n1\n2\n3",
        "Test Case Input:\n3\n2\n-1\n0\n1",
        "Test Case Input:\n5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n3\n2\n1\n2\n3",
        "Test Case Input:\n3\n2\n5 -3 4",
        "Test Case Input:\n5\n3\n2 -1 0 4 -2",
        "Test Case Input:\n5\n3\n1\n2\n3\n4\n5"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. All the import statements will be covered.\n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. create an instance of Main class and call solve method : always executed. Statement \"Main main = new Main();\" and \"main.solve();\" are covered.\n\n5. solve method declaration : always executed. Statement \"void solve() throws IOException {\" is covered.\n\n6. User Input : always executed. Statements \"n = sc.nextInt();\" and \"k = sc.nextInt();\" are covered.\n\n7. Calculation of k : always executed. Statement \"k = n*(n-1)/2+1-k;\" is covered.\n\n8. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\" and \"minus_nega = new ArrayList<>();\" are covered.\n\n9. Variable initialization : always executed. Statements \"long maxi = Long.MIN_VALUE;\", \"long zeros = 0;\", \"long k = 0;\", \"long n = 0;\" are covered.\n\n10. For loop Execution : Since n is 5, the for loop condition (i < n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++) {\" will be covered.\n\n11. Inside for loop : user input statements are always executed. Statement \"long a = sc.nextLong();\" will be covered.\n\n12. Calculation of maximum value : always executed. Statement \"maxi = Math.max(maxi,a*a);\" is covered.\n\n13. If - Else condition : always executed. Statements \"if(a>0) {\", \"else if(a==0) {\" and \"else {\" are covered.\n\n14. ArrayList add method : always executed. Statements \"positive.add(a);\", \"negative.add(a);\" and \"minus_nega.add(-a);\" are covered.\n\n15. Collections sort method : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\" and \"Collections.sort(minus_nega);\" are covered.\n\n16. Calculation of lo and hi : always executed. Statements \"long lo = -maxi;\", \"long hi = maxi+1;\" are covered.\n\n17. While loop : always executed. Statement \"while(hi-lo>1) {\" is covered.\n\n18. legal method call : always executed. Statement \"if(legal(mid)) {\" is covered.\n\n19. legal method declaration and execution : always executed. Statement \"boolean legal(long guess) {\" is covered.\n\n20. Calculation of ans : always executed. Statements \"long ans = 0;\", \"if(guess>0) {\" and \"if(guess<=0) {\" are covered.\n\n21. Calculation of ans based on guess > 0 : always executed. Statement \"ans += helperPosList(positive,guess);\" and \"ans += helperPosList(minus_nega,guess);\" are covered.\n\n22. Calculation of ans based on guess <= 0 : always executed. Statements \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\" and \"ans += negative.size()*(negative.size()-1)/2;\" are covered.\n\n23. Calculation of ans based on guess < 0 : always executed. Statements \"if(guess < 0) {\" and \"for(int i=0;i<lenPos;i++) {\" are covered.\n\n24. Calculation of ans based on guess < 0 and lenNeg * lenPos > 0 : always executed. Statements \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\" and \"ans += lenNeg-right;\" are covered.\n\n25. Return statement : always executed. Statement \"return ans >= k;\" is covered.\n\n26. Print statement : always executed. Statement \"System.out.println(lo);\" is covered.\n\n27. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n0\n-2\n1\n-3\n4\n5",
      "test_mutations": [
        "Test Case Input:\n10\n-2\n-3\n-1\n0\n2\n3\n5\n7\n8\n9",
        "Test Case Input:\n\"5\" \n\"3\"\n\"1\"\n\"2\"\n\"3\"\n\"4\"\n\"5\"",
        "Test Case Input:\n-2\n0\n5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n\"5\" \n\"3\" \n\"1\" \n\"2\" \n\"3\" \n\"4\" \n\"5\"",
        "Test Case Input:\n-5\n0\n-3\n-1\n0\n2\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n\"5\\n3\\n1\\n2\\n-3\\n-4\\n-5\"",
        "Test Case Input:\n5\n-1\n0\n2\n-3\n4",
        "Test Case Input:\n2\n0\n-2\n3\n4",
        "Test Case Input:\n5\n0\n-2\n1\n-3\n4\n5"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.util.*;\" will be covered. \n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n\n3. Global variable declaration : always executed. Statements \"static PrintWriter out = new PrintWriter(System.out);\", \"static Scanner sc = new Scanner(System.in);\", \"static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\", \"ArrayList<Long> positive, negative, minus_nega;\", \"long zeros = 0, k = 0, n = 0;\" are covered.\n\n4. Main method declaration and solve method call : always executed. Statements \"public static void main(String[] args) throws IOException {\", \"Main main = new Main();\", \"main.solve();\", \"}\" are covered.\n\n5. solve method execution: Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\", \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\", \"for(int i=0;i<n;i++){\", \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\" are covered.\n\n6. Sort ArrayLists: Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n7. Binary Search: Statements \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1){\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\" are covered.\n\n8. Print the final result: Statement \"System.out.println(lo);\" is covered.\n\n9. legal method execution: Statements \"boolean legal(long guess){\", \"long ans = 0;\", \"if(guess>0){\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\", \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\", \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\", \"}\", \"return ans >= k;\", \"}\" are covered.\n\n10. helperPosList method execution: Statements \"long helperPosList(ArrayList<Long> pos, long lower){\", \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\", \"}\" are covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0\n0\n0\n0\n0\n0\n0",
      "test_mutations": [
        "Test Case Input:\n5\n0\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n5\n0\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n4\n0\n-2\n1\n3",
        "Test Case Input:\n5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n0\n-2\n-1\n-3\n-4\n-5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n3\n0\n1\n-2",
        "Test Case Input:\n0\n0\n0\n0\n0\n0\n0\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. All import statements will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. main method decalarion : always executed. Statements \"public static void main(String[] args) throws IOException {\" is covered.\n4. solve method declaration : always executed. Statement \"void solve() throws IOException {\" is covered.\n5. User Input and Program Output : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" and \"k = n*(n-1)/2+1-k;\" are covered.\n6. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\" and \"minus_nega = new ArrayList<>();\" are covered.\n7. Loop Execution : The for loop will be executed as per the value of n. The loop block will be executed n times. Statement \"for(int i=0;i<n;i++){\" is covered.\n8. Loop Contents : user input statements are always executed. Statement \"long a = sc.nextLong();\" will be executed n times.\n9. If-Else condition : The if-else conditions are based on the value of a. Statements \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a); }\" will be executed based on the condition.\n10. ArrayList Sorting : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\" and \"Collections.sort(minus_nega);\" are covered.\n11. While Loop Execution : The while loop will be executed until the condition (hi-lo>1) is satisfied. Statement \"while(hi-lo>1){\" is covered.\n12. While Loop Contents : Statement \"long mid = (hi+lo)/2;\" is covered. \n13. If condition within While loop : Statement \"if(legal(mid)) lo = mid;\" is covered.\n14. else condition within While loop : Statement \"else hi = mid;\" is covered.\n15. Print Statement : always executed. Statement \"System.out.println(lo);\" is covered.\n16. Closing Brackets : always executed. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n1\n-2\n-3\n4\n5",
      "test_mutations": [
        "Test Case Input:\n-5\n5\n1\n-2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\na\n5\n0\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n0\n0\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n3\n2\n-5\n0\n5",
        "Test Case Input:\n-5\n2\n-1\n0\n-2\n4\n5",
        "Test Case Input:\n-3\n2\n-1\n0\n1\n\nTest Case Input:\n5\n0\n2\n4\n6\n8\n\nTest Case Input:\n5\n5\n-2\n1\n-3\n4",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n0\n1\n-2\n-3\n4\n5"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "The plan for step by step execution of the given Java program is as follows:\n\n1. Import statements: Import statements are always executed. Statements \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", and \"import java.util.*;\" will be covered.\n\n2. Main class declaration: The main class declaration is always executed. Statement \"public class Main {\" is covered.\n\n3. Main method: The main method is always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Create Main object and call solve method: The solve method is called from the Main object. Statement \"Main main = new Main(); main.solve();\" is covered.\n\n5. Read input values: The values of n and k are read from the user. Statements \"n = sc.nextInt();\" and \"k = sc.nextInt();\" are covered.\n\n6. Calculate value of k: The value of k is calculated based on the values of n and k using the formula \"k = n*(n-1)/2+1-k;\". Statement \"k = n*(n-1)/2+1-k;\" is covered.\n\n7. Initialize ArrayLists: The ArrayLists positive, negative, and minus_nega are initialized. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", and \"minus_nega = new ArrayList<>();\" are covered.\n\n8. Initialize maxi variable: The variable maxi is initialized with the minimum value of Long. Statement \"long maxi = Long.MIN_VALUE;\" is covered.\n\n9. Read input values and process them: The values of a are read from the user and processed based on their sign. Statements within the for loop are covered.\n\n10. Sort ArrayLists: The ArrayLists positive, negative, and minus_nega are sorted. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", and \"Collections.sort(minus_nega);\" are covered.\n\n11. Binary search for lo: A binary search is performed to find the value of lo. Statements within the while loop are covered.\n\n12. Print lo value: The value of lo is printed. Statement \"System.out.println(lo);\" is covered.\n\n13. Legal method: The legal method is called within the while loop. Statements within the legal method are covered.\n\n14. helperPosList method: The helperPosList method is called within the legal method. Statements within the helperPosList method are covered.\n\n15. Closing brackets: Closing brackets are always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
      "test_mutations": [
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n-3\n-1\n-2\n-3\n-4\n-5",
        "Test Case Input:\n-2\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n5\n0\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n5\n-1\n0\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n-5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n0\n0\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n-1\n-2\n-3\n-4\n-5",
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. The statement \"import java.io.BufferedReader;\" will be covered.\n\n2. Main Class Declaration : always executed. The statement \"public class Main {\" is covered.\n\n3. Main method declaration : always executed. The statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Main method body : always executed. The statement \"Main main = new Main(); main.solve();\" is covered.\n\n5. solve() method declaration and execution : method declaration is always executed. The statement \"void solve() throws IOException {\" is covered. The statements inside the solve() method will be executed as follows:\n\n6. User Input and Program Output : always executed. The statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", and \"System.out.println(lo);\" are covered.\n\n7. ArrayList Initialization : always executed. The statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", and \"minus_nega = new ArrayList<>();\" are covered.\n\n8. Loop Execution : Since n is -1, the loop condition (i < n) is false, and the loop block will not be executed. The statement \"for(int i=0;i<n;i++){\" is not covered.\n\n9. if-else conditions : Since the loop is not executed, the statements inside the loop block will not be executed. The if-else conditions \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", and \"else{ negative.add(a); minus_nega.add(-a); }\" are not covered.\n\n10. Collections sorting : Since the loop is not executed, the collections sorting statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", and \"Collections.sort(minus_nega);\" are not covered.\n\n11. lo and hi calculation : Since the loop is not executed, the statements \"long lo = -maxi, hi = maxi+1;\" and \"while(hi-lo>1){\" are not covered.\n\n12. legal() method call : Since the loop is not executed, the statement \"if(legal(mid)) lo = mid;\" inside the while loop is not covered.\n\n13. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n3\n-1\n2\n-3\n4\n5",
      "test_mutations": [
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-5\n0\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-5\n3\n-1\n-2\n-3\n-4\n-5",
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-10\n5\n-2\n1\n-3\n4\n5\nExplanation: The input values include a negative integer (-10) for the variable 'n' and a positive integer (5) for the variable 'k'.",
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-5\n0\n-1\n2\n3\n4\n-5",
        "Test Case Input:\n3\n-1\n2\n-3\n4\n5"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "1. Import statements : Import statements are always executed. The import statements in the code will be covered.\n2. Main Class Declaration : always executed. The statement \"public class Main {\" is covered.\n3. Main method declaration : always executed. The statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. solve method declaration and execution : The solve method will be executed. The statement \"void solve() throws IOException {\" is covered.\n5. User Input and Program Output : always executed. The statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered.\n6. ArrayList and variable initialization : always executed. The statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long zeros = 0, k = 0, n = 0;\" are covered.\n7. For loop Execution : Since the value of n is 3, the for loop condition (i<n) is true, and the loop block will be executed. The statement \"for(int i=0;i<n;i++){\" is covered.\n8. User input within the for loop : always executed. The statement \"long a = sc.nextLong();\" is covered.\n9. If - Else condition : The if condition 'a>0' is not satisfied. The else if condition 'a==0' is not satisfied. The else condition is satisfied, so the statement \"else{\" is covered. \n10. ArrayList operations : always executed. The statements \"negative.add(a);\", \"minus_nega.add(-a);\" are covered.\n11. Math.max operation : always executed. The statement \"maxi = Math.max(maxi,a*a);\" is covered.\n12. Collections.sort operations : always executed. The statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n13. Variable assignment and calculation : always executed. The statement \"k = n*(n-1)/2+1-k;\" is covered.\n14. while loop execution : The while loop condition (hi-lo>1) is true, and the loop block will be executed. The statement \"while(hi-lo>1){\" is covered.\n15. if condition within while loop : Since the guess value is greater than 0, the if condition 'guess>0' is true and the block will be executed. The statement \"if(guess>0){\" is covered.\n16. helperPosList method call : always executed. The statement \"ans += helperPosList(positive,guess);\" is covered.\n17. if condition within if condition : The if condition 'ans>=k' is false. The statement \"if(ans>=k) return true;\" is not covered.\n18. else if condition within while loop : The else if condition 'guess<=0' is true and the block will be executed. The statement \"else if(guess<=0){\" is covered.\n19. Variable assignment and calculation within else if : always executed. The statements \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\" are covered.\n20. if condition within else if condition : The if condition 'ans>=k' is false. The statement \"if(ans>=k) return true;\" is not covered.\n21. if condition within while loop : The if condition 'guess < 0' is true and the block will be executed. The statement \"if(guess < 0){\" is covered.\n22. Variable assignment and calculation within if condition : always executed. The statements \"int lenPos = positive.size(), lenNeg = negative.size();\", \"int right = 0;\" are covered.\n23. for loop within if condition : always executed. The statement \"for(int i=0;i<lenPos;i++){\" is covered.\n24. ArrayList.get method : always executed. The statements \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\" are covered.\n25. Variable assignment and calculation within for loop : always executed. The statement \"ans += lenNeg-right;\" is covered.\n26. return statement within while loop : The return statement is executed if the condition is satisfied. The statement \"return ans >= k;\" is not covered.\n27. System.out.println statement : always executed. The statement \"System.out.println(lo);\" is covered.\n28. Closing Brackets : always covered.\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n5\n0\n-2\n1\n-3\n4\n5",
      "test_mutations": [
        "Test Case Input:\n0\n0\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-5\n-3\n-1\n-2\n-3\n-4\n-5",
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-5\n0\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n3\n0\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-1\n0\n-2\n3\n-4\n5",
        "Test Case Input:\n5\n0\n-2\n1\n-3\n4\n5"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN:\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\", \"import java.util.ArrayList;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. solve method declaration : always executed. Statement \"void solve() throws IOException {\" is covered.\n5. User Input and Variable Initialization : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered. \n6. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered. \n7. Loop Execution : Since n is 5, the for loop condition (i<n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" is covered. \n8. Loop Contents : user input statements are always executed. Statement \"long a = sc.nextLong();\" is covered. \n9. if - else if - else condition : Since a is not zero, the else if condition 'a==0' is not satisfied. The else condition is satisfied so statements 'else{' and \"negative.add(a);\", \"minus_nega.add(-a);\" are covered. \n10. ArrayList Sorting : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n11. Max value calculation : always executed. Statement \"maxi = Math.max(maxi,a*a);\" is covered. \n12. while loop Execution : loop condition (hi-lo>1) is true, and the loop block will be executed. Statement \"while(hi-lo>1){\" is covered.\n13. legal method call : always executed. Statement \"if(legal(mid)) lo = mid;\" is covered. \n14. System.out.println() statement : always executed. Statement \"System.out.println(lo);\" is covered. \n15. legal method Declaration and Execution : method declaration is always executed. \"boolean legal(long guess){\" is covered. \n16. helperPosList method declaration and execution : always executed. \"long helperPosList(ArrayList<Long> pos, long lower){\" is covered. \n17. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-1\n0\n0\n0\n0\n0\n0\n0",
      "test_mutations": [
        "Test Case Input:\n-1\n0\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n0\n1\n-2\n-3\n4\n5",
        "Test Case Input:\n1\n1",
        "Test Case Input:\n-5\n0\n-1\n-2\n-3\n-4\n-5",
        "Test Case Input:\n0\n0\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n5\n1\n2\n3\n4\n5",
        "Test Case Input:\n2\n-1\n1\n-2\n\nTest Case Input:\n4\n0\n1\n-2\n3",
        "Test Case Input:\n-1\n0\n0\n0\n0\n0\n0\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.util.*;\", \"import java.net.CookieHandler;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Global Variables Declaration : always executed. Statements \"static PrintWriter out = new PrintWriter(System.out);\", \"static Scanner sc = new Scanner(System.in);\", \"static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\", \"ArrayList<Long> positive, negative, minus_nega;\", \"long zeros = 0, k = 0, n = 0;\" are covered. \n4. Main method Declaration and Execution : always executed. Statements \"public static void main(String[] args) throws IOException {\", \"Main main = new Main();\", \"main.solve();\", \"}\" are covered. \n5. solve method Declaration and Execution : always executed. Statements \"void solve() throws IOException {\", \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\", \"positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\", \"for(int i=0;i<n;i++){\", \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\", \"}\", \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\", \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1){\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\", \"System.out.println(lo);\", \"}\" are covered. \n6. legal method Declaration and Execution : always executed. Statements \"boolean legal(long guess){\", \"long ans = 0;\", \"if(guess>0){\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\", \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\", \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\", \"}\", \"return ans >= k;\", \"}\" are covered. \n7. helperPosList method Declaration and Execution : always executed. Statements \"long helperPosList(ArrayList<Long> pos, long lower){\", \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\", \"}\" are covered. \n8. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k;\n>         positive = new ArrayList<>();\n>         negative = new ArrayList<>();\n>         minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
      "test_mutations": [
        "Test Case Input:\n-5\n3\n-1\n-2\n-3\n-4\n-5",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-1\n0\n1\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-1\n0\n-2\n-3\n4\n5",
        "Test Case Input:\n-1\n0\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-1\n0\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n-1\n3\n-2\n1\n-3\n4\n5"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statements \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Main method contents : always executed. Statement \"Main main = new Main(); main.solve();\" is covered.\n\n5. solve method declaration and execution : always executed. Statement \"void solve() throws IOException {\" is covered.\n\n6. User Input and Program Output : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered.\n\n7. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n\n8. Loop Execution : Since n = -1, the loop condition (i<n) is false, and the loop block will not be executed. Statement \"for(int i=0;i<n;i++){\" is not covered.\n\n9. Math.max and ArrayList Operations : always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a); }\" are covered.\n\n10. ArrayList Sorting : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n11. While Loop Execution : always executed. Statements \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1){\" are covered.\n\n12. if conditions : always executed. Statements \"if(legal(mid)) lo = mid;\", \"else hi = mid;\" are covered.\n\n13. Output Statement : always executed. Statement \"System.out.println(lo);\" is covered.\n\n14. legal method declaration and execution : always executed. Statement \"boolean legal(long guess) {\" is covered.\n\n15. if - else conditions within legal method : always executed. Statements \"if(guess>0){\", \"if(guess<=0){\", \"if(guess < 0){\" are covered.\n\n16. helperPosList method declaration and execution : always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered.\n\n17. helperPosList method contents : always executed. Statements \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\" are covered.\n\n18. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k;\n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2;\n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0",
      "test_mutations": [
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n0\n-1\n2\n3\n4\n5",
        "Test Case Input:\n-3\n2\n1\n-2",
        "Test Case Input:\n-5\n0\n-1\n2\n-3\n4\n-5",
        "Test Case Input:\n2\n3\n4\n5",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n5\n-2\n1\n-3\n4\n5",
        "Test Case Input:\n5\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main class declaration: Always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: Always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Method call within main method: Since a new instance of the Main class is created and the solve() method is called, the solve() method will be executed. Statement \"main.solve();\" is covered.\n\n5. solve() method declaration: Always executed. Statement \"void solve() throws IOException {\" is covered.\n\n6. User input statements: The statements \"n = sc.nextInt();\" and \"k = sc.nextInt();\" will be executed. \n\n7. Variable initialization: The variables positive, negative, minus_nega, zeros, k, and n will be initialized. Statement \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\" are covered.\n\n8. For loop execution: The for loop will execute n times. The statements inside the for loop will be executed. \n\n9. User input and variable assignment inside the for loop: The statement \"long a = sc.nextLong();\" will be executed and the variable \"a\" will be assigned a value. \n\n10. Conditional statements inside the for loop: Depending on the value of \"a\", different statements will be executed. The if-else conditions and their associated statements will be executed. \n\n11. ArrayList operations inside the for loop: Depending on the value of \"a\", the ArrayList operations inside the for loop will be executed. Statements related to adding elements to the ArrayLists are covered. \n\n12. Collections.sort() method calls: The statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" will be executed. \n\n13. Variable assignment: The variables \"lo\" and \"hi\" will be assigned values. \n\n14. while loop execution: The while loop will execute until the condition \"hi-lo>1\" is false. The statements inside the while loop will be executed. \n\n15. Conditional statement inside the while loop: Depending on the result of the \"legal(mid)\" method call, different statements will be executed. \n\n16. Method call inside the while loop: The method \"legal(mid)\" will be called. \n\n17. legal() method declaration: Always executed. Statement \"boolean legal(long guess) {\" is covered. \n\n18. Conditional statements inside the legal() method: Depending on the value of \"guess\", different conditional statements will be executed. \n\n19. Conditional statements and calculations inside the legal() method: Depending on the conditions and calculations, different statements will be executed. \n\n20. Return statement inside the legal() method: The return statement will be executed. \n\n21. System.out.println() statement: The statement \"System.out.println(lo);\" will be executed. \n\n22. Closing brackets: Always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is: \n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}