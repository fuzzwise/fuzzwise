{
  "submission_id": "s016834584",
  "cycles": [
    {
      "test_case": "Test Case Input:\n2\n1\n1",
      "test_mutations": [
        "Test Case Input:\n10\n5\n3",
        "Test Case Input:\n1\n1\n1",
        "Test Case Input:\n1\n1\n1",
        "Test Case Input:\n50\n50\n50",
        "Test Case Input:\n50\n10\n15",
        "Test Case Input:\n50\n25\n25",
        "Test Case Input:\n1\n1\n1",
        "Test Case Input:\n50\n50\n50",
        "Test Case Input:\n50\n10\n20",
        "Test Case Input:\n2\n1\n1"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and tets case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\" and \"int b = sc.nextInt();\" are covered.\n5. Printing 100 100 : always executed. Statement \"System.out.println(100 + \" \" + 100);\" is covered.\n6. 2D Array grid initialization : always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n7. Nested for loop 1 : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n8. If - Else condition 1 : if condition 'i < 50' is satisfied for i=0 to i=49. Statements inside if block will be covered. \n9. Nested for loop 2 : always executed. Statements \"a--;\" and \"b--;\" are covered.\n10. If - Else condition 2 : if condition 'i % 2 == 0' and 'j % 2 == 0' is satisfied for i=0 to i=49 and j=0 to j=99. Statements inside if block will be covered.\n11. Nested for loop 3 : always executed. Statements \"a--;\" and \"b--;\" are covered.\n12. If - Else condition 3 : if condition 'i % 2 == 1' and 'j % 2 == 0' is satisfied for i=99 to i=50 and j=0 to j=99. Statements inside if block will be covered.\n13. Nested for loop 4 : always executed. Statement \"System.out.print(grid[i][j]);\" is covered.\n14. Nested for loop 5 : always executed. Statement \"System.out.println();\" is covered.\n15. Closing Brackets : always covered.\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2 \n1 \nabc",
      "test_mutations": [
        "Test Case Input:\n\"2\"",
        "Test Case Input:\n\"2\" \n\"1.5\" \n\"1\"",
        "Test Case Input:\n\"2\" (input value is a string instead of an integer)\n\"1\"\n\"1\"",
        "Test Case Input:\n\"2\"\n\"1\"\n\"1\"",
        "Test Case Input:\n\"2\"",
        "Test Case Input:\n\"2\"\n\"1\"\n\"1\"",
        "Test Case Input:\n\"2.5\"\n\"1\"\n\"1\"",
        "Test Case Input:\n\"2\" (as a string)\n\"1\" (as a string)\n\"1\" (as a string)",
        "Test Case Input:\n\"2\" (as a string)\n\"1\" (as a string)\n\"1\" (as a string)",
        "Test Case Input:\n\"2\" \n\"1\" \n\"abc\""
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. User Input and Program Output: always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\" are covered.\n\n5. Print Statement: always executed. Statement \"System.out.println(100 + \" \" + 100);\" is covered.\n\n6. Grid Initialization: always executed. Statements \"String[][] grid = new String[100][100];\", \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n\n7. Grid Population: always executed. Statements inside the nested for loop will be covered. \n\n8. Variable Modification: always executed. Statements \"a--;\" and \"b--;\" are covered.\n\n9. Grid Modification Loop 1: Since the value of 'a' is 0, the if condition inside the loop is false and the loop will not be executed. Statements \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are not covered.\n\n10. Grid Modification Loop 2: Since the value of 'b' is 0, the if condition inside the loop is false and the loop will not be executed. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are not covered.\n\n11. Grid Printing: always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n\n12. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\nabc",
      "test_mutations": [
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n\"2\" \n\"1\" \n\"abc\"",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n0",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n0",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n0",
        "Test Case Input:\n\"2 1 abc\"",
        "Test Case Input:\n\"2\"\n\"1\"\n\"abc\""
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\" and \"System.out.println(100 + \" \" + 100);\" are covered.\n5. Grid declaration and initialization : always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n6. First nested for loop : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n7. If condition inside first nested for loop : since i is always less than 50, the if condition 'i < 50' is always true. Statement \"if(i < 50) {\" is covered.\n8. Assigning values to grid array inside first nested for loop : always executed. Statement \"grid[i][j] = \"*\";\" is covered.\n9. Second nested for loop : always executed. Statements \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n10. If condition inside second nested for loop : since a is 0, the if condition 'a == 0' is always true. Statement \"if(a == 0) break;\" is covered.\n11. If condition inside second nested for loop : since i is always even and j is always even, the if condition '(i % 2 == 0) && (j % 2 == 0)' is always true. Statement \"if((i % 2 == 0) && (j % 2 == 0)) {\" is covered.\n12. Assigning values to grid array inside second nested for loop : always executed. Statement \"grid[i][j] = \".\";\" is covered.\n13. Decrementing value of a inside second nested for loop : always executed. Statement \"a--;\" is covered.\n14. Third nested for loop : always executed. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n15. If condition inside third nested for loop : since b is 0, the if condition 'b == 0' is always true. Statement \"if(b == 0) break;\" is covered.\n16. If condition inside third nested for loop : since i is always odd and j is always even, the if condition '(i % 2 == 1) && (j % 2 == 0)' is always true. Statement \"if((i % 2 == 1) && (j % 2 == 0)) {\" is covered.\n17. Assigning values to grid array inside third nested for loop : always executed. Statement \"grid[i][j] = \"*\";\" is covered.\n18. Decrementing value of b inside third nested for loop : always executed. Statement \"b--;\" is covered.\n19. Fourth nested for loop : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n20. Printing values of grid array : always executed. Statement \"System.out.print(grid[i][j]);\" is covered.\n21. Printing new line after each row : always executed. Statement \"System.out.println();\" is covered.\n22. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\n0",
      "test_mutations": [
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n0",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n0",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n0"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements: Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output: always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", and \"int b = sc.nextInt();\" are covered.\n5. Printing 100 and 100: always executed. Statement \"System.out.println(100 + \" \" + 100);\" is covered.\n6. Grid array creation: always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n7. Nested For Loop 1: always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n8. If-Else condition inside Nested For Loop 1: always executed. Statement \"if(i < 50) {\" is covered. Statements \"grid[i][j] = \"*\";\" and \"grid[i][j] = \".\";\" are covered based on the if-else condition.\n9. Decrementing a and b: always executed. Statements \"a--;\" and \"b--;\" are covered.\n10. Nested For Loop 2: since the value of a is not equal to 0, the loop block will be executed. Statements \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n11. If condition inside Nested For Loop 2: since the condition (a == 0) is not satisfied, the if block will not be executed. Statement \"if(a == 0) break;\" is not covered.\n12. If condition inside Nested For Loop 2 (continued): the if condition (i % 2 == 0) is satisfied for all iterations, but the if condition (j % 2 == 0) is not satisfied for some iterations. The if block will be executed only for iterations where both conditions are satisfied. Statements \"grid[i][j] = \".\";\" and \"a--;\" will be covered only for those iterations.\n13. Nested For Loop 3: since the value of b is not equal to 0, the loop block will be executed. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n14. If condition inside Nested For Loop 3: since the condition (b == 0) is not satisfied, the if block will not be executed. Statement \"if(b == 0) break;\" is not covered.\n15. If condition inside Nested For Loop 3 (continued): the if condition (i % 2 == 1) is satisfied for all iterations, but the if condition (j % 2 == 0) is not satisfied for some iterations. The if block will be executed only for iterations where both conditions are satisfied. Statements \"grid[i][j] = \"*\";\" and \"b--;\" will be covered only for those iterations.\n16. Nested For Loop 4: always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n17. Printing the grid: always executed. Statements \"System.out.print(grid[i][j]);\" and \"System.out.println();\" are covered.\n18. Closing Brackets: always covered.\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\nabc",
      "test_mutations": [
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n-2\n1\n1",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n2. Main class declaration: Class declaration is always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: Main method declaration is always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output: User input statements are always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", and \"int b = sc.nextInt();\" are covered. Also, statement \"System.out.println(100 + \" \" + 100);\" is covered.\n5. Grid creation and initialization: Statements for creating and initializing the grid are always executed. Statements \"String[][] grid = new String[100][100];\", \"for(int i = 0; i < 100; i++) {\", and \"for(int j = 0; j < 100; j++) {\" are covered.\n6. Grid population - Part 1: Loop for populating the upper half of the grid is executed. Statements \"if(i < 50) {\", \"grid[i][j] = \"*\";\", and \"grid[i][j] = \".\";\" are covered.\n7. Adjustment of input variables: Statements for adjusting variable values are always executed. Statements \"a--;\" and \"b--;\" are covered.\n8. Grid population - Part 2: Loop for populating the upper half of the grid with \".\" is executed. Statements \"for(int i = 0; i < 50; i++) {\", \"for(int j = 0; j < 100; j++) {\", \"if(a == 0) break;\", and \"if((i % 2 == 0) && (j % 2 == 0)) {\" are covered.\n9. Grid population - Part 3: Loop for populating the lower half of the grid with \"*\" is executed. Statements \"for(int i = 99; i > 50; i--) {\", \"for(int j = 0; j < 100; j++) {\", \"if(b == 0) break;\", and \"if((i % 2 == 1) && (j % 2 == 0)) {\" are covered.\n10. Grid printing: Loop for printing the grid is always executed. Statements \"for(int i = 0; i < 100; i++) {\", \"for(int j = 0; j < 100; j++) {\", and \"System.out.print(grid[i][j]);\" are covered.\n11. Closing brackets: Closing brackets are always executed. Statements \"}\", \"}\", and \"}\" are covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\n-1",
      "test_mutations": [
        "Test Case Input:\n0\n1\n1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n0",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n0",
        "Test Case Input:\n2\n1\n-1"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method declaration : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\" and \"System.out.println(100 + \" \" + 100);\" are covered. \n5. 2D Array Initialization : always executed. Statement \"String[][] grid = new String[100][100];\" is covered. \n6. First nested for loop : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered. \n7. If condition inside first nested for loop : always executed. Statement \"if(i < 50) {\" is covered. \n8. Assigning values in 2D array inside if condition : always executed. Statement \"grid[i][j] = \"*\";\" is covered. \n9. Assigning values in 2D array inside else condition : always executed. Statement \"grid[i][j] = \".\";\" is covered. \n10. Decrementing variables 'a' and 'b' : always executed. Statements \"a--;\" and \"b--;\" are covered. \n11. Second nested for loop : always executed. Statements \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered. \n12. If condition inside second nested for loop : always executed. Statement \"if(a == 0) break;\" is covered. \n13. If condition inside second nested for loop : executed based on input values. If the condition is satisfied, statement \"if((i % 2 == 0) && (j % 2 == 0)) {\" is covered. \n14. Changing value in 2D array inside if condition : executed based on input values. If the condition is satisfied, statement \"grid[i][j] = \".\";\" is covered. \n15. Decrementing variable 'a' inside if condition : executed based on input values. If the condition is satisfied, statement \"a--;\" is covered. \n16. Third nested for loop : always executed. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered. \n17. If condition inside third nested for loop : always executed. Statement \"if(b == 0) break;\" is covered. \n18. If condition inside third nested for loop : executed based on input values. If the condition is satisfied, statement \"if((i % 2 == 1) && (j % 2 == 0)) {\" is covered. \n19. Changing value in 2D array inside if condition : executed based on input values. If the condition is satisfied, statement \"grid[i][j] = \"*\";\" is covered. \n20. Decrementing variable 'b' inside if condition : executed based on input values. If the condition is satisfied, statement \"b--;\" is covered. \n21. Fourth nested for loop : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered. \n22. Printing values in 2D array : always executed. Statement \"System.out.print(grid[i][j]);\" is covered. \n23. Printing new line after each row : always executed. Statement \"System.out.println();\" is covered. \n24. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\n0",
      "test_mutations": [
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-2",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-2",
        "Test Case Input:\n2\n1\n0"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output: always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\", and \"System.out.println(100 + \" \" + 100);\" are covered.\n5. 2D Array Initialization: always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n6. First Nested Loop: always executed. The nested for loop from i=0 to i<100 and j=0 to j<100 is covered.\n7. If-Else condition inside first nested loop: always executed. The if condition \"if(i < 50)\" is covered and the else condition is also covered as it is the opposite of the if condition.\n8. Value assignment inside first nested loop: always executed. Statements \"grid[i][j] = \"*\";\" and \"grid[i][j] = \".\";\" are covered.\n9. Decrementing variables a and b: always executed. Statements \"a--;\" and \"b--;\" are covered.\n10. Second Nested Loop: always executed. The nested for loop from i=0 to i<50 and j=0 to j<100 is covered.\n11. If condition inside second nested loop: The if condition \"(i % 2 == 0) && (j % 2 == 0)\" is executed only if the value of a is not equal to 0. So, the if condition may or may not be covered depending on the value of a.\n12. Value assignment inside second nested loop: The statement \"grid[i][j] = \".\";\" is executed only if the if condition is true. So, the statement may or may not be covered depending on the value of a.\n13. Decrementing variable a inside second nested loop: The statement \"a--;\" is executed only if the if condition is true. So, the statement may or may not be covered depending on the value of a.\n14. Third Nested Loop: always executed. The nested for loop from i=99 to i>50 and j=0 to j<100 is covered.\n15. If condition inside third nested loop: The if condition \"(i % 2 == 1) && (j % 2 == 0)\" is executed only if the value of b is not equal to 0. So, the if condition may or may not be covered depending on the value of b.\n16. Value assignment inside third nested loop: The statement \"grid[i][j] = \"*\";\" is executed only if the if condition is true. So, the statement may or may not be covered depending on the value of b.\n17. Decrementing variable b inside third nested loop: The statement \"b--;\" is executed only if the if condition is true. So, the statement may or may not be covered depending on the value of b.\n18. Fourth Nested Loop: always executed. The nested for loop from i=0 to i<100 and j=0 to j<100 is covered.\n19. Printing grid elements: always executed. The statement \"System.out.print(grid[i][j]);\" is covered.\n20. Printing new line: always executed. The statement \"System.out.println();\" is covered.\n21. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\n-1",
      "test_mutations": [
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n1",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-1"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n\n2. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n3. User Input and Program Output: always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\", \"System.out.println(100 + \" \" + 100);\" are covered.\n\n4. Array initialization: always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n\n5. Nested for loops: both for loops will be executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n\n6. If condition inside nested for loops: the if condition will be executed. Statement \"if(i < 50) {\" is covered.\n\n7. Array assignment inside if condition: the assignment statement will be executed. Statement \"grid[i][j] = \"*\";\" is covered.\n\n8. Array assignment inside else condition: the assignment statement will be executed. Statement \"grid[i][j] = \".\";\" is covered.\n\n9. Variable modification: the variables \"a\" and \"b\" will be modified. Statements \"a--;\" and \"b--;\" are covered.\n\n10. Nested for loops for variable \"a\": both for loops will be executed. Statements \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n\n11. If condition inside nested for loops for variable \"a\": the if condition will be executed. Statement \"if((i % 2 == 0) && (j % 2 == 0)) {\" is covered.\n\n12. Array assignment inside if condition for variable \"a\": the assignment statement will be executed. Statement \"grid[i][j] = \".\";\" is covered.\n\n13. Nested for loops for variable \"b\": both for loops will be executed. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n\n14. If condition inside nested for loops for variable \"b\": the if condition will be executed. Statement \"if((i % 2 == 1) && (j % 2 == 0)) {\" is covered.\n\n15. Array assignment inside if condition for variable \"b\": the assignment statement will be executed. Statement \"grid[i][j] = \"*\";\" is covered.\n\n16. Nested for loops for printing the grid: both for loops will be executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n\n17. Print statement inside nested for loops: the print statement will be executed. Statement \"System.out.print(grid[i][j]);\" is covered.\n\n18. Print statement after nested for loops: the print statement will be executed. Statement \"System.out.println();\" is covered.\n\n19. Closing brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n>import java.util.*;\n>\n>public class Main {\n>  public static void main(String[] args) {\n>    Scanner sc = new Scanner(System.in);\n>    int n = sc.nextInt();\n>    int a = sc.nextInt();\n>    int b = sc.nextInt();\n>    System.out.println(100 + \" \" + 100);\n>    String[][] grid = new String[100][100];\n>    for(int i = 0; i < 100; i++) {\n>      for(int j = 0; j < 100; j++) {\n>        if(i < 50) {\n>          grid[i][j] = \"*\";\n>        } else {\n>          grid[i][j] = \".\";\n>        }\n>      }\n>    }\n>    a--;\n>    b--;\n>    for(int i = 0; i < 50; i++) {\n>      for(int j = 0; j < 100; j++) {\n>        if(a == 0) break;\n>        if((i % 2 == 0) && (j % 2 == 0)) {\n>          grid[i][j] = \".\";\n>          a--;\n>        }\n>      }\n>    }\n>    for(int i = 99; i > 50; i--) {\n>      for(int j = 0; j < 100; j++) {\n>        if(b == 0) break;\n>        if((i % 2 == 1) && (j % 2 == 0)) {\n>          grid[i][j] = \"*\";\n>          b--;\n>        }\n>      }\n>    }\n>    for(int i = 0; i < 100; i++) {\n>      for(int j = 0; j < 100; j++) {\n>        System.out.print(grid[i][j]);\n>      }\n>      System.out.println();\n>    }\n>  }\n>}",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2 \n1 \nabc",
      "test_mutations": [
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-2",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n\"2\" \n\"1\" \n\"-1\"",
        "Test Case Input:\n\"2\" \n\"1\" \n\"abc\""
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\" are covered. \n5. Print Statements : always executed. Statement \"System.out.println(100 + \" \" + 100);\" is covered.\n6. Grid Initialization : always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n7. First Nested Loop : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n8. If condition within First Nested Loop : Since i is less than 50, the if condition 'i < 50' is true, and the if block will be executed. Statement \"if(i < 50) {\" and \"grid[i][j] = \"*\";\" are covered.\n9. Else condition within First Nested Loop : Since i is not less than 50, the else block will be executed. Statement \"else {\" and \"grid[i][j] = \".\";\" are covered.\n10. Decrement of a and b : always executed. Statements \"a--;\" and \"b--;\" are covered.\n11. Second Nested Loop : always executed. Statements \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n12. If condition within Second Nested Loop : Since a is not equal to 0, the if condition 'a == 0' is false, and the if block will not be executed. Statement \"if(a == 0) break;\" is not covered.\n13. If condition within Second Nested Loop : Since (i % 2 == 0) and (j % 2 == 0), the if condition is true and the if block will be executed. Statement \"if((i % 2 == 0) && (j % 2 == 0)) {\" and \"grid[i][j] = \".\";\" are covered.\n14. Decrement of a within Second Nested Loop : always executed. Statement \"a--;\" is covered.\n15. Third Nested Loop : always executed. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n16. If condition within Third Nested Loop : Since b is not equal to 0, the if condition 'b == 0' is false, and the if block will not be executed. Statement \"if(b == 0) break;\" is not covered.\n17. If condition within Third Nested Loop : Since (i % 2 == 1) and (j % 2 == 0), the if condition is true and the if block will be executed. Statement \"if((i % 2 == 1) && (j % 2 == 0)) {\" and \"grid[i][j] = \"*\";\" are covered.\n18. Decrement of b within Third Nested Loop : always executed. Statement \"b--;\" is covered.\n19. Fourth Nested Loop : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n20. Print Statement within Fourth Nested Loop : always executed. Statement \"System.out.print(grid[i][j]);\" is covered.\n21. New Line Print Statement within Fourth Nested Loop : always executed. Statement \"System.out.println();\" is covered.\n22. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\n-1",
      "test_mutations": [
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-100",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-1"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output: always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\", and \"System.out.println(100 + \" \" + 100);\" are covered.\n5. 2D Array Initialization: always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n6. First Nested For Loop Execution: always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n7. If-Else condition inside the First Nested For Loop: always executed. Statements \"if(i < 50) {\" and \"grid[i][j] = \"*\";\" are covered.\n8. Second Nested For Loop Execution: always executed. Statements \"a--;\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n9. If condition inside the Second Nested For Loop: always executed. Statement \"if(a == 0) break;\" is covered.\n10. If condition inside the Second Nested For Loop: If condition is not satisfied. Statements \"if((i % 2 == 0) && (j % 2 == 0)) {\" and \"grid[i][j] = \".\";\" are not covered.\n11. Third Nested For Loop Execution: always executed. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n12. If condition inside the Third Nested For Loop: always executed. Statement \"if(b == 0) break;\" is covered.\n13. If condition inside the Third Nested For Loop: If condition is not satisfied. Statements \"if((i % 2 == 1) && (j % 2 == 0)) {\" and \"grid[i][j] = \"*\";\" are not covered.\n14. Fourth Nested For Loop Execution: always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n15. Printing the grid: always executed. Statements \"System.out.print(grid[i][j]);\" and \"System.out.println();\" are covered.\n16. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\nabc",
      "test_mutations": [
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output: always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\", and \"System.out.println(100 + \" \" + 100);\" are covered.\n5. Grid Initialization: always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n6. First Nested Loop: executed 100 times. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n7. If Condition inside First Nested Loop: executed 50 times. Statement \"if(i < 50) {\" is covered.\n8. Grid Assignment inside First Nested Loop: executed 50 times. Statement \"grid[i][j] = \"*\";\" is covered.\n9. Else Condition inside First Nested Loop: executed 50 times. Statement \"grid[i][j] = \".\";\" is covered.\n10. Decrementing a and b: always executed. Statements \"a--;\" and \"b--;\" are covered.\n11. Second Nested Loop: executed 50 times. Statements \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n12. If Condition inside Second Nested Loop: executed at most 50 times. Statement \"if(a == 0) break;\" is covered if a is not 0.\n13. If Condition inside Second Nested Loop: executed at most 25 times. Statement \"if((i % 2 == 0) && (j % 2 == 0)) {\" is covered.\n14. Grid Assignment inside Second Nested Loop: executed at most 25 times. Statement \"grid[i][j] = \".\";\" is covered if a is not 0.\n15. Decrementing a inside Second Nested Loop: executed at most 25 times. Statement \"a--;\" is covered if a is not 0.\n16. Third Nested Loop: executed 50 times. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n17. If Condition inside Third Nested Loop: executed at most 50 times. Statement \"if(b == 0) break;\" is covered if b is not 0.\n18. If Condition inside Third Nested Loop: executed at most 25 times. Statement \"if((i % 2 == 1) && (j % 2 == 0)) {\" is covered.\n19. Grid Assignment inside Third Nested Loop: executed at most 25 times. Statement \"grid[i][j] = \"*\";\" is covered if b is not 0.\n20. Decrementing b inside Third Nested Loop: executed at most 25 times. Statement \"b--;\" is covered if b is not 0.\n21. Fourth Nested Loop: always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n22. Printing the Grid: always executed. Statements \"System.out.print(grid[i][j]);\" and \"System.out.println();\" are covered.\n23. Closing Brackets: always covered.\n24. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\nabc",
      "test_mutations": [
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n0",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n\"2\n1\nabc\"",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case-\n1. Import statements : Import statements are always executed.\n2. Main method declaration : always executed.\n3. User Input and Program Output : always executed.\n4. Variable Initialization and Declaration : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\", \"System.out.println(100 + \" \" + 100);\", \"String[][] grid = new String[100][100];\" are covered.\n5. First nested for loop : since the value of i is less than 100, the for loop condition is true and the loop block is executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n6. If-else condition in first nested for loop : since the value of i is less than 50, the if condition is true and the if block is executed. Statement \"grid[i][j] = \"*\";\" is covered.\n7. Second nested for loop : since the value of j is less than 100, the for loop condition is true and the loop block is executed. Statements \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n8. If condition in second nested for loop : since the value of a is not 0, the if condition is true and the if block is executed. Statements \"if(a == 0) break;\" and \"if((i % 2 == 0) && (j % 2 == 0)) {\" are covered.\n9. Variable modification in second nested for loop : since the value of a is not 0, the statements inside the if block are executed. Statements \"grid[i][j] = \".\";\" and \"a--;\" are covered.\n10. Third nested for loop : since the value of i is greater than 50, the for loop condition is true and the loop block is executed. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n11. If condition in third nested for loop : since the value of b is not 0, the if condition is true and the if block is executed. Statements \"if(b == 0) break;\" and \"if((i % 2 == 1) && (j % 2 == 0)) {\" are covered.\n12. Variable modification in third nested for loop : since the value of b is not 0, the statements inside the if block are executed. Statements \"grid[i][j] = \"*\";\" and \"b--;\" are covered.\n13. Fourth nested for loop : since the value of j is less than 100, the for loop condition is true and the loop block is executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n14. Print statement in fourth nested for loop : always executed. Statement \"System.out.print(grid[i][j]);\" is covered.\n15. New line after fourth nested for loop : always executed. Statement \"System.out.println();\" is covered.\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2 1 abc",
      "test_mutations": [
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n\"2\", \"1\", \"abc\"",
        "Test Case Input:\n-2\n1\n1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n\"2 1 abc\""
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program with the given test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. User Input and Program Output: always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\", and \"System.out.println(100 + \" \" + 100);\" are covered.\n\n5. Grid Initialization: always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n\n6. First Nested For Loop: always executed. The outer loop will iterate 100 times and the inner loop will also iterate 100 times. The loop block will be executed a total of 100 * 100 = 10,000 times. Statement \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n\n7. If-Else Condition: always executed. Since i < 50 is true for the first 50 iterations of the outer loop, the if condition is satisfied and the loop block will execute. Statement \"if(i < 50) {\" is covered.\n\n8. Grid Assignment: always executed. The grid[i][j] value will be assigned \"*\" for the first 50 rows and \".\" for the remaining rows. The assignment statements \"grid[i][j] = \"*\";\" and \"grid[i][j] = \".\";\" are covered.\n\n9. Decrement Variable a: always executed. Statement \"a--;\" is covered.\n\n10. Second Nested For Loop: always executed. The outer loop will iterate 50 times and the inner loop will iterate 100 times. The loop block will be executed a total of 50 * 100 = 5,000 times. Statement \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n\n11. If Condition and Grid Assignment: executed based on the value of variable a. The if condition \"(i % 2 == 0) && (j % 2 == 0)\" will be true for some iterations of the loop. If a is not equal to 0, the if condition is satisfied and the grid[i][j] value will be assigned \".\" and a will be decremented by 1. The assignment statement \"grid[i][j] = \".\";\" and \"a--;\" are covered.\n\n12. Decrement Variable b: always executed. Statement \"b--;\" is covered.\n\n13. Third Nested For Loop: always executed. The outer loop will iterate 50 times and the inner loop will iterate 100 times. The loop block will be executed a total of 50 * 100 = 5,000 times. Statement \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n\n14. If Condition and Grid Assignment: executed based on the value of variable b. The if condition \"(i % 2 == 1) && (j % 2 == 0)\" will be true for some iterations of the loop. If b is not equal to 0, the if condition is satisfied and the grid[i][j] value will be assigned \"*\" and b will be decremented by 1. The assignment statement \"grid[i][j] = \"*\";\" and \"b--;\" are covered.\n\n15. Fourth Nested For Loop: always executed. The outer loop will iterate 100 times and the inner loop will iterate 100 times. The loop block will be executed a total of 100 * 100 = 10,000 times. Statement \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n\n16. Print Grid Elements: always executed. The grid[i][j] values will be printed for each iteration of the loop. The print statement \"System.out.print(grid[i][j]);\" is covered.\n\n17. Print New Line: always executed. The new line character will be printed after each row of the grid. The print statement \"System.out.println();\" is covered.\n\n18. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\nabc",
      "test_mutations": [
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n0",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n1",
        "Test Case Input:\n2\n1\nabc"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\" and \"System.out.println(100 + \" \" + 100);\" are covered.\n5. Grid Initialization : always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n6. Nested For loops 1 : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n7. If - Else condition 1 : Since i is less than 50 for all iterations of the outer loop, the if condition 'i < 50' is always satisfied. Statement \"if(i < 50) {\" is covered.\n8. Grid assignment 1 : always executed. Statement \"grid[i][j] = \"*\";\" is covered.\n9. Nested For loops 2 : always executed. Statements \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n10. If - Else condition 2 : Since a is not equal to 0, the if condition 'a == 0' is not satisfied. Statement \"if(a == 0) break;\" is covered.\n11. If condition 3 : Since i is always an even number, the if condition '(i % 2 == 0) && (j % 2 == 0)' is always satisfied. Statement \"if((i % 2 == 0) && (j % 2 == 0)) {\" is covered.\n12. Grid assignment 2 : always executed. Statement \"grid[i][j] = \".\";\" is covered.\n13. Decrement of a : always executed. Statement \"a--;\" is covered.\n14. Nested For loops 3 : always executed. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n15. If - Else condition 4 : Since b is not equal to 0, the if condition 'b == 0' is not satisfied. Statement \"if(b == 0) break;\" is covered.\n16. If condition 5 : Since i is always an odd number, the if condition '(i % 2 == 1) && (j % 2 == 0)' is always satisfied. Statement \"if((i % 2 == 1) && (j % 2 == 0)) {\" is covered.\n17. Grid assignment 3 : always executed. Statement \"grid[i][j] = \"*\";\" is covered.\n18. Decrement of b : always executed. Statement \"b--;\" is covered.\n19. Nested For loops 4 : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n20. Print Grid : always executed. Statements \"System.out.print(grid[i][j]);\" and \"System.out.println();\" are covered.\n21. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\nabc",
      "test_mutations": [
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n\"2\n1\nabc\""
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\", and \"System.out.println(100 + \" \" + 100);\" are covered.\n5. Initialization of grid array : always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n6. First nested for loop : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n7. If - Else condition inside first nested for loop : Since i is always less than 50, the if condition 'i < 50' is always true. Statement \"if(i < 50) {\" is covered. The else block is not executed. \n8. Assignment inside first nested for loop : always executed. Statement \"grid[i][j] = \"*\";\" is covered.\n9. Decrement of a and b : always executed. Statements \"a--;\" and \"b--;\" are covered.\n10. Second nested for loop : always executed. Statements \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n11. If condition inside second nested for loop : Since a is not equal to 0, the if condition 'a == 0' is always false. The if block is not executed. \n12. If condition inside second nested for loop : Since both i and j are always even, the if condition '(i % 2 == 0) && (j % 2 == 0)' is always true. The if block is executed. \n13. Assignment and decrement inside second nested for loop : always executed. Statements \"grid[i][j] = \".\";\" and \"a--;\" are covered.\n14. Third nested for loop : always executed. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n15. If condition inside third nested for loop : Since b is not equal to 0, the if condition 'b == 0' is always false. The if block is not executed. \n16. If condition inside third nested for loop : Since i is odd and j is even, the if condition '(i % 2 == 1) && (j % 2 == 0)' is always true. The if block is executed. \n17. Assignment and decrement inside third nested for loop : always executed. Statements \"grid[i][j] = \"*\";\" and \"b--;\" are covered.\n18. Fourth nested for loop : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n19. Print statement inside fourth nested for loop : always executed. Statement \"System.out.print(grid[i][j]);\" is covered.\n20. Print statement outside fourth nested for loop : always executed. Statement \"System.out.println();\" is covered.\n21. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\nabc",
      "test_mutations": [
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\n-1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.Scanner;\" will be covered.\n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration : always executed. Statement \"public static void main(String[] args) {\" is covered.\n\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\" are covered.\n\n5. Printing statements : always executed. Statement \"System.out.println(100 + \" \" + 100);\" is covered.\n\n6. 2D grid creation and initialization : always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n\n7. Outer for loop execution : Since the value of n is 2, the outer for loop condition (i < 100) is true, and the loop block will be executed. Statement \"for(int i = 0; i < 100; i++) {\" is covered.\n\n8. Inner for loop execution : Since the value of n is 2, the inner for loop condition (j < 100) is true, and the loop block will be executed. Statement \"for(int j = 0; j < 100; j++) {\" is covered.\n\n9. If condition : Since i is less than 50, the if condition (i < 50) is true, and the if block will be executed. Statement \"if(i < 50) {\" is covered.\n\n10. Grid initialization : always executed inside the if block. Statements \"grid[i][j] = \"*\";\" and \"grid[i][j] = \".\";\" are covered.\n\n11. Outer for loop update : always executed. Statement \"a--;\" is covered.\n\n12. Inner for loop execution : Since the value of a is not 0, the inner for loop condition (a == 0) is false, and the loop block will be executed. Statement \"for(int j = 0; j < 100; j++) {\" is covered.\n\n13. Inner if condition : Since both i and j are even, the if condition ((i % 2 == 0) && (j % 2 == 0)) is true, and the if block will be executed. Statement \"if((i % 2 == 0) && (j % 2 == 0)) {\" is covered.\n\n14. Grid update : always executed inside the if block. Statement \"grid[i][j] = \".\";\" is covered.\n\n15. Outer for loop update : always executed. Statement \"a--;\" is covered.\n\n16. Outer for loop execution : Since the value of a is 0, the outer for loop condition (a == 0) is true, and the loop block will not be executed. Statement \"for(int i = 0; i < 50; i++) {\" is covered.\n\n17. Outer for loop execution : Since the value of b is 2, the outer for loop condition (b == 0) is false, and the loop block will be executed. Statement \"for(int i = 99; i > 50; i--) {\" is covered.\n\n18. Inner for loop execution : Since the value of b is 2, the inner for loop condition (j < 100) is true, and the loop block will be executed. Statement \"for(int j = 0; j < 100; j++) {\" is covered.\n\n19. If condition : Since both i and j satisfy the conditions, the if condition ((i % 2 == 1) && (j % 2 == 0)) is true, and the if block will be executed. Statement \"if((i % 2 == 1) && (j % 2 == 0)) {\" is covered.\n\n20. Grid update : always executed inside the if block. Statement \"grid[i][j] = \"*\";\" is covered.\n\n21. Outer for loop update : always executed. Statement \"b--;\" is covered.\n\n22. Outer for loop execution : Since the value of b is 0, the outer for loop condition (b == 0) is true, and the loop block will not be executed. Statement \"for(int i = 99; i > 50; i--) {\" is covered.\n\n23. Outer for loop execution : Since the value of b is 0, the outer for loop condition (b == 0) is true, and the loop block will not be executed. Statement \"for(int i = 99; i > 50; i--) {\" is covered.\n\n24. Grid printing : always executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n\n25. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\nabc",
      "test_mutations": [
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n3\n2\nabc",
        "Test Case Input:\n0\n0\n0",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n-1\n1\n1",
        "Test Case Input:\n1\n1\n1",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered.\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered.\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\", \"System.out.println(100 + \" \" + 100);\" are covered.\n5. Array Initialization : always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n6. Nested for loop Execution - Outer loop : Since the value of i is always less than 100, the outer loop will be executed. Statement \"for(int i = 0; i < 100; i++) {\" will be covered.\n7. Nested for loop Execution - Inner loop : Since the value of j is always less than 100, the inner loop will be executed. Statement \"for(int j = 0; j < 100; j++) {\" will be covered.\n8. If condition : Since i is always less than 50, the if condition 'i < 50' is always satisfied. Statement \"if(i < 50) {\" will be covered.\n9. Assigning values to the array : Since the if condition is satisfied, the statement \"grid[i][j] = \"*\";\" will be executed for each iteration of the inner loop.\n10. Nested for loop Execution - Outer loop (second loop) : Since the value of i is always less than 50, the outer loop will be executed. Statement \"for(int i = 0; i < 50; i++) {\" will be covered.\n11. Nested for loop Execution - Inner loop (second loop) : Since the value of j is always less than 100, the inner loop will be executed. Statement \"for(int j = 0; j < 100; j++) {\" will be covered.\n12. If condition (second if condition) : Since a is not equal to 0, the if condition 'a == 0' is not satisfied. Statement \"if(a == 0) break;\" is covered.\n13. If condition (nested if condition) : Since both i and j are always even, the nested if condition '(i % 2 == 0) && (j % 2 == 0)' is always satisfied. Statement \"if((i % 2 == 0) && (j % 2 == 0)) {\" will be covered.\n14. Assigning values to the array (second assignment) : Since the if condition is satisfied, the statement \"grid[i][j] = \".\";\" will be executed for each iteration of the inner loop.\n15. Decrementing a : Since the if condition is satisfied, the statement \"a--;\" will be executed for each iteration of the inner loop.\n16. Nested for loop Execution - Outer loop (third loop) : Since the value of i is always greater than 50, the outer loop will be executed. Statement \"for(int i = 99; i > 50; i--) {\" will be covered.\n17. Nested for loop Execution - Inner loop (third loop) : Since the value of j is always less than 100, the inner loop will be executed. Statement \"for(int j = 0; j < 100; j++) {\" will be covered.\n18. If condition (third if condition) : Since b is not equal to 0, the if condition 'b == 0' is not satisfied. Statement \"if(b == 0) break;\" is covered.\n19. If condition (nested if condition - second nested if condition) : Since both i and j are always odd, the nested if condition '(i % 2 == 1) && (j % 2 == 0)' is always satisfied. Statement \"if((i % 2 == 1) && (j % 2 == 0)) {\" will be covered.\n20. Assigning values to the array (third assignment) : Since the if condition is satisfied, the statement \"grid[i][j] = \"*\";\" will be executed for each iteration of the inner loop.\n21. Decrementing b : Since the if condition is satisfied, the statement \"b--;\" will be executed for each iteration of the inner loop.\n22. Nested for loop Execution - Outer loop (fourth loop) : Since the value of i is always less than 100, the outer loop will be executed. Statement \"for(int i = 0; i < 100; i++) {\" will be covered.\n23. Nested for loop Execution - Inner loop (fourth loop) : Since the value of j is always less than 100, the inner loop will be executed. Statement \"for(int j = 0; j < 100; j++) {\" will be covered.\n24. Printing the array elements : Since the loops have covered all the elements of the array, the statement \"System.out.print(grid[i][j]);\" will be executed for each iteration of the nested loops.\n25. Printing a new line : Since the outer loop is executed for each iteration of the inner loop, the statement \"System.out.println();\" will be executed for each iteration of the outer loop.\n26. Closing Brackets : always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\n-1",
      "test_mutations": [
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n2\n1\nabc",
        "Test Case Input:\n-1\n1\n1",
        "Test Case Input:\n3\n1\nabc",
        "Test Case Input:\n3\n2\n-1",
        "Test Case Input:\n2\n1\n-1"
      ],
      "initial_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n1. Import statements : Import statements are always executed. Statement \"import java.util.*;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Scanner sc = new Scanner(System.in);\", \"int n = sc.nextInt();\", \"int a = sc.nextInt();\", \"int b = sc.nextInt();\" and \"System.out.println(100 + \" \" + 100);\" are covered. \n5. 2D array grid initialization : always executed. Statement \"String[][] grid = new String[100][100];\" is covered.\n6. First nested for loop : always executed. Both for loops will be executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered. \n7. If condition inside first nested loop : always executed. If condition \"if(i < 50) {\" is covered. \n8. Assignment statement inside if condition : always executed. Statement \"grid[i][j] = \"*\";\" is covered.\n9. Else condition inside first nested loop : always executed. If condition isn't satisfied so else condition \"grid[i][j] = \".\";\" is covered.\n10. Decrementing a and b variables : always executed. Statements \"a--;\" and \"b--;\" are covered.\n11. Second nested for loop : always executed. Both for loops will be executed. Statements \"for(int i = 0; i < 50; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n12. If condition inside second nested loop : always executed. If condition \"if(a == 0) break;\" is covered.\n13. Nested if condition inside second nested loop : always executed. If condition \"(i % 2 == 0) && (j % 2 == 0)\" is covered.\n14. Assignment statement inside nested if condition : always executed. Statement \"grid[i][j] = \".\";\" is covered.\n15. Decrementing a variable inside nested if condition : always executed. Statement \"a--;\" is covered.\n16. Third nested for loop : always executed. Both for loops will be executed. Statements \"for(int i = 99; i > 50; i--) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n17. If condition inside third nested loop : always executed. If condition \"if(b == 0) break;\" is covered.\n18. Nested if condition inside third nested loop : always executed. If condition \"(i % 2 == 1) && (j % 2 == 0)\" is covered.\n19. Assignment statement inside nested if condition : always executed. Statement \"grid[i][j] = \"*\";\" is covered.\n20. Decrementing b variable inside nested if condition : always executed. Statement \"b--;\" is covered.\n21. Fourth nested for loop : always executed. Both for loops will be executed. Statements \"for(int i = 0; i < 100; i++) {\" and \"for(int j = 0; j < 100; j++) {\" are covered.\n22. Printing grid elements : always executed. Statement \"System.out.print(grid[i][j]);\" is covered.\n23. Printing new line after each row : always executed. Statement \"System.out.println();\" is covered.\n24. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.util.*;\n> public class Main {\n>   public static void main(String[] args) {\n>     Scanner sc = new Scanner(System.in);\n>     int n = sc.nextInt();\n>     int a = sc.nextInt();\n>     int b = sc.nextInt();\n>     System.out.println(100 + \" \" + 100);\n>     String[][] grid = new String[100][100];\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(i < 50) {\n>           grid[i][j] = \"*\";\n>         } else {\n>           grid[i][j] = \".\";\n>         }\n>       }\n>     }\n>     a--;\n>     b--;\n>     for(int i = 0; i < 50; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         if(a == 0) break;\n>         if((i % 2 == 0) && (j % 2 == 0)) {\n>           grid[i][j] = \".\";\n>           a--;\n>         }\n>       }\n>     }\n>     for(int i = 99; i > 50; i--) {\n>       for(int j = 0; j < 100; j++) {\n>         if(b == 0) break;\n>         if((i % 2 == 1) && (j % 2 == 0)) {\n>           grid[i][j] = \"*\";\n>           b--;\n>         }\n>       }\n>     }\n>     for(int i = 0; i < 100; i++) {\n>       for(int j = 0; j < 100; j++) {\n>         System.out.print(grid[i][j]);\n>       }\n>       System.out.println();\n>     }\n>   }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}