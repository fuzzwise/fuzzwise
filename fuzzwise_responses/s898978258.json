{
  "submission_id": "s898978258",
  "cycles": [
    {
      "test_case": "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n4\n3\n1\n2\n3\n4",
        "Test Case Input:\n5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n5\n3\n1\n2\n3\n-4\n-5",
        "Test Case Input:\n5\n3\n1\n2\n3\n4\n5",
        "Test Case Input:\n3\n2\n1\n-2\n3",
        "Test Case Input:\n5\n3\n1\n-2\n3\n-4\n0",
        "Test Case Input:\n5\n3\n1\n-2\n3\n-4\n0",
        "Test Case Input:\n5\n3\n-2\n-5\n0\n3\n4",
        "Test Case Input:\n3\n2\n1\n2\n3",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\", will be covered. \n\n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n\n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. solve method decalarion : always executed. Statement \"void solve() throws IOException {\" is covered.\n\n5. User Input and Program Output : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered. \n\n6. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered. \n\n7. For loop Execution : Since n is 5, the for loop condition (i<n) is true, and the loop block will be executed. Statement \"for(int i=0;i<n;i++){\" will be covered. \n\n8. For loop contents : user input statements are always executed. Statement \"long a = sc.nextLong();\" will be executed. \n\n9. If - Else condition : Since a is positive, the if condition 'a>0' is true. Statement \"if(a>0) positive.add(a);\" will be covered. \n\n10. else if condition : Since a is not zero, the else if condition 'a==0' is false. Statement \"else if(a==0) zeros += 1;\" is not covered. \n\n11. else condition : Since a is not negative, the else condition is not satisfied. Statement \"else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\" is not covered. \n\n12. Collections Sort : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered. \n\n13. lo and hi Initialization : always executed. Statements \"long lo = -maxi;\", \"long hi = maxi+1;\" are covered. \n\n14. While loop Execution : Since hi-lo is greater than 1, the while loop condition (hi-lo>1) is true, and the loop block will be executed. Statement \"while(hi-lo>1){\" will be covered. \n\n15. While loop contents : the if condition 'legal(mid)' is true. Statement \"if(legal(mid)) lo = mid;\" is covered. \n\n16. helperPosList method call : always executed. Statements \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\" are covered. \n\n17. if condition : Since guess is positive, the if condition 'guess>0' is true. Statement \"if(guess>0){\" is covered. \n\n18. helperPosList method call : always executed. Statements \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\" are covered. \n\n19. if condition : Since ans is greater than or equal to k, the if condition 'ans>=k' is true. Statement \"if(ans>=k) return true;\" is covered. \n\n20. if condition : Since guess is less than or equal to 0, the if condition 'guess<=0' is true. Statement \"if(guess<=0){\" is covered. \n\n21. helperPosList method call : always executed. Statements \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\" are covered. \n\n22. if condition : Since ans is greater than or equal to k, the if condition 'ans>=k' is true. Statement \"if(ans>=k) return true;\" is covered. \n\n23. if condition : Since guess is less than 0, the if condition 'guess < 0' is true. Statement \"if(guess < 0){\" is covered. \n\n24. for loop execution : always executed. Statement \"for(int i=0;i<lenPos;i++){\" is covered. \n\n25. while loop execution : always executed. Statement \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\" is covered. \n\n26. ans calculation : always executed. Statement \"ans += lenNeg-right;\" is covered. \n\n27. return statement : always executed. Statement \"return ans >= k;\" is covered. \n\n28. System.out.println statement : always executed. Statement \"System.out.println(lo);\" is covered. \n\n29. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n1\n-1\n0\n\nTest Case Input:\n4\n2\n-10\n5\n0\n2\n\nTest Case Input:\n3\n0\n-2\n1\n3",
      "test_mutations": [
        "Test Case Input:\n\"abc\"\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n0\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n\"5\" \n\"3\" \n\"-2\" \n\"1\" \n\"0\" \n\"-3\" \n\"4\"",
        "Test Case Input:\n-5\n0\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n1\n2\n-1\n3\n4\n5\n6",
        "Test Case Input:\n5\n0\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n\"abc\"\n5\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n\"5\" \n\"3\" \n\"-2\" \n\"1\" \n\"0\" \n\"-3\" \n\"4\"",
        "Test Case Input:\n5\n0\n1\n2\n3\n4\n-5\n-6\n-7\n8\n9\n\nTest Case Output:\n4",
        "Test Case Input:\n2\n1\n-1\n0\n\nTest Case Input:\n4\n2\n-10\n5\n0\n2\n\nTest Case Input:\n3\n0\n-2\n1\n3"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. Create an instance of Main class and call solve method: always executed. Statement \"Main main = new Main();\", \"main.solve();\" are covered.\n\n5. Read inputs n and k from user: always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered.\n\n6. Calculate the value of k: always executed. Statement \"k = n*(n-1)/2+1-k;\" is covered.\n\n7. Create ArrayLists positive, negative and minus_nega: always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n\n8. Initialize the variable maxi: always executed. Statement \"long maxi = Long.MIN_VALUE;\" is covered.\n\n9. Loop n times and perform the following operations inside the loop:\n    a. Read input a from user: always executed. Statement \"long a = sc.nextLong();\" is covered.\n    b. Update maxi if necessary: always executed. Statement \"maxi = Math.max(maxi,a*a);\" is covered.\n    c. Add a to the appropriate ArrayList: always executed. Statements \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a); }\" are covered.\n\n10. Sort the ArrayLists positive, negative and minus_nega: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n11. Calculate the range for binary search: always executed. Statements \"long lo = -maxi;\", \"long hi = maxi+1;\" are covered.\n\n12. Perform binary search to find the answer: always executed. Statements \"while(hi-lo>1){\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\" are covered.\n\n13. Print the answer: always executed. Statement \"System.out.println(lo);\" is covered.\n\n14. Define the helperPosList method: always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered.\n\n15. Calculate the value of ans: always executed. Statements \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\" are covered.\n\n16. Define the legal method: always executed. Statement \"boolean legal(long guess) {\" is covered.\n\n17. Calculate the value of ans: always executed. Statements \"long ans = 0;\", \"if(guess>0){\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\", \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\" are covered.\n\n18. Calculate the value of ans when guess < 0: always executed. Statements \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\", \"}\" are covered.\n\n19. Return the final result: always executed. Statement \"return ans >= k;\" is covered.\n\n20. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> \n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n> \n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n> \n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n> \n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n> \n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n2\n1\n-1\n0",
        "Test Case Input:\n-5\n2\n3\n0\n-2\n1\n0\n4",
        "Test Case Input:\n-5\n2\n3\n-1\n0\n4\n-2\n5",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-1\n2\n0\n1\n4\n-5\n3",
        "Test Case Input:\n1\n1\n-1",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and tets case:\n1. Import statements : Import statements are always executed. All import statements will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. Main method call : always executed. Statement \"Main main = new Main(); main.solve();\" is covered. \n5. solve method declaration and execution : always executed. Statement \"void solve() throws IOException {\" is covered. \n6. User input statements : always executed. Statements \"n = sc.nextInt();\" and \"k = sc.nextInt();\" are covered. \n7. Calculation of k : always executed. Statement \"k = n*(n-1)/2+1-k;\" is covered. \n8. ArrayList initialization : always executed. Statements \"positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\" are covered. \n9. Loop for user input and ArrayList population : always executed. Statement \"for(int i=0;i<n;i++){\" is covered. \n10. Maxi Calculation : always executed. Statement \"maxi = Math.max(maxi,a*a);\" is covered. \n11. If-Else conditions for ArrayList population : always executed. Statements \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a); }\" are covered. \n12. ArrayList Sorting : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered. \n13. Calculation of lo and hi : always executed. Statements \"long lo = -maxi, hi = maxi+1;\" and \"while(hi-lo>1){\" are covered. \n14. While loop contents : The while loop will continue until the condition is true. The statements inside the loop will be executed based on the condition. \n15. legal method call : always executed. Statement \"if(legal(mid)) lo = mid; else hi = mid;\" is covered. \n16. legal method declaration and execution : always executed. Statement \"boolean legal(long guess){\" is covered. \n17. If-Else conditions in legal method : The if-else conditions will be executed based on the condition. Statements \"if(guess>0){\", \"if(guess<=0){\", \"if(guess < 0){\" are covered. \n18. helperPosList method call : always executed. Statement \"ans += helperPosList(positive,guess);\" is covered. \n19. helperPosList method declaration and execution : always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower){\" is covered. \n20. helperPosList method contents : always executed. Statements \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\" are covered. \n21. return statement in legal method : always executed. Statement \"return ans >= k;\" is covered. \n22. System.out.println statement in main method : always executed. Statement \"System.out.println(lo);\" is covered. \n23. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n-1\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-2\n3\n4\n-1\n0\n2\n-5\n\nTest Case Input:\n10\n0\n-3\n5\n1\n-2\n4\n-2\n3\n9\n-1\n7\n\nTest Case Input:\n6\n1\n-4\n2\n0\n-1\n3\n\nTest Case Input:\n8\n-5\n-3\n1\n0\n-2\n4\n-1\n2\n\nTest Case Input:\n3\n2\n4\n-3\n\nTest Case Input:\n7\n0\n-1\n-2\n3\n5\n-4\n2",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-3\n2\n4\n-5\n0\n-2\n1",
        "Test Case Input:\n0\n0\n0\n0\n0\n0\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. NumberDivision Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n4. User Input and Program Output: always executed. Statements \"Main main = new Main();\", \"main.solve();\" are covered.\n\n5. solve method declaration: always executed. Statement \"void solve() throws IOException {\" is covered.\n\n6. User input statements: always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\" are covered.\n\n7. Calculation of k: always executed. Statement \"k = n*(n-1)/2+1-k;\" is covered.\n\n8. ArrayList initialization: always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n\n9. For loop execution: Since n is -5, the for loop condition (i<n) is false, and the loop block will not be executed. Statement \"for(int i=0;i<n;i++){\" is not covered.\n\n10. Calculation of maxi: always executed. Statement \"maxi = Math.max(maxi,a*a);\" is covered.\n\n11. If-else conditions: always executed. Statements \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a); }\" are covered.\n\n12. ArrayList Sorting: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n13. Calculation of lo and hi: always executed. Statements \"long lo = -maxi, hi = maxi+1;\" are covered.\n\n14. While loop execution: always executed. Statement \"while(hi-lo>1) {\" is covered.\n\n15. legal method execution: always executed. Statement \"if(legal(mid)) lo = mid;\" is covered.\n\n16. System.out.println statement: always executed. Statement \"System.out.println(lo);\" is covered.\n\n17. legal method definition and execution: always executed. Statement \"boolean legal(long guess) {\" is covered.\n\n18. Calculation of ans: always executed. Statements \"long ans = 0;\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\" are covered.\n\n19. if-else conditions: executed based on the value of guess. Statements \"if(ans>=k) return true;\", \"if(ans>=k) return true;\", \"if(ans>=k) return true;\" are covered.\n\n20. Calculation of ans in guess < 0 condition: executed based on the value of lenNeg and lenPos. Statements \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0) {\" are covered.\n\n21. For loop execution: executed based on the value of lenPos. Statement \"for(int i=0;i<lenPos;i++) {\" is covered.\n\n22. Calculation of ans in for loop: executed based on the value of cur and guess. Statements \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\" are covered.\n\n23. Calculation of helperPosList: always executed. Statements \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered.\n\n24. Calculation of ans in helperPosList: always executed. Statements \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--) {\" are covered.\n\n25. Closing Brackets: always executed. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is :\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-10\n3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n5\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n0\n2\n-1\n3\n-2\n1",
        "Test Case Input:\n-2\n0\n1\n3\n-1\n2\n-4",
        "Test Case Input:\n-10\n3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and tets case-\n1. Import statements : Import statements are always executed. Statements \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. User Input and Program Output : always executed. Statements \"Main main = new Main();\", \"main.solve();\" are covered. \n5. solve method Declaration and Execution : method declaration is always executed. \"void solve() throws IOException {\" is covered. Statement \"n = sc.nextInt();\" is covered. \n6. ArrayList Initialization : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered. \n7. Loop over n : always executed. Statement \"for(int i=0;i<n;i++) {\" is covered. \n8. User Input inside Loop : always executed. Statement \"long a = sc.nextLong();\" is covered. \n9. Checking value of a : always executed. Statements \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else { negative.add(a); minus_nega.add(-a); }\" are covered. \n10. Sorting ArrayLists : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered. \n11. Initializing lo and hi : always executed. Statements \"long lo = -maxi, hi = maxi+1;\" are covered. \n12. Binary Search : always executed. Statement \"while(hi-lo>1) {\" is covered. \n13. Binary Search condition : always executed. Statement \"long mid = (hi+lo)/2;\" is covered. \n14. Binary Search check : always executed. Statement \"if(legal(mid)) lo = mid;\" is covered. \n15. Binary Search else check : always executed. Statement \"else hi = mid;\" is covered. \n16. Printing lo : always executed. Statement \"System.out.println(lo);\" is covered.\n17. legal method Declaration and Execution : method declaration is always executed. \"boolean legal(long guess) {\" is covered. \n18. legal method checks : always executed. Statements \"long ans = 0;\", \"if(guess>0) { ans += helperPosList(positive,guess); ans += helperPosList(minus_nega,guess); if(ans>=k) return true; }\", \"if(guess<=0) { ans += zeros*(n-zeros); ans += positive.size()*(positive.size()-1)/2; ans += negative.size()*(negative.size()-1)/2; if(ans>=k) return true; }\", \"if(guess < 0) { int lenPos = positive.size(), lenNeg = negative.size(); if(lenNeg*lenPos>0) { int right = 0; for(int i=0;i<lenPos;i++) { long cur = positive.get(i); while(right<lenNeg&&cur*negative.get(right)<guess) right++; ans += lenNeg-right; } } }\" are covered.\n19. helperPosList method Declaration and Execution : method declaration is always executed. \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered. \n20. helperPosList method checks : always executed. Statements \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--) { long cur = pos.get(right); while(left<len&&pos.get(left)*cur<lower) left++; if(left!=len) { if(left<=right) ans += len-left-1; else ans += len-left; } }\", \"ans /= 2; return ans;\" are covered.\n21. Closing Brackets : always covered. \nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n2\n-1\n0",
      "test_mutations": [
        "Test Case Input:\n-2\n3\n-1\n0\n2\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-1\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n2\n0\n-1\n0",
        "Test Case Input:\n5\n0\n2\n3\n-1\n4\n\nTest Case Input:\n3\n-2\n5\n1\n\nTest Case Input:\n-4\n-2\n0\n3\n1\n\nTest Case Input:\n2\n-1\n0\n\nTest Case Input:\n6\n3\n-1\n0\n4\n2\n-3\n\nTest Case Input:\n0\n1\n2\n3\n4\n5\n\nTest Case Input:\n-3\n5\n0\n-1\n4\n2\n3",
        "Test Case Input:\n-3\n0\n2\n1\n3",
        "Test Case Input:\n2\n-1\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements : Import statements are always executed. Statement \"import java.io.BufferedReader;\" will be covered. \n2. Main Class Declaration : always executed. Statement \"public class Main {\" is covered. \n3. Main method decalarion : always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. solve method declaration and execution : always executed. Statement \"void solve() throws IOException {\" is covered. \n5. User Input and Program Output : always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered. \n6. ArrayList declarations : always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered. \n7. For loop Execution : Since n is 2, the for loop condition (i < n) is true, and the loop block will be executed. Statement \"for (int i = 0; i < n; i++) {\" will be covered. \n8. For loop contents : user input statements are always executed. Statement \"long a = sc.nextLong();\" will be executed. \n9. If - Else condition : Since a is negative, the else condition is satisfied. Statements \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\" are covered. \n10. ArrayList sorting : always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered. \n11. While loop : always executed. Statement \"while(hi-lo>1) {\" is covered. \n12. While loop contents : always executed. Statements \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\" are covered. \n13. System.out.println statement : always executed. Statement \"System.out.println(lo);\" is covered. \n14. Closing Brackets : always covered. \n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is : \n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0",
      "test_mutations": [
        "Test Case Input:\n0\n0",
        "Test Case Input:\na\n2",
        "Test Case Input:\n\"hello\"\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n3\n-2\n1\n0\n-3\n\nTest Case Input:\n4\n2\n-10\n5\n0\n2\n\nTest Case Input:\n-5\n3\n-2\n1\n0\n-3\n4\n\nTest Case Input:\n2\n-1\n0\n\nTest Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. All import statements are covered.\n2. Main class declaration: always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. solve method declaration: always executed. Statement \"void solve() throws IOException {\" is covered.\n5. User input and variable assignment: always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", and \"k = n*(n-1)/2+1-k;\" are covered.\n6. ArrayList variable initialization: always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", and \"minus_nega = new ArrayList<>();\" are covered.\n7. Loop for input and variable assignment: The loop will execute n times. Statements inside the loop will be covered n times.\n8. Variable assignment and calculations: always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", and the if-else conditions are covered.\n9. ArrayList sorting: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", and \"Collections.sort(minus_nega);\" are covered.\n10. While loop execution: The while loop will execute until the condition (hi-lo>1) is false. The statements inside the while loop will be covered multiple times.\n11. Helper method calls: always executed. Statements \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", and \"ans += lenNeg-right;\" are covered.\n12. Return statement: always executed. Statement \"return ans >= k;\" is covered.\n13. Print statement: always executed. Statement \"System.out.println(lo);\" is covered.\n14. Closing brackets: always executed. All closing brackets are covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0",
      "test_mutations": [
        "Test Case Input:\n-3\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10",
        "Test Case Input:\n5\n-2\n-5\n3\n1\n0\n-3\n4",
        "Test Case Input:\n-2\n3\n-4\n1\n0\n5\n-3",
        "Test Case Input:\n5\n2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n-2\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n5\n0\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-1\n1",
        "Test Case Input:\n-10\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.util.*;\", \"public class Main {\" will be covered.\n\n2. Main method declaration: always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n\n3. Class Variables initialization: always executed. Statements \"static PrintWriter out = new PrintWriter(System.out);\", \"static Scanner sc = new Scanner(System.in);\", \"static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\", \"ArrayList<Long> positive, negative, minus_nega;\", \"long zeros = 0, k = 0, n = 0;\" are covered.\n\n4. solve() method call: always executed. Statement \"Main main = new Main();\", \"main.solve();\" are covered.\n\n5. solve() method declaration and execution: always executed. Statement \"void solve() throws IOException {\" is covered. \n\n6. User Input and Variable Initialization: always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered.\n\n7. ArrayList Initialization: always executed. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n\n8. Loop Execution: always executed. Statements \"for(int i=0;i<n;i++) {\" and its body will be covered.\n\n9. Inside Loop Execution: always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\" are covered.\n\n10. if-else condition: always executed. All if-else conditions and their corresponding statements are covered.\n\n11. ArrayList Sorting: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n\n12. While loop execution: always executed. Statement \"while(hi-lo>1) {\" is covered.\n\n13. Inside While loop execution: always executed. Statements \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\" are covered.\n\n14. System.out.println statement: always executed. Statement \"System.out.println(lo);\" is covered.\n\n15. legal() method declaration and execution: always executed. Statement \"boolean legal(long guess) {\" is covered.\n\n16. legal() method logic execution: always executed. All statements inside the legal() method are covered.\n\n17. helperPosList() method declaration and execution: always executed. Statement \"long helperPosList(ArrayList<Long> pos, long lower) {\" is covered.\n\n18. helperPosList() method logic execution: always executed. All statements inside the helperPosList() method are covered.\n\n19. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-1\n2\n0\n0\n0\n0\n-1\n-2\n-3\n-4\n-5",
        "Test Case Input:\n5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\na\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n3\n2\n-5\n0\n3",
        "Test Case Input:\n5\n5\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN for step by step execution of the given Java program and test case:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", and \"import java.util.*;\" will be covered.\n\n2. Main class declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. PrintWriter, Scanner, and BufferedReader objects creation: always executed, Statement \"static PrintWriter out = new PrintWriter(System.out);\", \"static Scanner sc = new Scanner(System.in);\", and \"static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\" will be covered.\n\n4. ArrayList and variable initialization: always executed. Statements \"ArrayList<Long> positive, negative, minus_nega;\", \"long zeros = 0, k = 0, n = 0;\" will be covered.\n\n5. Main method declaration and solve method call: always executed. Statements \"public static void main(String[] args) throws IOException {\", \"Main main = new Main();\", \"main.solve();\", and \"}\" will be covered.\n\n6. solve method declaration and variable initialization: always executed. Statements \"void solve() throws IOException {\", \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\", \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\" will be covered.\n\n7. For loop execution: Since n is -5, the for loop condition (i < n) is false, and the loop block will not be executed. Statement \"for(int i=0;i<n;i++){\" will not be covered.\n\n8. User input statements: always executed. Statements \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\" will be covered.\n\n9. Collections sorting: always executed. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" will be covered.\n\n10. Variable assignment and calculation: always executed. Statements \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1){\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\" will be covered.\n\n11. System.out.println statement: always executed. Statement \"System.out.println(lo);\" will be covered.\n\n12. legal method declaration and execution: always executed. Statements \"boolean legal(long guess){\", \"long ans = 0;\", \"if(guess>0){\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\", \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\", \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\", \"}\", \"return ans >= k;\", \"}\" will be covered.\n\n13. helperPosList method declaration and execution: always executed. Statements \"long helperPosList(ArrayList<Long> pos, long lower){\", \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\", \"}\" will be covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> \n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n> \n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n> \n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n * (n - 1) / 2 + 1 - k;\n>         positive = new ArrayList<>();\n>         negative = new ArrayList<>();\n>         minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for (int i = 0; i < n; i++) {\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi, a * a);\n>             if (a > 0)\n>                 positive.add(a);\n>             else if (a == 0)\n>                 zeros += 1;\n>             else {\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi + 1;\n>         while (hi - lo > 1) {\n>             long mid = (hi + lo) / 2;\n>             if (legal(mid))\n>                 lo = mid;\n>             else\n>                 hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n> \n>     boolean legal(long guess) {\n>         long ans = 0;\n>         if (guess > 0) {\n>             ans += helperPosList(positive, guess);\n>             ans += helperPosList(minus_nega, guess);\n>             if (ans >= k)\n>                 return true;\n>         }\n>         if (guess <= 0) {\n>             ans += zeros * (n - zeros);\n>             ans += positive.size() * (positive.size() - 1) / 2;\n>             ans += negative.size() * (negative.size() - 1) / 2;\n>             if (ans >= k)\n>                 return true;\n>         }\n>         if (guess < 0) {\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if (lenNeg * lenPos > 0) {\n>                 int right = 0;\n>                 for (int i = 0; i < lenPos; i++) {\n>                     long cur = positive.get(i);\n>                     while (right < lenNeg && cur * negative.get(right) < guess)\n>                         right++;\n>                     ans += lenNeg - right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n> \n>     long helperPosList(ArrayList<Long> pos, long lower) {\n>         int len = pos.size(), left = 0;\n>         long ans = 0;\n>         if (len == 0 || pos.get(len - 1) * pos.get(len - 1) < lower)\n>             return 0;\n>         for (int right = len - 1; right >= 0; right--) {\n>             long cur = pos.get(right);\n>             while (left < len && pos.get(left) * cur < lower)\n>                 left++;\n>             if (left != len) {\n>                 if (left <= right)\n>                     ans += len - left - 1;\n>                 else\n>                     ans += len - left;\n>             }\n>         }\n>         ans /= 2;\n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
      "test_mutations": [
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-3\n0\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-2\n2",
        "Test Case Input:\n2\n-1\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "PLAN:\n1. Import statements: All import statements are always executed. Statements \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n2. Main class declaration: The Main class declaration is always executed. Statement \"public class Main {\" is covered.\n3. Main method declaration: The main method declaration is always executed. Statement \"public static void main(String[] args) throws IOException {\" is covered.\n4. Main method contents: The contents of the main method are always executed. Statement \"Main main = new Main();\" is covered.\n5. solve method call: The solve method call within the main method is always executed. Statement \"main.solve();\" is covered.\n6. solve method declaration: The solve method declaration is always executed. Statement \"void solve() throws IOException {\" is covered.\n7. Input and variable initialization: The statements for taking input and initializing variables are always executed. Statements \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\" are covered.\n8. ArrayList initialization: The ArrayLists positive, negative, and minus_nega are always initialized. Statements \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\" are covered.\n9. For loop execution: The for loop iterates n times, so its contents will be executed n times. Statements within the for loop \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{ negative.add(a); minus_nega.add(-a); }\" are covered n times.\n10. ArrayList sorting: The ArrayLists positive, negative, and minus_nega are sorted. Statements \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\" are covered.\n11. Calculation of lo and hi: The calculation of lo and hi is always executed. Statements \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1){\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\" are covered.\n12. legal method call: The legal method call within the while loop is always executed. Statement \"if(legal(mid)) lo = mid;\" is covered.\n13. legal method declaration: The legal method declaration is always executed. Statement \"boolean legal(long guess) {\" is covered.\n14. legal method contents: The contents of the legal method are always executed. All statements within the legal method are covered.\n15. Print statement: The print statement within the main method is always executed. Statement \"System.out.println(lo);\" is covered.\n16. Closing brackets: All closing brackets are always executed. The closing brackets of the solve method, main method, and Main class are covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k; \n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2; \n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    },
    {
      "test_case": "Test Case Input:\n0\n0",
      "test_mutations": [
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n2\n-1\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n-5\n3\n-2\n1\n0\n-3\n4",
        "Test Case Input:\n0\n0",
        "Test Case Input:\n5\n0\n0\n0\n0\n0",
        "Test Case Input:\n0\n0"
      ],
      "initial_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
      "covered_code": "The plan for step by step execution of the code snippet is as follows:\n\n1. Import statements: Import statements are always executed. Statement \"import java.io.BufferedReader;\", \"import java.io.IOException;\", \"import java.io.InputStreamReader;\", \"import java.io.PrintWriter;\", \"import java.net.CookieHandler;\", \"import java.util.*;\" will be covered.\n\n2. Main Class Declaration: always executed. Statement \"public class Main {\" is covered.\n\n3. Variable Declarations: always executed. Statements \"static PrintWriter out = new PrintWriter(System.out);\", \"static Scanner sc = new Scanner(System.in);\", \"static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\", \"ArrayList<Long> positive, negative, minus_nega;\", \"long zeros = 0, k = 0, n = 0;\" are covered.\n\n4. Main Method Declaration and Execution: always executed. Statements \"public static void main(String[] args) throws IOException {\", \"Main main = new Main();\", \"main.solve();\", \"}\" are covered.\n\n5. Solve Method Declaration and Execution: always executed. Statements \"void solve() throws IOException {\", \"n = sc.nextInt();\", \"k = sc.nextInt();\", \"k = n*(n-1)/2+1-k;\", \"positive = new ArrayList<>();\", \"negative = new ArrayList<>();\", \"minus_nega = new ArrayList<>();\", \"long maxi = Long.MIN_VALUE;\", \"for(int i=0;i<n;i++){\", \"long a = sc.nextLong();\", \"maxi = Math.max(maxi,a*a);\", \"if(a>0) positive.add(a);\", \"else if(a==0) zeros += 1;\", \"else{\", \"negative.add(a);\", \"minus_nega.add(-a);\", \"}\", \"}\", \"Collections.sort(positive);\", \"Collections.sort(negative);\", \"Collections.sort(minus_nega);\", \"long lo = -maxi, hi = maxi+1;\", \"while(hi-lo>1){\", \"long mid = (hi+lo)/2;\", \"if(legal(mid)) lo = mid;\", \"else hi = mid;\", \"}\", \"System.out.println(lo);\", \"}\" are covered.\n\n6. Legal Method Declaration and Execution: always executed. Statements \"boolean legal(long guess){\", \"long ans = 0;\", \"if(guess>0){\", \"ans += helperPosList(positive,guess);\", \"ans += helperPosList(minus_nega,guess);\", \"if(ans>=k) return true;\", \"}\", \"if(guess<=0){\", \"ans += zeros*(n-zeros);\", \"ans += positive.size()*(positive.size()-1)/2;\", \"ans += negative.size()*(negative.size()-1)/2;\", \"if(ans>=k) return true;\", \"}\", \"if(guess < 0){\", \"int lenPos = positive.size(), lenNeg = negative.size();\", \"if(lenNeg*lenPos>0){\", \"int right = 0;\", \"for(int i=0;i<lenPos;i++){\", \"long cur = positive.get(i);\", \"while(right<lenNeg&&cur*negative.get(right)<guess) right++;\", \"ans += lenNeg-right;\", \"}\", \"}\", \"}\", \"return ans >= k;\", \"}\" are covered.\n\n7. HelperPosList Method Declaration and Execution: always executed. Statements \"long helperPosList(ArrayList<Long> pos, long lower){\", \"int len = pos.size(), left=0;\", \"long ans = 0;\", \"if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\", \"for(int right=len-1;right>=0;right--){\", \"long cur = pos.get(right);\", \"while(left<len&&pos.get(left)*cur<lower) left++;\", \"if(left!=len){\", \"if(left<=right) ans += len-left-1;\", \"else ans += len-left;\", \"}\", \"}\", \"ans /= 2;\", \"return ans;\", \"}\" are covered.\n\n8. Closing Brackets: always covered.\n\nFinal code coverage of the Java program based on its test case and given step by step reasoning for execution is:\n\n> import java.io.BufferedReader;\n> import java.io.IOException;\n> import java.io.InputStreamReader;\n> import java.io.PrintWriter;\n> import java.net.CookieHandler;\n> import java.util.*;\n> public class Main {\n>     static PrintWriter out = new PrintWriter(System.out);\n>     static Scanner sc = new Scanner(System.in);\n>     static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n>     ArrayList<Long> positive, negative, minus_nega;\n>     long zeros = 0, k = 0, n = 0;\n>     public static void main(String[] args) throws IOException {\n>         Main main = new Main();\n>         main.solve();\n>     }\n>     void solve() throws IOException {\n>         n = sc.nextInt();\n>         k = sc.nextInt();\n>         k = n*(n-1)/2+1-k;\n>         positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n>         long maxi = Long.MIN_VALUE;\n>         for(int i=0;i<n;i++){\n>             long a = sc.nextLong();\n>             maxi = Math.max(maxi,a*a);\n>             if(a>0) positive.add(a);\n>             else if(a==0) zeros += 1;\n>             else{\n>                 negative.add(a);\n>                 minus_nega.add(-a);\n>             }\n>         }\n>         Collections.sort(positive);\n>         Collections.sort(negative);\n>         Collections.sort(minus_nega);\n>         long lo = -maxi, hi = maxi+1;\n>         while(hi-lo>1){\n>             long mid = (hi+lo)/2;\n>             if(legal(mid)) lo = mid;\n>             else hi = mid;\n>         }\n>         System.out.println(lo);\n>     }\n>     boolean legal(long guess){\n>         long ans = 0;\n>         if(guess>0){\n>             ans += helperPosList(positive,guess);\n>             ans += helperPosList(minus_nega,guess);\n>             if(ans>=k) return true;\n>         }\n>         if(guess<=0){\n>             ans += zeros*(n-zeros);\n>             ans += positive.size()*(positive.size()-1)/2;\n>             ans += negative.size()*(negative.size()-1)/2;\n>             if(ans>=k) return true;\n>         }\n>         if(guess < 0){\n>             int lenPos = positive.size(), lenNeg = negative.size();\n>             if(lenNeg*lenPos>0){\n>                 int right = 0;\n>                 for(int i=0;i<lenPos;i++){\n>                     long cur = positive.get(i);\n>                     while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n>                     ans += lenNeg-right;\n>                 }\n>             }\n>         }\n>         return ans >= k;\n>     }\n>     long helperPosList(ArrayList<Long> pos, long lower){\n>         int len = pos.size(), left=0;\n>         long ans = 0;\n>         if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n>         for(int right=len-1;right>=0;right--){\n>             long cur = pos.get(right);\n>             while(left<len&&pos.get(left)*cur<lower) left++;\n>             if(left!=len){\n>                 if(left<=right) ans += len-left-1;\n>                 else ans += len-left;\n>             }\n>         }\n>         ans /= 2;\n>         return ans;\n>     }\n> }",
      "test_seed_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ],
      "cumulative_coverage": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">"
      ]
    }
  ]
}