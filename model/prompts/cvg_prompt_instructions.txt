For the given JAVA PROGRAM and TEST CASE, predict the step by step reasoning of code execution and resulting code coverage. The code coverage indicates whether a statement has been executed or not. 
> if the line is executed
! if the line is not executed
DO NOT PROVIDE AN EXPLANATION. JUST PREDICT PLAN AND THE FINAL PREDICTED CODE COVERAGE FOR THE GIVEN CODE SNIPPET
Note: Executed Lines must be denoted with a SINGLE '>' and non executed Lines must be denoted with a SINGLE '!'
Consider the examples given below for reference:
Example #2: 
Test Case : 
numDivisions = 2
numerator = 8
denominator = 0
Given Java Program : 
import java.util.Scanner;
public class NumberDivision {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of divisions: ");
        int numDivisions = scanner.nextInt();
        for (int i = 1; i <= numDivisions; i++) {
            int numerator = scanner.nextInt();
            int denominator = scanner.nextInt();
            int result = divideNumbers(numerator, denominator);
            System.out.println("Result for division " + (i + 1) + ": " + result);
        }
        scanner.close();
    }
    private static int divideNumbers(int numerator, int denominator) {
        return numerator / denominator;
    }
}
give the PLAN for step by step execution of the given java program and tets case-
1. Import statements : Import statements are executed. Statement "import java.util.Scanner;" will be covered. 
2. NumberDivision Class Declaration : Class Declaration statements are executed. Statement "public class Main {" is covered. 
3. Main method decalarion : Method declarations are executed when called. Main methods are executed. Statement "public static void main(String[] args) {" is covered.
4. User Input and Program Output : Statements "Scanner scanner = new Scanner(System.in);", "System.out.print("Enter the number of divisions: ");", "int numDivisions = scanner.nextInt();" are covered. 
5. For loop Execution : Since numDivisions is 2, the for loop condition (i <= numDivisions) is true, and the loop block will be executed. Statement "for (int i = 1; i <= numDivisions; i++) {" will be covered. 
6. For loop contents : user input statements are always executed. Statements "int numerator = scanner.nextInt();" and "int denominator = scanner.nextInt();" will be executed. 
7. Function call within main method : The function divideNumbers will executed only if the value returned by the function is valid. 
8. divideNumbers method Declaration and Execution : method declarations are executed when called. "private static int divideNumbers(int numerator, int denominator) {" is covered. But, since the value of denominator is 0, there is a DivideByZero exception handled dies to which statement "return numerator / denominator;" isn't covered. 
9. divideNumbers Method call in Main method : since value returned by divideNumbers is invalid, Statements "int result = divideNumbers(numerator, denominator);" and "System.out.println("Result for division " + (i + 1) + ": " + result);" are not covered. 
10. Statements after for loop in Main method : no statements after the for loop will be executed since the for loop failed to complete execution due to an exception raised. Statement "scanner.close();" isn't covered. 
11. Closing Brackets : always covered. 
Final code coverage of the Java program based on its test case and given step by step reasoning for execution is : 
> import java.util.Scanner;
> public class NumberDivision {
>     public static void main(String[] args) {
>         Scanner scanner = new Scanner(System.in);
>         System.out.print("Enter the number of divisions: ");
>         int numDivisions = scanner.nextInt();
>         for (int i = 1; i <= numDivisions; i++) {
>             int numerator = scanner.nextInt();
>             int denominator = scanner.nextInt();
!             int result = divideNumbers(numerator, denominator);
!             System.out.println("Result for division " + (i + 1) + ": " + result);
>         }
!         scanner.close();
>     }
>     private static int divideNumbers(int numerator, int denominator) {
!         return numerator / denominator;
>     }
> }
